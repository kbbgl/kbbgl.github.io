"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[34875],{62940:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(74848),o=t(28453);const i={slug:"debugging-nodejs-microservice-with-shared-storage-on\xa0kubernetes",title:"Debugging NodeJS Microservice with Shared Storage on\xa0Kubernetes",description:"Fill me up!",authors:["kbbgl"],tags:["containers","debugging","dev","docker","droppy","k8s","kubernetes","node","nodejs","web","webapplication","webdevelopment"]},r=void 0,a={permalink:"/blog/debugging-nodejs-microservice-with-shared-storage-on\xa0kubernetes",source:"@site/blog/debugging-nodejs-microservice-with-shared-storage-on-kubernetes.md",title:"Debugging NodeJS Microservice with Shared Storage on\xa0Kubernetes",description:"Fill me up!",date:"2024-09-26T20:02:05.000Z",tags:[{inline:!0,label:"containers",permalink:"/blog/tags/containers"},{inline:!0,label:"debugging",permalink:"/blog/tags/debugging"},{inline:!0,label:"dev",permalink:"/blog/tags/dev"},{inline:!0,label:"docker",permalink:"/blog/tags/docker"},{inline:!0,label:"droppy",permalink:"/blog/tags/droppy"},{inline:!0,label:"k8s",permalink:"/blog/tags/k-8-s"},{inline:!0,label:"kubernetes",permalink:"/blog/tags/kubernetes"},{inline:!0,label:"node",permalink:"/blog/tags/node"},{inline:!0,label:"nodejs",permalink:"/blog/tags/nodejs"},{inline:!0,label:"web",permalink:"/blog/tags/web"},{inline:!0,label:"webapplication",permalink:"/blog/tags/webapplication"},{inline:!0,label:"webdevelopment",permalink:"/blog/tags/webdevelopment"}],readingTime:6.09,hasTruncateMarker:!1,authors:[{name:"Kobbi Gal",title:"I like to pick things apart and see how they work inside",url:"https://github.com/kbbgl",imageURL:"https://avatars.githubusercontent.com/u/14372649",key:"kbbgl",page:null}],frontMatter:{slug:"debugging-nodejs-microservice-with-shared-storage-on\xa0kubernetes",title:"Debugging NodeJS Microservice with Shared Storage on\xa0Kubernetes",description:"Fill me up!",authors:["kbbgl"],tags:["containers","debugging","dev","docker","droppy","k8s","kubernetes","node","nodejs","web","webapplication","webdevelopment"]},unlisted:!1,prevItem:{title:"How To Catch EBUSY Event on Windows using NodeJS",permalink:"/blog/catch-ebusy-on-nodejs"},nextItem:{title:"How To Set Up Dotless Email Validation in Swagger",permalink:"/blog/dotless-email-regex-validation-swagger"}},l={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"Initial Analysis and Reproduction",id:"initial-analysis-and-reproduction",level:2},{value:"Reviewing Server Logs",id:"reviewing-server-logs",level:2},{value:"Brainstorming Solutions",id:"brainstorming-solutions",level:2},{value:"<code>allowDiskUse</code> and Changing Source Code",id:"allowdiskuse-and-changing-source-code",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://tilsupport.files.wordpress.com/2021/05/sort_exceeded-1.png",alt:"sort-exceeded"})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"One of our largest customer recently had a problem loading a list of resources from our web application. The problem was a blocker for the customer and required to identify the problem and provide a workaround, if possible. I was assigned the task as I was the SME in this area (NodeJS microservices, infrastructure such as storage, microservice messaging and configuration)."}),"\n",(0,s.jsx)(n.h2,{id:"initial-analysis-and-reproduction",children:"Initial Analysis and Reproduction"}),"\n",(0,s.jsx)(n.p,{children:"The issue was constantly reproducible which always simplifies things. All I needed to do was to restore the MongoDB dump, log in with a certain user and attempt to load the webpage with the list of resources.\nI restored the MongoDB dump using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mongorestore /path/to/dump\n"})}),"\n",(0,s.jsx)(n.p,{children:"and logged in with the user and accessed the webpage.\nI saw that the webpage layout loaded just fine but the actual resource tree was missing. I then opened up the Chrome Developer Tools and navigated to the \u2018Network\u2019 tab which allowed me to see the requests sent to the server and find the failing API call. Easily enough, I discovered that the:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -X GET $SERVER/api/list\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Returned a ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500",children:"500 HTTP response code (Internal Server Error)"}),". This indicates that there must be some uncaught exception thrown from the server side. The only way to understand the problem is to check the server logs and proceed from there."]}),"\n",(0,s.jsx)(n.h2,{id:"reviewing-server-logs",children:"Reviewing Server Logs"}),"\n",(0,s.jsx)(n.p,{children:"As I had a lot of experience dealing with the specific microservice and storage, I knew the architecture and dependencies pretty well. In short, it\u2019s a NEAM (NodeJS + Express + Angular + MongoDB) stack. The list of resources were stored in a MongoDB collection (let\u2019s call it resources). The DAL (data access layer) interacting with the resources collection was a NodeJS microservice running an Express server. The client generating the API call was running Angular. The microservices were running in Docker containers in a Kubernetes cluster."}),"\n",(0,s.jsx)(n.p,{children:"Reviewing the NodeJS microservice logs, I saw the following error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Exceeded memory limit for $group, but didn't allow external sort\n"})}),"\n",(0,s.jsx)(n.p,{children:"Researching this issue, I found that it\u2019s related to the size of the MongoDB query generated. To understand the magnitude of the query, I checked the MongoDB collection size:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"db.resources.count()\n// 1242731\n"})}),"\n",(0,s.jsx)(n.p,{children:"This was the largest number of documents I\u2019ve seen in this collection. It seems that the sort aggregation query generated to MongoDB was too large and couldn\u2019t be processed by the server."}),"\n",(0,s.jsx)(n.h2,{id:"brainstorming-solutions",children:"Brainstorming Solutions"}),"\n",(0,s.jsx)(n.p,{children:"Starting to think about the possible solutions, the first one that came to mind was to run some sort of cleanup scripts to remove MongoDB duplicates. Since I had a tool like that at my disposal, I ran it. But the script removed less than 1% of the documents.\nThe second solution was also related to decreasing the number of documents. But have the customer review the system and begin purging irrelevant resources from the web app. The customer reviewed their list of resources but could not find any particular resources that could be removed. So it seems that we need to somehow resolve the issue without decreasing the size of the collection.\nAfter reviewing the NodeJS microservice source code, I found that the query generated by the DAL to MongoDB was the following (simplified version):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// /path/to/resources.dal.js\ndb.getCollection(\'resources\').aggregate([\n  { \n    "$group": {\n      "ids": { "$push": "$_id" }\n    }\n  }\n])\n'})}),"\n",(0,s.jsxs)(n.p,{children:["So seems that 1 million documents with this specific query was not going to be processed. I needed to find a way to modify the query to be able to execute successfully.\nI did some research and found that MongoDB has a ",(0,s.jsx)(n.code,{children:"100MB"})," system limit on blocking sort operation. There was no way to increase this limit. But, there was a way to work around this problem by using the disk as swap space to complement the RAM used by the query. MongoDB creates a temporary directory (",(0,s.jsx)(n.code,{children:"_tmp"}),") inside the ",(0,s.jsx)(n.code,{children:"dbPath"})," storage location to generate and process the query."]}),"\n",(0,s.jsxs)(n.h2,{id:"allowdiskuse-and-changing-source-code",children:[(0,s.jsx)(n.code,{children:"allowDiskUse"})," and Changing Source Code"]}),"\n",(0,s.jsx)(n.p,{children:"The configuration to use the disk as swap space to increase the MongoDB system limit is quite easy. All we need to do is add the following object to the query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"{allowDiskUse: true}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Adding it to the source code on my test machine, it looked like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// /path/to/resources.dal.js\ndb.getCollection(\'resources\').aggregate([\n  { \n    "$group": {\n      "ids": { "$push": "$_id" }\n    }\n  }\n], {allowDiskUse: true})\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Restarting the service for the changes to take effect, the ",(0,s.jsx)(n.code,{children:"GET /api/resources"})," API call returned a 200. Success!\nBut, I faced one last problem: the issue is happening in production. How was I going to change the source code on a Docker container if upon recycling (kubectl delete pod $POD_NAME), the source code would be reverted to the original source code packed into the image?"]}),"\n",(0,s.jsx)(n.p,{children:"After a few hours of tinkering around, trying to find an answer to this question, I was able to find a direction that would lead me to the solution implementation.\nI started by reviewing a few things:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The NodeJS microservice ",(0,s.jsx)(n.code,{children:"Dockerfile"})," \u2013 I found that the ",(0,s.jsx)(n.code,{children:"Dockerfile"})," executed the following command to start the server:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'CMD ["npm", "start"]\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The Kubernetes ",(0,s.jsx)(n.code,{children:"Deployment"})," (shortened for brevity) had the same initial execution commands but with additional commands to move around some resources within the container and the shared storage location:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Deployment\nmetadata:\nname: some-nodejs-service\nlabels:\n purpose: backend\nspec:\ncontainers:\n- name: some-nodejs-service\n image: alpine\n command: ["/bin/bash"]\n args: ["-c", "|", "mkdir -p /tmp/other-res;", "mv /path/to/app/tmp /tmp/other-res&&", "npm start"]\nvolumeMounts:\n - mountPath: /opt/storage\n name: storage\nvolumes:\n- name: storage\n persistentVolumeClaim:\n claimName: storage-claim\n'})}),"\n",(0,s.jsxs)(n.p,{children:["So my thought was: since I have access to the storage using the web application hosting a ",(0,s.jsx)(n.a,{href:"https://github.com/silverwind/droppy",children:"Droppy"})," mounted as ",(0,s.jsx)(n.code,{children:"/opt/storage"})," on the host machine, could I just add a modified NodeJS module with the fix and replace it before the server initializes?\nIt was worth a shot.\nThe first thing I needed to do is to copy the module from the container to the shared storage location. To do this, I ran the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl exec some-nodejs-service-dd888bb69-plr6j -- cp /path/to/resources.dal.js /opt/storage/resources.dal.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I then modified the source code in the ",(0,s.jsx)(n.code,{children:"resources.dal.js"})," module that added the ",(0,s.jsx)(n.code,{children:"allowDiskUse: true"})," configuration.\nNext step was to add a couple of more commands to the container before the NodeJS service is started. The first command is to rename the module:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mv /path/to/resources.dal.js /path/to/resources.dal.js.bak\n"})}),"\n",(0,s.jsx)(n.p,{children:"The next command is to copy the file from the shared storage (the one with the fix) into the container to replace the original module we renamed in the previous command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cp /opt/storage/resources.dal.js /path/to/resources.dal.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I modified the Kubernetes ",(0,s.jsx)(n.code,{children:"Deployment"})," using ",(0,s.jsx)(n.code,{children:"kubectl edit deployment some-nodejs-service"}),". The modified Kubernetes container commands looked like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Deployment\nmetadata:\n  name: some-nodejs-service\n  labels:\n    purpose: backend\nspec:\n  containers:\n  - name: some-nodejs-service\n    image: alpine\n    command: ["/bin/bash"]\n    args: [\n  "-c",\n  "|",\n  "mkdir -p /tmp/other-res;",\n  "mv /path/to/app/tmp /tmp/other-res&&",\n  \n  # Added this\n  "mv /path/to/resources.dal.js /path/to/resources.dal.js.bak",\n  # Added this\n  "cp /opt/storage/resources.dal.js /path/to/resources.dal.js",\n  "npm start"\n  ]\n   volumeMounts:\n    - mountPath: /opt/storage\n      name: storage\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: storage-claim\n'})}),"\n",(0,s.jsx)(n.p,{children:"Upon saving the changes, I needed to terminate the Pods for changes to take effect using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl scale deployment some-nodejs-service --replicas 0\nkubectl scale deployment some-nodejs-service --replicas 1\n"})}),"\n",(0,s.jsx)(n.p,{children:"This fixed the problem, another satisfied customer escalation was resolved!"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);