"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[42135],{87144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var i=n(74848),a=n(28453);const l={slug:"buttons-led-tablelamp",title:"Tablelamp using Buttons & LED",description:"Tutorial building a tablelamp using a button and an LED",authors:["kbbgl"],tags:["hardware","raspberry_pi","ee","c","python"]},o=void 0,r={id:"hardware/electronics/Tablelamp",title:"Tablelamp using Buttons & LED",description:"Tutorial building a tablelamp using a button and an LED",source:"@site/docs/hardware/electronics/Tablelamp.md",sourceDirName:"hardware/electronics",slug:"/hardware/electronics/buttons-led-tablelamp",permalink:"/docs/hardware/electronics/buttons-led-tablelamp",draft:!1,unlisted:!1,tags:[{inline:!0,label:"hardware",permalink:"/docs/tags/hardware"},{inline:!0,label:"raspberry_pi",permalink:"/docs/tags/raspberry-pi"},{inline:!0,label:"ee",permalink:"/docs/tags/ee"},{inline:!0,label:"c",permalink:"/docs/tags/c"},{inline:!0,label:"python",permalink:"/docs/tags/python"}],version:"current",frontMatter:{slug:"buttons-led-tablelamp",title:"Tablelamp using Buttons & LED",description:"Tutorial building a tablelamp using a button and an LED",authors:["kbbgl"],tags:["hardware","raspberry_pi","ee","c","python"]},sidebar:"docsSidebar",previous:{title:"Buttons & LED",permalink:"/docs/hardware/electronics/buttons-led"},next:{title:"Electronic components",permalink:"/docs/hardware/electronics/electrical-components"}},s={},d=[{value:"Circuit",id:"circuit",level:2},{value:"Code",id:"code",level:2},{value:"C",id:"c",level:3},{value:"Python",id:"python",level:3}];function u(e){const t={code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In this article, we're going to use a push button and an LED to build a tablelamp that turns on when pushed and turns off when pushed again."}),"\n",(0,i.jsx)(t.h2,{id:"circuit",children:"Circuit"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"cir",src:n(91509).A+"",width:"656",height:"618"})}),"\n",(0,i.jsx)(t.h2,{id:"code",children:"Code"}),"\n",(0,i.jsx)(t.h3,{id:"c",children:"C"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-c",metastring:"title=Tablelamp.c",children:'#include <wiringPi.h>\n#include <stdio.h>\n\n#define ledPin    0   //define the ledPin\n#define buttonPin 1  //define the buttonPin\nint ledState=LOW;  //store the State of led\nint buttonState=HIGH; //store the State of button\nint lastbuttonState=HIGH;//store the lastState of button\nlong lastChangeTime; //store the change time of button state\nlong captureTime=50; //set the stable time for button state \nint reading;\nint main(void)\n{\n printf("Program is starting...\\n");\n \n wiringPiSetup(); //Initialize wiringPi. \n \n pinMode(ledPin, OUTPUT);   //Set ledPin to output\n pinMode(buttonPin, INPUT); //Set buttonPin to input\n\n pullUpDnControl(buttonPin, PUD_UP);  //pull up to high level\n while(1){\n  reading = digitalRead(buttonPin); //read the current state of button\n  if( reading != lastbuttonState){  //if the button state has changed, record the time point\n   lastChangeTime = millis();\n  }\n  //if changing-state of the button last beyond the time we set, we consider that \n  //the current button state is an effective change rather than a buffeting\n  if(millis() - lastChangeTime > captureTime){\n   //if button state is changed, update the data.\n   if(reading != buttonState){\n    buttonState = reading;\n    //if the state is low, it means the action is pressing\n    if(buttonState == LOW){\n     printf("Button is pressed!\\n");\n     ledState = !ledState; //Reverse the LED state\n     if(ledState){\n      printf("turn on LED ...\\n");\n     }\n     else {\n      printf("turn off LED ...\\n");\n     }\n    }\n    //if the state is high, it means the action is releasing\n    else {\n     printf("Button is released!\\n");\n    }\n   }\n  }\n  digitalWrite(ledPin,ledState);\n  lastbuttonState = reading;\n }\n\n return 0;\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"python",children:"Python"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",metastring:'title="Tablelamp.py"',children:"import RPi.GPIO as GPIO\n\nledPin = 11       # define ledPin\nbuttonPin = 12    # define buttonPin\nledState = False\n\ndef setup():    \n    GPIO.setmode(GPIO.BOARD)         # use PHYSICAL GPIO Numbering\n    GPIO.setup(ledPin, GPIO.OUT)     # set ledPin to OUTPUT mode\n    GPIO.setup(buttonPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)     # set buttonPin to PULL UP INPUT mode\n\ndef buttonEvent(channel): # When button is pressed, this function will be executed\n    global ledState \n    print ('buttonEvent GPIO%d' %channel)\n    ledState = not ledState\n    if ledState :\n        print ('Led turned on >>>')\n    else :\n        print ('Led turned off <<<')\n    GPIO.output(ledPin,ledState)\n    \ndef loop():\n    #Button detect \n    GPIO.add_event_detect(buttonPin,GPIO.FALLING,callback = buttonEvent,bouncetime=300)\n    while True:\n        pass\n                \ndef destroy():\n    GPIO.cleanup()                     # Release GPIO resource\n\nif __name__ == '__main__':     # Program entrance\n    print ('Program is starting...')\n    setup()\n    try:\n        loop()\n    except KeyboardInterrupt:  # Press ctrl-c to end the program.\n        destroy()\n"})})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},91509:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/button-blink-dd2788de82b3eb282fce6d392a3c34d8.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(96540);const a={},l=i.createContext(a);function o(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);