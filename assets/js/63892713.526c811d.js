"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[70754],{57304:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=t(74848),o=t(28453);const i={},r="Channels (chan) and goroutines (Concurrency)",c={id:"software/languages/go/channels-and-routines",title:"Channels (chan) and goroutines (Concurrency)",description:"Provides concurrency features.",source:"@site/docs/software/languages/go/channels-and-routines.md",sourceDirName:"software/languages/go",slug:"/software/languages/go/channels-and-routines",permalink:"/docs/software/languages/go/channels-and-routines",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Syntax",permalink:"/docs/software/languages/erlang/syntax"},next:{title:"Using Delve Debugger",permalink:"/docs/software/languages/go/how-to-debug-go-code-delve"}},s={},l=[{value:"Sending/Receiving Data to/from Channel",id:"sendingreceiving-data-tofrom-channel",level:2},{value:"Usage",id:"usage",level:2}];function h(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsxs)(e.h1,{id:"channels-chan-and-goroutines-concurrency",children:["Channels (",(0,a.jsx)(e.code,{children:"chan"}),") and ",(0,a.jsx)(e.code,{children:"goroutines"})," (Concurrency)"]})}),"\n",(0,a.jsx)(e.p,{children:"Provides concurrency features."}),"\n",(0,a.jsxs)(e.p,{children:["When we execute a go program, a ",(0,a.jsx)(e.code,{children:"goroutine"})," executes it line by line."]}),"\n",(0,a.jsxs)(e.p,{children:["A ",(0,a.jsx)(e.code,{children:"goroutine"})," is a thread managed by the Go runtime which has its own scheduler to manage the routines. The scheduler distributes routines across CPU cores."]}),"\n",(0,a.jsx)(e.p,{children:"A channel provides communication between the main routine and the child routines."}),"\n",(0,a.jsx)(e.h2,{id:"sendingreceiving-data-tofrom-channel",children:"Sending/Receiving Data to/from Channel"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:"// send the value '5' into this channel\nchannel <- 5\n// wait for a value to be sent into the channel\n// when we get one, assign back to myNumber\n// this is a blocking call\nmyNumber <- channel\n\n// wait for a value to be sent into the channel\n// when we get one, log it out\n// this is a blocking call\nfmt.Println(<- channel)\n"})}),"\n",(0,a.jsx)(e.p,{children:"A channel may cause the main routine to continue execution if the channel awaits data to be sent through it."}),"\n",(0,a.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(e.p,{children:"To make a function run in concurrently:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'func main() {\n  links := []string{\n    "https://google.com",\n    "https://amazon.com",\n    "https://facebook.com",\n    "https://stackoverflow.com",\n    "https://golang.org",\n  }\n  \n  channel := make(chan string)\n  \n  for _, link := range links {\n    go checkLink(link, channel)\n  }\n  // for loop used with channels\n  // will start loop when channel receives a value\n  // We need to add the link as an argument to the function literal to ensure that the routine is pointing to right data\n  for link := range channel {\n    go func(link string) {\n      time.Sleep(5 * time.Second)\n      checkLink(link, channel)\n    }(link)\n  }\n}\n\nfunc checkLink(link string, channel chan string) {\n  _, err := http.Get(link) // blocking call\n  if err != nil {\n    fmt.Println(link, "might be down")\n    channel <- link\n    return\n  }\n  \n  fmt.Println(link, "is up")\n  \n  channel <- link\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(h,{...n})}):h(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>c});var a=t(96540);const o={},i=a.createContext(o);function r(n){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);