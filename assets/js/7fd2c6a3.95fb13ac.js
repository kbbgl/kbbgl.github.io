"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[71097],{92018:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>c,toc:()=>m});var s=n(74848),r=n(28453);const t={},i="Memory Monitoring and Usage",c={id:"os/UNIX/System Monitoring/memory",title:"Memory Monitoring and Usage",description:"OOM Killer",source:"@site/docs/os/UNIX/System Monitoring/memory.md",sourceDirName:"os/UNIX/System Monitoring",slug:"/os/UNIX/System Monitoring/memory",permalink:"/docs/os/UNIX/System Monitoring/memory",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List Services",permalink:"/docs/os/UNIX/System Monitoring/list_services_systemd"},next:{title:"System Resource Monitoring Tools",permalink:"/docs/os/UNIX/System Monitoring/resource_tools"}},a={},m=[{value:"OOM Killer",id:"oom-killer",level:2}];function l(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"memory-monitoring-and-usage",children:"Memory Monitoring and Usage"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:"pmap\ncat /proc/meminfo\ncat /proc/sys/vm/*\nfree\nvmstat -S m\nvmstat -d\nvmstat -p /dev/sdb1\n"})}),"\n",(0,s.jsx)(o.h2,{id:"oom-killer",children:"OOM Killer"}),"\n",(0,s.jsx)(o.p,{children:"Ways to deal with memory pressure:"}),"\n",(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:"Permit memory allocations as long as there's free memory."}),"\n",(0,s.jsxs)(o.li,{children:["Use swap space to push some resident memory out of core. We can turn on/off the swap by ",(0,s.jsx)(o.code,{children:"/sbin/swapo[n/ff] -a"})]}),"\n",(0,s.jsx)(o.li,{children:"In Linux, the system overcommits memory (using COW) for user space processes (kernel space are allocated during request time)."}),"\n"]}),"\n",(0,s.jsxs)(o.p,{children:["We can change the overcommitting ",(0,s.jsx)(o.a,{href:"https://www.kernel.org/doc/Documentation/vm/overcommit-accounting",children:"policy"})," by:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-bash",children:'# $X can be:\n# 0: default, permit for certain cases.\n# 1: all.\n# 2: disable, memory requests will fail when memory commit reaches the size of swap space + configurable (`/proc/sys/vm/overcommit_ratio`) RAM percentage.\necho "vm.overcommit_memory=X"\n'})}),"\n",(0,s.jsxs)(o.p,{children:["When the system reaches memory exhaustion, it invokes the OOM-Killer which decides to kill process by the ",(0,s.jsx)(o.code,{children:"/proc/[pid]/oom_score"}),". We can modify this value by adjusting ",(0,s.jsx)(o.code,{children:"/prov/[pid]/oom_adj"})," and ",(0,s.jsx)(o.code,{children:"/prov/[pid]/oom_adj_score"}),"."]})]})}function d(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>c});var s=n(96540);const r={},t=s.createContext(r);function i(e){const o=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:o},e.children)}}}]);