"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[68948],{37596:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=s(74848),i=s(28453);const o={},t=void 0,c={id:"software/containerization/k8s/Monitoring/fluent/Fluent_Architecture",title:"Fluent_Architecture",description:"Standard I/O",source:"@site/docs/software/containerization/k8s/Monitoring/fluent/Fluent_Architecture.md",sourceDirName:"software/containerization/k8s/Monitoring/fluent",slug:"/software/containerization/k8s/Monitoring/fluent/Fluent_Architecture",permalink:"/docs/software/containerization/k8s/Monitoring/fluent/Fluent_Architecture",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create Jaegar Instance",permalink:"/docs/software/containerization/k8s/Monitoring/create_jaegar_instance"},next:{title:"Set_up_EFK",permalink:"/docs/software/containerization/k8s/Monitoring/fluent/Set_up_EFK"}},l={},d=[{value:"Standard I/O",id:"standard-io",level:3},{value:"Logging &amp; Docker Containers",id:"logging--docker-containers",level:3},{value:"Docker Log Streams",id:"docker-log-streams",level:3},{value:"Logging &amp; Kubernetes",id:"logging--kubernetes",level:3},{value:"Log Processing in Kubernetes",id:"log-processing-in-kubernetes",level:3},{value:"<code>fluent-bit</code> config:",id:"fluent-bit-config",level:3}];function a(e){const n={code:"code",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"standard-io",children:"Standard I/O"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"stdin => app\nstdout <= app\nstderr <= app\n"})}),"\n",(0,r.jsx)(n.h3,{id:"logging--docker-containers",children:"Logging & Docker Containers"}),"\n",(0,r.jsx)(n.p,{children:"App writes message to stdout"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"app => stdout \u201chi\u201d\n"})}),"\n",(0,r.jsx)(n.p,{children:"message \u201chi\u201d is encapsulated in a JSON map by docker engine:"}),"\n",(0,r.jsx)(n.p,{children:"\u201chi\u201d becomes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{ \n    \u201clog\u201d: \u201cHi\u201d, \n    \u201cstream\u201d: \u201cstdout\u201d, \n    "time": \u201c2020-08-13T16:16:05.53515125\u201d\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["so JSON has context (",(0,r.jsx)(n.code,{children:"stdout"}),", ",(0,r.jsx)(n.code,{children:"log message"}),", ",(0,r.jsx)(n.code,{children:"timestamp"}),")"]}),"\n",(0,r.jsx)(n.p,{children:"this message is appended to the container log file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/var/log/containers/containername.log (symlink to /var/lib/docker/containers/CONTAINER_HASH/CONTAINER_HASH-json.log)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"docker-log-streams",children:"Docker Log Streams"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'docker run -d busybox echo -n "helloworld"\n'})}),"\n",(0,r.jsx)(n.p,{children:"this will return the hash as it's running with a daemon flag"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo cat /var/lib/docker/containers/CONTAINER_HASH/CONTAINER_HASH-json.log | jq\n"})}),"\n",(0,r.jsx)(n.h3,{id:"logging--kubernetes",children:"Logging & Kubernetes"}),"\n",(0,r.jsx)(n.p,{children:"In addition to Docker context, there's:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pod Name and Pod ID"}),"\n",(0,r.jsx)(n.li,{children:"Namespace"}),"\n",(0,r.jsx)(n.li,{children:"Node"}),"\n",(0,r.jsx)(n.li,{children:"Labels"}),"\n",(0,r.jsx)(n.li,{children:"Annotations"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"So the fluent-bit has to process:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Container name and container id (received from ",(0,r.jsx)(n.code,{children:"fs"}),"/",(0,r.jsx)(n.code,{children:"journal"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Pod Name and Pod ID"}),"\n",(0,r.jsx)(n.li,{children:"Namespace"}),"\n",(0,r.jsx)(n.li,{children:"Node"}),"\n",(0,r.jsx)(n.li,{children:"Labels"}),"\n",(0,r.jsx)(n.li,{children:"Annotations"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Logs source (k8s API server + fs) <=> log processor <=> Storage (logzio)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["so the log processor (",(0,r.jsx)(n.code,{children:"fluentbit"}),") needs to correlate the fs (container name + id) from docker with the resources created by k8s API server."]}),"\n",(0,r.jsx)(n.h3,{id:"log-processing-in-kubernetes",children:"Log Processing in Kubernetes"}),"\n",(0,r.jsxs)(n.p,{children:["log process runs as a ",(0,r.jsx)(n.code,{children:"DaemonSet"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["every node has N Pods which write to ",(0,r.jsx)(n.code,{children:"/var/log/containers/*"})," which is a ",(0,r.jsx)(n.code,{children:"symlink"})," to docker engine logs (",(0,r.jsx)(n.code,{children:"/var/lib/docker/.."}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["every node has a ",(0,r.jsx)(n.code,{children:"fluent-bit"})," Pod running on it"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"fluent-bit"})," pod does 2 things:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["reads each log in ",(0,r.jsx)(n.code,{children:"/var/log/containers/*"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"looks up the metadata from k8s API server"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"fluent-bit-config",children:[(0,r.jsx)(n.code,{children:"fluent-bit"})," config:"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Sections:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Service"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"[SERVICE]\n\t    Flush           5 # flush time in seconds. every 5 seconds the engine flushes records to output plugin\n\t    Daemon          off # whether to run as bg\n\t    Log_Level       debug \n\t    HTTP_Monitoring On.  # enable web service monitoring interface\n\t    HTTP_Port       2020 # TCP port running of monitoring interface\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Input: defines a source of data."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"[INPUT]\n\t    Name cpu.      # name of input plugin\n\t    Tag  my_cpu    # tag for associated records coming from this plugin\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Output: defines a destination records should follow after a tag match"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"[OUTPUT]\n\t    Name  stdout # name of output plugin\n\t    Match my*cpu # pattern to match certain record's tag. \n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(96540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);