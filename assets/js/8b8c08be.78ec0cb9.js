"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[27013],{49893:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var t=c(74848),s=c(28453);const r={},a="Branches",i={id:"software/version_control_systems/git/Branches/branches",title:"Branches",description:"A branch is just a text reference to a commit.",source:"@site/docs/software/version_control_systems/git/Branches/branches.md",sourceDirName:"software/version_control_systems/git/Branches",slug:"/software/version_control_systems/git/Branches/",permalink:"/docs/software/version_control_systems/git/Branches/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Multiple GitHub Accounts using Aliases",permalink:"/docs/software/version_control_systems/gh/aliases"},next:{title:"git Cheat Sheet",permalink:"/docs/software/version_control_systems/git/git-cheatsheet"}},o={},d=[{value:"<code>HEAD</code>",id:"head",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"branches",children:"Branches"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"branch"})," is just a text reference to a ",(0,t.jsx)(n.code,{children:"commit"}),".\nThe pointers for all ",(0,t.jsx)(n.code,{children:"branch"}),"es are located in:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cat .git/refs/heads\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The current ",(0,t.jsx)(n.code,{children:"branch"})," head always points to the latest ",(0,t.jsx)(n.code,{children:"commit"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git log --no-page\ncommit 4e7b9a4b17d4748f79e033264f89abb537e3047d (HEAD -> master)\nDate:   Sat Oct 9 01:06:08 2021 +0300\nsecond commit\ncommit cc83ae14f363a62b08df4afb719bf87fc57ddd95\nDate:   Fri Oct 8 19:21:20 2021 +0300\n\nfirst commit\n\ncat .git/refs/heads/master\\n4e7b9a4b17d4748f79e033264f89abb537e3047d\n"})}),"\n",(0,t.jsx)(n.h2,{id:"head",children:(0,t.jsx)(n.code,{children:"HEAD"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"HEAD"})," is the pointer to a currently checked-out ",(0,t.jsx)(n.code,{children:"branch"}),". The currently checked-out ",(0,t.jsx)(n.code,{children:"branch"})," points to the latest ",(0,t.jsx)(n.code,{children:"commit"}),". ",(0,t.jsx)(n.code,{children:"HEAD"})," can also point to a specific ",(0,t.jsx)(n.code,{children:"commit"})]}),"\n",(0,t.jsxs)(n.p,{children:["There is only one ",(0,t.jsx)(n.code,{children:"HEAD"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The pointer is located in:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cat .git/HEAD\nref: refs/heads/master\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To change the reference to a specific ",(0,t.jsx)(n.code,{children:"branch"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git checkout $BRANCH_NAME\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To change the reference to a specific ",(0,t.jsx)(n.code,{children:"commit"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git checkout $COMMIT_HASH\ncat .git/HEAD\n$COMMIT_HASH\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Checking out a specific ",(0,t.jsx)(n.code,{children:"commit"})," will trigger ",(0,t.jsx)(n.code,{children:"detached HEAD"})," since the ",(0,t.jsx)(n.code,{children:"HEAD"})," is not pointing to a ",(0,t.jsx)(n.code,{children:"branch"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git --no-pager log\n# `HEAD` not pointing to `master` (e.g. `HEAD` -> `master`)\ncommit 4e7b9a4b17d4748f79e033264f89abb537e3047d (HEAD)\\nDate:   Sat Oct 9 01:06:08 2021 +0300\n\nsecond commit\n\ncommit cc83ae14f363a62b08df4afb719bf87fc57ddd95\\nDate:   Fri Oct 8 19:21:20 2021 +0300\\n\\n    first commit\\n```\\n\\n\\n## Management\n```bash\n# create new branch\ngit branch temp\n\n# create branch and checking it out\ngit branch -b temp\n\n# delete branch\ngit branch -d $BRANCH_NAME\n\n# rename\ngit branch -m $BRANCH_OLD_NAME $BRANCH_NEW_NAME\n"})}),"\n",(0,t.jsxs)(n.p,{children:["New ",(0,t.jsx)(n.code,{children:"branch"}),"es will be based on the current one:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git --no-pager branch\n  master\n\n# create a new branch based on currently checked-out branch (master)\ngit branch temp\ngit --no-pager branch\nmaster\ntemp\n\ncat .git/refs/heads/temp\\n1ed1cdd2f5d87602a0582db36d9a1a73ac93bb34\n\ncat .git/refs/heads/master\\n1ed1cdd2f5d87602a0582db36d9a1a73ac93bb34\n\ngit checkout temp\nSwitched to branch 'temp'\n\ncat .git/HEAD\nref: refs/heads/temp\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,c)=>{c.d(n,{R:()=>a,x:()=>i});var t=c(96540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);