"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[27445],{62773:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var t=s(74848),r=s(28453);const o={},i=void 0,c={id:"software/containerization/k8s/Architecture/Nodes",title:"Nodes",description:"Nodes",source:"@site/docs/software/containerization/k8s/Architecture/Nodes.md",sourceDirName:"software/containerization/k8s/Architecture",slug:"/software/containerization/k8s/Architecture/Nodes",permalink:"/docs/software/containerization/k8s/Architecture/Nodes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Network",permalink:"/docs/software/containerization/k8s/Architecture/Network"},next:{title:"Pod",permalink:"/docs/software/containerization/k8s/Architecture/Pod"}},d={},a=[{value:"Nodes",id:"nodes",level:2},{value:"Master Node",id:"master-node",level:2},{value:"Worker Node",id:"worker-node",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"nodes",children:"Nodes"}),"\n",(0,t.jsxs)(n.p,{children:["Nodes are physical or VM servers where the cluster is deployed. Nodes have roles, either master or worker. A ",(0,t.jsx)(n.code,{children:"Node"})," is an API object created outside the cluster representing an instance."]}),"\n",(0,t.jsx)(n.p,{children:"We can create a master node with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubeadm init\n"})}),"\n",(0,t.jsx)(n.p,{children:"and worker nodes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubeadm join\n"})}),"\n",(0,t.jsx)(n.p,{children:"To remove nodes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl delete node $nodename\n\n# remove cluster-specific information\nkubeadm reset \n"})}),"\n",(0,t.jsx)(n.p,{children:"To view current node status:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl describe node $nodename\n"})}),"\n",(0,t.jsx)(n.p,{children:"All nodes run the following components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"kubelet"}),": Ensures that containers are running in a ",(0,t.jsx)(n.code,{children:"Pod"}),".","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Receives resource specifications (",(0,t.jsx)(n.code,{children:"PodSpec"}),") and ensures that the node meets the desired specs working with ",(0,t.jsx)(n.code,{children:"container-runtime"})]}),"\n",(0,t.jsxs)(n.li,{children:["Ensures that a ",(0,t.jsx)(n.code,{children:"Pod"})," has access to specified storage, ",(0,t.jsx)(n.code,{children:"Secrets"})," or ",(0,t.jsx)(n.code,{children:"ConfigMaps"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Reports status of ",(0,t.jsx)(n.code,{children:"Pod"}),"s to cluster."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"kube-proxy"}),": Network proxy implemented as a ",(0,t.jsx)(n.code,{children:"Service"}),". It maintains network rules on the node based on IP tables so that internal and external clients can communicate with the ",(0,t.jsx)(n.code,{children:"Pod"}),"s."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"container-runtime"}),": Works with ",(0,t.jsx)(n.code,{children:"kubelet"})," to ensure specified containers are running and healthy. It's an interface between Kubernetes and the container/Docker Engine."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"master-node",children:"Master Node"}),"\n",(0,t.jsx)(n.p,{children:"The Master node runs various management services for the whole cluster, mainly:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"kube-apiserver"}),": All calls (internal and external traffic) are handled with this agent. It is the only connection to the ",(0,t.jsx)(n.code,{children:"etcd"})," database. Acts as a master process for the entire cluster."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"kube-scheduler"}),": Responsible for assigning Pods to Nodes by provided specification (labels, taints, toletations, number of replicas, state)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"etcd"}),": key-value database where the state of the cluster information, as well as other persistent data and networking is kept. Requests to update DB is load-balanced by ",(0,t.jsx)(n.code,{children:"kube-apiserver"})," and distributed to database in series. ",(0,t.jsx)(n.code,{children:"etcdctl"})," can be used to interact with db."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"kube-controller-manager"}),": Determines the state of the cluster by interaction with ",(0,t.jsx)(n.code,{children:"kube-apiserver"}),". If any action is needed, it alerts other controllers (endpoints, namespaces, replicasets) of need to add/remove resources."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"worker-node",children:"Worker Node"}),"\n",(0,t.jsx)(n.p,{children:"The Worker Node hosts the applications workload."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(96540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);