"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[52212],{63469:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=t(74848),r=t(28453);const i={slug:"cheatsheet",title:"Docker Cheatsheet",authors:["kbbgl"],tags:["docker","cheatsheet"]},a=void 0,c={id:"software/containerization/docker/docker_cheatsheet",title:"Docker Cheatsheet",description:"Create Dockerfile",source:"@site/docs/software/containerization/docker/docker_cheatsheet.md",sourceDirName:"software/containerization/docker",slug:"/software/containerization/docker/cheatsheet",permalink:"/docs/software/containerization/docker/cheatsheet",draft:!1,unlisted:!1,tags:[{inline:!0,label:"docker",permalink:"/docs/tags/docker"},{inline:!0,label:"cheatsheet",permalink:"/docs/tags/cheatsheet"}],version:"current",frontMatter:{slug:"cheatsheet",title:"Docker Cheatsheet",authors:["kbbgl"],tags:["docker","cheatsheet"]},sidebar:"docsSidebar",previous:{title:"Architecture",permalink:"/docs/software/containerization/docker/architecture"},next:{title:"Get Docker Shim to Network Interface",permalink:"/docs/software/containerization/docker/network/docker-shim-to-interface"}},s={},l=[{value:"Create <code>Dockerfile</code>",id:"create-dockerfile",level:2},{value:"Build container",id:"build-container",level:2},{value:"Run container",id:"run-container",level:2},{value:"Get system information",id:"get-system-information",level:2},{value:"Optimize the Docker Build cache",id:"optimize-the-docker-build-cache",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"create-dockerfile",children:["Create ",(0,o.jsx)(n.code,{children:"Dockerfile"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'# the first stage of our build will use a maven 3.6.1 parent image\nFROM maven:3.6.1-jdk-8-alpine AS MAVEN_BUILD\n\n# copy the pom and src code to the container\nCOPY ./ ./\n\n# package our application code\nRUN mvn clean package\n\n# the second stage of our build will use open jdk 8 on alpine 3.9\nFROM openjdk:8-jre-alpine3.9\n\n# copy only the artifacts we need from the first stage and discard the rest\nCOPY --from=MAVEN_BUILD /docker-multi-stage-build-demo/target/demo-0.0.1-SNAPSHOT.jar /demo.jar\n\n# set the startup command to execute the jar\nCMD ["java", "-jar", "/demo.jar"]\n'})}),"\n",(0,o.jsx)(n.h2,{id:"build-container",children:"Build container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker build -t $TAG .\n"})}),"\n",(0,o.jsx)(n.h2,{id:"run-container",children:"Run container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker run -d -p 8080:8080 anna/docker-multi-stage-build-demo:1.0-SNAPSHOT\n"})}),"\n",(0,o.jsx)(n.h2,{id:"get-system-information",children:"Get system information"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sudo docker info\n\nServer:\n Containers: 0\n  Running: 0\n  Paused: 0\n  Stopped: 0\n Images: 0\n Server Version: 19.03.12\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: cgroupfs\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 481103c8793316c118d9f795cde18060847c370e\n runc version: 1.0.0~rc10+dfsg2-1\n init version:\n Security Options:\n  seccomp\n   Profile: default\n Kernel Version: 4.19.118-Re4son-v7l+\n Operating System: Kali GNU/Linux Rolling\n OSType: linux\n Architecture: armv7l\n CPUs: 4\n Total Memory: 7.78GiB\n Name: kali\n ID: 7FOC:BFDK:S6RB:HTJ2:U6UH:DQRU:RWTC:UCKI:YCOA:XW5O:J4P2:DZAN\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Live Restore Enabled: false\n\nWARNING: No memory limit support\nWARNING: No swap limit support\nWARNING: No kernel memory limit support\nWARNING: No kernel memory TCP limit support\nWARNING: No oom kill disable support\nWARNING: No cpu cfs quota support\nWARNING: No cpu cfs period support\n"})}),"\n",(0,o.jsx)(n.h3,{id:"optimize-the-docker-build-cache",children:"Optimize the Docker Build cache"}),"\n",(0,o.jsxs)(n.p,{children:["Adding ",(0,o.jsx)(n.code,{children:"RUN --mount=type=cache"})," keeps your package cache intact between builds. No more re-downloading the entire internet every time you build your image. It\u2019s especially handy when you\u2019re working with large dependencies. Implement this, and watch your build efficiency go through the roof."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dockerfile",children:'# Use an official Node base image\nFROM node:14\n \n# Install dependencies first to leverage Docker cache\nCOPY package.json package-lock.json ./\n \n# Using cache mount for npm install, so unchanged packages aren\u2019t downloaded every time\nRUN --mount=type=cache,target=/root/.npm \\\n    npm install\n \n# Copy the rest of your app\'s source code\nCOPY . .\n \n# Your app\'s start command\nCMD ["npm", "start"]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(96540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);