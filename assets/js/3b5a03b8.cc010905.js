"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[67727],{55501:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(74848),t=n(28453);const r={},c="Scheduling Policies",s={id:"software/containerization/k8s/Scheduling/Scheduling_Policies",title:"Scheduling Policies",description:"The default scheduler contains a number of predicates and priorities; however, these can be changed via a scheduler policy file.",source:"@site/docs/software/containerization/k8s/Scheduling/4._Scheduling_Policies.md",sourceDirName:"software/containerization/k8s/Scheduling",slug:"/software/containerization/k8s/Scheduling/Scheduling_Policies",permalink:"/docs/software/containerization/k8s/Scheduling/Scheduling_Policies",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Priorities",permalink:"/docs/software/containerization/k8s/Scheduling/Priorities"},next:{title:"Pod_Specification",permalink:"/docs/software/containerization/k8s/Scheduling/Pod_Specification"}},a={},d=[];function l(e){const i={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"scheduling-policies",children:"Scheduling Policies"})}),"\n",(0,o.jsxs)(i.p,{children:["The default scheduler contains a number of ",(0,o.jsx)(i.code,{children:"predicates"})," and ",(0,o.jsx)(i.code,{children:"priorities"}),"; however, these can be changed via a scheduler policy file."]}),"\n",(0,o.jsx)(i.p,{children:"A short version is shown below:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-yaml",children:'"kind" : "Policy",\n"apiVersion" : "v1",\n"predicates" : [\n        {"name" : "MatchNodeSelector", "order": 6},\n        {"name" : "PodFitsHostPorts", "order": 2},\n        {"name" : "PodFitsResources", "order": 3},\n        {"name" : "NoDiskConflict", "order": 4},\n        {"name" : "PodToleratesNodeTaints", "order": 5},\n        {"name" : "PodFitsHost", "order": 1}\n        ],\n"priorities" : [\n        {"name" : "LeastRequestedPriority", "weight" : 1},\n        {"name" : "BalancedResourceAllocation", "weight" : 1},       \n        {"name" : "ServiceSpreadingPriority", "weight" : 2},\n        {"name" : "EqualPriority", "weight" : 1}   \n        ],\n"hardPodAffinitySymmetricWeight" : 10\n'})}),"\n",(0,o.jsxs)(i.p,{children:["Typically, you will configure a scheduler with this policy using the ",(0,o.jsx)(i.code,{children:"--policy-config-file"})," parameter and define a name for this scheduler using the ",(0,o.jsx)(i.code,{children:"--scheduler-name"})," parameter. You will then have two schedulers running and will be able to specify which scheduler to use in the pod specification."]}),"\n",(0,o.jsxs)(i.p,{children:["With multiple schedulers, there could be conflict in the ",(0,o.jsx)(i.code,{children:"Pod"})," allocation. Each ",(0,o.jsx)(i.code,{children:"Pod"})," should declare which scheduler should be used. But, if separate schedulers determine that a node is eligible because of available resources and both attempt to deploy, causing the resource to no longer be available, a conflict would occur. The current solution is for the local ",(0,o.jsx)(i.code,{children:"kubelet"})," to return the ",(0,o.jsx)(i.code,{children:"Pod"}),"s to the scheduler for reassignment. Eventually, one ",(0,o.jsx)(i.code,{children:"Pod"})," will succeed and the other will be scheduled elsewhere."]}),"\n",(0,o.jsxs)(i.p,{children:["More information about ",(0,o.jsx)(i.a,{href:"https://kubernetes.io/docs/reference/scheduling/policies",children:"schdeduling policies"}),"."]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>s});var o=n(96540);const t={},r=o.createContext(t);function c(e){const i=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(r.Provider,{value:i},e.children)}}}]);