"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[26805],{83052:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=t(74848),a=t(28453);const l={slug:"pgsql-k8s",title:"Deploying PostgresSQL in Kubernetes",description:"Deploying a PostgresSQL database in a Kubernetes cluster",authors:["kgal-akl"],tags:["k8s","kubernetes","database","storage","postgres","web","webapplication","webdevelopment"]},r=void 0,i={permalink:"/blog/pgsql-k8s",source:"@site/blog/pgsql-k8s.md",title:"Deploying PostgresSQL in Kubernetes",description:"Deploying a PostgresSQL database in a Kubernetes cluster",date:"2025-02-18T17:33:17.000Z",tags:[{inline:!1,label:"K8s",permalink:"/blog/tags/k-8-s"},{inline:!1,label:"Kubernetes",permalink:"/blog/tags/kubernetes"},{inline:!1,label:"Database",permalink:"/blog/tags/database"},{inline:!1,label:"Storage",permalink:"/blog/tags/storage"},{inline:!1,label:"Postgres",permalink:"/blog/tags/postgres"},{inline:!1,label:"Web",permalink:"/blog/tags/web"},{inline:!1,label:"Webapplication",permalink:"/blog/tags/webapplication"},{inline:!1,label:"Webdevelopment",permalink:"/blog/tags/webdevelopment"}],readingTime:1,hasTruncateMarker:!0,authors:[{name:"Kobbi Gal (Akeyless)",title:"Senior Escalations Engineer at Akeyless",url:"https://github.com/kgal-akl",imageURL:"https://avatars.githubusercontent.com/u/195813801",key:"kgal-akl",page:null}],frontMatter:{slug:"pgsql-k8s",title:"Deploying PostgresSQL in Kubernetes",description:"Deploying a PostgresSQL database in a Kubernetes cluster",authors:["kgal-akl"],tags:["k8s","kubernetes","database","storage","postgres","web","webapplication","webdevelopment"]},unlisted:!1,prevItem:{title:"MacBook Pro 2020 High CPU caused by\xa0Siri",permalink:"/blog/macbook-pro-2020-high-cpu-caused-siri"},nextItem:{title:"Fixing Production Down caused by MongoDB Corruption and Heketi/GlusterFS Failed\xa0Provisioning",permalink:"/blog/prod-down-mongodb-corrupt-heketi-glusterfs-provisioning"}},o={authorsImageUrls:[void 0]},c=[{value:"Set Up Postgres",id:"set-up-postgres",level:2}];function p(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:"In this tutorial we deploy a PostgresSQL database in Kubernetes cluster."}),"\n",(0,n.jsx)(s.h2,{id:"set-up-postgres",children:"Set Up Postgres"}),"\n",(0,n.jsx)(s.p,{children:"We first create a new namespace to hold the database-related services."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"kubectl create namespace database\nkubectl config set-context --current --namespace database\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The first step is to create a ",(0,n.jsx)(s.code,{children:"PersistenceVolume"})," and ",(0,n.jsx)(s.code,{children:"PersistentVolumeClaim"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-yaml",metastring:"title",children:'apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: postgresql-pv\n  labels:\n    type: local\nspec:\n  storageClassName: manual\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: "/mnt/data"\n\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgresql-pv-claim\nspec:\n  storageClassName: manual\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n'})}),"\n",(0,n.jsx)(s.p,{children:"We add them to the namespace:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"kubectl apply -f pgsql-pv.yaml&&kubectl apply -f pgsql-pvc.yaml\n"})}),"\n",(0,n.jsxs)(s.p,{children:["We then install Postgres using the ",(0,n.jsx)(s.code,{children:"bitnami/postgresql"})," chart:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:"helm install psql-test bitnami/postgresql \\\n    --set persistence.existingClaim=postgresql-pv-claim \\\n    --set volumePermissions.enabled=true \\\n    --set primary.service.type=LoadBalancer\n"})}),"\n",(0,n.jsxs)(s.p,{children:["We can check that the database service is set up correctly by connecting to it using the ",(0,n.jsx)(s.code,{children:"psql"})," client:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-bash",children:'export POSTGRES_PASSWORD=$(kubectl get secret --namespace database psql-test-postgresql -o jsonpath="{.data.postgres-password}" | base64 -d)\n\necho $POSTGRES_PASSWORD\nPGDeiuKIDd\n\nkubectl run psql-test-postgresql-client-2 \\\n    --rm \\\n    --tty \\\n    -i \\\n    --restart=\'Never\' \\\n    --namespace database \\\n    --image docker.io/bitnami/postgresql:16.4.0-debian-12-r0 \\\n    --env="PGPASSWORD=$POSTGRES_PASSWORD" \\\n    --command \\ \n    -- psql --host psql-test-postgresql -U postgres -d postgres -p 5432\n'})})]})}function g(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>i});var n=t(96540);const a={},l=n.createContext(a);function r(e){const s=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(l.Provider,{value:s},e.children)}}}]);