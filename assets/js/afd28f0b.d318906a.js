"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[36944],{82089:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>n,metadata:()=>m,toc:()=>i});var o=t(74848),s=t(28453);const n={title:"Computer Memory"},a="Computer's Memory",m={id:"software/languages/assembly/memory/computer-memory",title:"Computer Memory",description:"A computer's memory is usually modeled as a flat list of cells, i.e. flat memory model. Every cell has an address and the contents of every cell could be written to or read from.",source:"@site/docs/software/languages/assembly/memory/computer-memory.md",sourceDirName:"software/languages/assembly/memory",slug:"/software/languages/assembly/memory/computer-memory",permalink:"/docs/software/languages/assembly/memory/computer-memory",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Computer Memory"},sidebar:"tutorialSidebar",previous:{title:"Branching/Control Flow",permalink:"/docs/software/languages/assembly/branching-control-flow"},next:{title:"Data Sections",permalink:"/docs/software/languages/assembly/memory/data-sections"}},l={},i=[{value:"RAM",id:"ram",level:2},{value:"Motherboard",id:"motherboard",level:2},{value:"Memory Abstraction",id:"memory-abstraction",level:2}];function c(e){const r={h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"computers-memory",children:"Computer's Memory"})}),"\n",(0,o.jsx)(r.p,{children:"A computer's memory is usually modeled as a flat list of cells, i.e. flat memory model. Every cell has an address and the contents of every cell could be written to or read from."}),"\n",(0,o.jsx)(r.p,{children:"There are different hardware implementations of computer memory:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"RAM, HD, USB, CD/DVD."}),"\n",(0,o.jsx)(r.li,{children:"The x86 processor has many instructions to communicate with the RAM."}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"ram",children:"RAM"}),"\n",(0,o.jsx)(r.p,{children:"Random means that every memory cell could be accessed directly (in any random order)"}),"\n",(0,o.jsx)(r.p,{children:"The processor communicates with the RAM. The processor and the RAM are connected together through electricity in the motherboard."}),"\n",(0,o.jsx)(r.p,{children:"The processor may send read/write requests to the RAM."}),"\n",(0,o.jsxs)(r.p,{children:["The electric lines which transfer the data are called ",(0,o.jsx)(r.strong,{children:"buses"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"motherboard",children:"Motherboard"}),"\n",(0,o.jsx)(r.p,{children:"On the motherboard, the CPU and the RAM are connected through the Northbridge:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/b/bd/Motherboard_diagram.svg/1280px-Motherboard_diagram.svg.png",alt:""})}),"\n",(0,o.jsx)(r.h2,{id:"memory-abstraction",children:"Memory Abstraction"}),"\n",(0,o.jsx)(r.p,{children:"The programmer doesn't have to worry about memory management."}),"\n",(0,o.jsx)(r.p,{children:"The program will run under the illusion of owning lots of flat memory. In reality, the program shares the total memory of the system with other programs."}),"\n",(0,o.jsxs)(r.p,{children:["The operating system and the processor work together using ",(0,o.jsx)(r.strong,{children:"Paging"})," and ",(0,o.jsx)(r.strong,{children:"Swapping"})," (using HD as memory) to create this illusion. The memory address your program sees are not real, they are ",(0,o.jsx)(r.strong,{children:"virtual"}),"."]})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>m});var o=t(96540);const s={},n=o.createContext(s);function a(e){const r=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function m(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(n.Provider,{value:r},e.children)}}}]);