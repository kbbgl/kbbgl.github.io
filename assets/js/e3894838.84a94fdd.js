"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[35331],{77428:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>x,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var i=s(74848),d=s(28453);const r={slug:"gdb-cheatsheet",title:"GDB Cheatsheet",tags:["gdb","debug","reverse_engineer","cheatsheet"],last_update:{date:"12/31/2022",author:"kbbgl"}},o="GDB Cheatsheet",t={id:"cybersecurity/Forensics/gdb/gdb_cheatsheet",title:"GDB Cheatsheet",description:"Show source code",source:"@site/docs/cybersecurity/Forensics/gdb/gdb_cheatsheet.md",sourceDirName:"cybersecurity/Forensics/gdb",slug:"/cybersecurity/Forensics/gdb/gdb-cheatsheet",permalink:"/docs/cybersecurity/Forensics/gdb/gdb-cheatsheet",draft:!1,unlisted:!1,tags:[{inline:!0,label:"gdb",permalink:"/docs/tags/gdb"},{inline:!0,label:"debug",permalink:"/docs/tags/debug"},{inline:!0,label:"reverse_engineer",permalink:"/docs/tags/reverse-engineer"},{inline:!0,label:"cheatsheet",permalink:"/docs/tags/cheatsheet"}],version:"current",frontMatter:{slug:"gdb-cheatsheet",title:"GDB Cheatsheet",tags:["gdb","debug","reverse_engineer","cheatsheet"],last_update:{date:"12/31/2022",author:"kbbgl"}},sidebar:"tutorialSidebar",previous:{title:"How SSL Works",permalink:"/docs/cybersecurity/Encryption/how-ssl-works"},next:{title:"Loading Coredump into GDB",permalink:"/docs/cybersecurity/Forensics/gdb/loading-coredump"}},a={},c=[{value:"Show source code",id:"show-source-code",level:3},{value:"Show Functions and their memory addresses",id:"show-functions-and-their-memory-addresses",level:3},{value:"Show Memory Address of Function",id:"show-memory-address-of-function",level:3},{value:"Dissassemble first line of function <code>win</code>",id:"dissassemble-first-line-of-function-win",level:3},{value:"Create Breakpoint",id:"create-breakpoint",level:3},{value:"Show and Delete Breakpoints",id:"show-and-delete-breakpoints",level:3},{value:"List sections and memory addresses",id:"list-sections-and-memory-addresses",level:3},{value:"Show Local Variables and Values",id:"show-local-variables-and-values",level:3},{value:"Run and continue program execution",id:"run-and-continue-program-execution",level:3},{value:"Execute one line of source code",id:"execute-one-line-of-source-code",level:3},{value:"Execute one line of Assembly code",id:"execute-one-line-of-assembly-code",level:3},{value:"Examine the 50 dwords in memory storing <code>array</code>",id:"examine-the-50-dwords-in-memory-storing-array",level:3},{value:"Show Address Sections",id:"show-address-sections",level:3},{value:"Examine 10 instructions 10 bytes before EIP",id:"examine-10-instructions-10-bytes-before-eip",level:3},{value:"Examine registers",id:"examine-registers",level:3},{value:"Logging to File",id:"logging-to-file",level:3},{value:"Showing Assembly Layout",id:"showing-assembly-layout",level:3}];function l(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"gdb-cheatsheet",children:"GDB Cheatsheet"})}),"\n",(0,i.jsx)(n.h3,{id:"show-source-code",children:"Show source code"}),"\n",(0,i.jsxs)(n.p,{children:["This option will show the source code when we compile using the ",(0,i.jsx)(n.code,{children:"-g"})," flag."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) list [function_name]\n(gdb) list [start_line,end_line]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'(gdb) list main\n1       #include <stdio.h>\n2       #include <string.h>\n3\n4       void return_input (void)\n5       { \n6          char array[30]; \n7\n8          gets (array); \n9          printf("%s\\n", array); \n10      }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"show-functions-and-their-memory-addresses",children:"Show Functions and their memory addresses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) info functions \nAll defined functions:\n\nNon-debugging symbols:\n0x00000000004003a8  _init\n0x00000000004003e0  __libc_start_main@plt\n0x00000000004003f0  __gmon_start__@plt\n0x0000000000400400  _start\n0x0000000000400430  deregister_tm_clones\n0x0000000000400460  register_tm_clones\n0x00000000004004a0  __do_global_dtors_aux\n0x00000000004004c0  frame_dummy\n0x00000000004004f0  fce\n0x00000000004004fb  main\n0x0000000000400510  __libc_csu_init\n0x0000000000400580  __libc_csu_fini\n0x0000000000400584  _fini\n"})}),"\n",(0,i.jsx)(n.h3,{id:"show-memory-address-of-function",children:"Show Memory Address of Function"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'info address readflag\nSymbol "readflag" is a function at address 0x555555555289.\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"dissassemble-first-line-of-function-win",children:["Dissassemble first line of function ",(0,i.jsx)(n.code,{children:"win"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) disas /s win,+1\nDump of assembler code from 0x401de9 to 0x401dea:\npwd.c:\n13      void win() {\n   0x0000000000401de9 <win+0>:  endbr64\n"})}),"\n",(0,i.jsx)(n.p,{children:"This option also allows us to see the Assembly instructions per line of source code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'(gdb) disas /s copier +1\nDump of assembler code for function copier:\ncopier.c:\n16      int copier(char *str) {\n   0x08049dc0 <+0>:     endbr32 \n   0x08049dc4 <+4>:     push   %ebp\n   0x08049dc5 <+5>:     mov    %esp,%ebp\n   0x08049dc7 <+7>:     push   %ebx\n   0x08049dc8 <+8>:     sub    $0x3e8,%esp\n   0x08049dce <+14>:    call   0x8049df3 <__x86.get_pc_thunk.ax>\n   0x08049dd3 <+19>:    add    $0x9b22d,%eax\n\n17              char buffer[1000];\n18              register int i asm("esp");\n19              strcpy(buffer, str);\n   0x08049dd8 <+24>:    pushl  0x8(%ebp)\n   0x08049ddb <+27>:    lea    -0x3ec(%ebp),%edx\n   0x08049de1 <+33>:    push   %edx\n   0x08049de2 <+34>:    mov    %eax,%ebx\n   0x08049de4 <+36>:    call   0x8049030\n   0x08049de9 <+41>:    add    $0x8,%esp\n\n20              return i;\n   0x08049dec <+44>:    mov    %esp,%eax\n\n21      }\n   0x08049dee <+46>:    mov    -0x4(%ebp),%ebx\n   0x08049df1 <+49>:    leave  \n   0x08049df2 <+50>:    ret\n'})}),"\n",(0,i.jsx)(n.p,{children:"We can also disassemble by range of memory addresses:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'(gdb) info line main\nLine 3 of "main.c" starts at address 0x401050 <main> and ends at 0x401075 <main+\n(gdb) disas 0x401050 0x401075\nDump of assembler code from 0x401050 to 0x401075:\n0x00401050 <main+0>:    push   %ebp\n0x00401051 <main+1>:    mov    %esp,%ebp\n0x00401053 <main+3>:    sub    $0x18,%esp\n0x00401056 <main+6>:    and    $0xfffffff0,%esp\n0x00401059 <main+9>:    mov    $0x0,%eax\n0x0040105e <main+14>:   add    $0xf,%eax\n0x00401061 <main+17>:   add    $0xf,%eax\n0x00401064 <main+20>:   shr    $0x4,%eax\n0x00401067 <main+23>:   shl    $0x4,%eax\n0x0040106a <main+26>:   mov    %eax,-0xc(%ebp)\n0x0040106d <main+29>:   mov    -0xc(%ebp),%eax\n0x00401070 <main+32>:   call   0x4010c4 <_alloca>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"create-breakpoint",children:"Create Breakpoint"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) b 10\n\n(gdb) disas return_input\n...\n   0x080491d0 <+26>:    call   0x8049070 <gets@plt>\n...\n\n# This will put a breakpoint at 99 bytes of `main` function\n(gdb) break *(main+99)\n(gdb) run\n(gdb) jump *(main+104)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"show-and-delete-breakpoints",children:"Show and Delete Breakpoints"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) info break\nNum     Type           Disp Enb Address    What\n1       breakpoint     keep y   0x080491e9 in return_input \n                                           at wh/stack_overflows/overflow.c:10\n        breakpoint already hit 1 time\n2       breakpoint     keep y   0x080491d0 in return_input \n                                           at wh/stack_overflows/overflow.c:8\n        breakpoint already hit 1 time\n3       breakpoint     keep y   0x080491e9 in return_input \n                                           at wh/stack_overflows/overflow.c:10\n        breakpoint already hit 1 time\n\n(gdb) del 1\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"list-sections-and-memory-addresses",children:"List sections and memory addresses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) info files\n\n.bss\n.data\n.text\n"})}),"\n",(0,i.jsx)(n.h3,{id:"show-local-variables-and-values",children:"Show Local Variables and Values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) list\n31\n32      enum HttpMethod {\n33          GET,\n34          POST,\n35          PUT,\n36          PATCH,\n37          DELETE,\n38          OPTIONS \n39      }\n40\n\n(gdb) info locals\nput = server::Method::PUT\npost = server::Method::POST\n\n(gdb) p/d put\n$1 = 2\n\n(gdb) p/d post\n$2 = 1\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"run-and-continue-program-execution",children:"Run and continue program execution"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) r\n\n# Run with arguments and input from file\n(gdb) run --args < file_input\n\n(gdb) c\n"})}),"\n",(0,i.jsx)(n.h3,{id:"execute-one-line-of-source-code",children:"Execute one line of source code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) step\n"})}),"\n",(0,i.jsx)(n.h3,{id:"execute-one-line-of-assembly-code",children:"Execute one line of Assembly code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) stepi\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"examine-the-50-dwords-in-memory-storing-array",children:["Examine the 50 dwords in memory storing ",(0,i.jsx)(n.code,{children:"array"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) x/50x $array\n"})}),"\n",(0,i.jsx)(n.h3,{id:"show-address-sections",children:"Show Address Sections"}),"\n",(0,i.jsx)(n.p,{children:"We can use this command to output a table of address ranges"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) info proc mappings\nprocess 62432\nMapped address spaces:\n\n        Start Addr   End Addr       Size     Offset objfile\n         0x8048000  0x8049000     0x1000        0x0 /tmp/pwd\n         0x8049000  0x80b4000    0x6b000     0x1000 /tmp/pwd\n         0x80b4000  0x80e3000    0x2f000    0x6c000 /tmp/pwd\n         0x80e3000  0x80e5000     0x2000    0x9a000 /tmp/pwd\n         0x80e5000  0x80e7000     0x2000    0x9c000 /tmp/pwd\n         0x80e7000  0x8109000    0x22000        0x0 [heap]\n        0xf7ff8000 0xf7ffc000     0x4000        0x0 [vvar]\n        0xf7ffc000 0xf7ffe000     0x2000        0x0 [vdso]\n        0xfffdd000 0xffffe000    0x21000        0x0 [stack]\n"})}),"\n",(0,i.jsx)(n.p,{children:"We can see the stack in the end."}),"\n",(0,i.jsx)(n.h3,{id:"examine-10-instructions-10-bytes-before-eip",children:"Examine 10 instructions 10 bytes before EIP"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) x/10i $eip-10\n"})}),"\n",(0,i.jsx)(n.h3,{id:"examine-registers",children:"Examine registers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) info registers\n\neax            0xffffcbce          -13362\necx            0x875a803d          -2024112067\nedx            0xffffcc24          -13276\n...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"logging-to-file",children:"Logging to File"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"#enable logging:\n\n(gdb) set logging on\n\n# Now GDB will log to ./gdb.txt. You can tell it which file to use:\n\n(gdb) set logging file my_god_object.log\n\n# And you can examine the current logging configuration:\n\n(gdb) show logging\n"})}),"\n",(0,i.jsx)(n.h3,{id:"showing-assembly-layout",children:"Showing Assembly Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(gdb) layout asm\n(gdb) break *(main+99)\n(gdb) run\n(gdb) jump *(main+104)\n"})})]})}function x(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(96540);const d={},r=i.createContext(d);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);