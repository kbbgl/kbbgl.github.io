"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[44581],{70012:e=>{e.exports=JSON.parse('{"tag":{"label":"concurrency","permalink":"/docs/tags/concurrency","allTagsPath":"/docs/tags","count":3,"items":[{"id":"software/languages/go/concurrency/dealing_with_threads","title":"Dealing with Threads","description":"The OS gives us various tools to help manage concurrency. Two of them, processes and threads are used in our code. A process represents a program that is running on the system. A thread is a construct that executes within the process context to give a lightweight and  efficient approach to concurrency. A process is started with one, main thread. Processes do not share memory and therefore minimize communication with other processes.","permalink":"/docs/software/languages/go/concurrency/dealing-with-threads"},{"id":"software/languages/go/concurrency/foundations","title":"Foundations","description":"Fill me up!","permalink":"/docs/software/languages/go/concurrency/foundations"},{"id":"software/languages/go/concurrency/thread_communication","title":"Thread Communication","description":"Threads working together require some form of communication.","permalink":"/docs/software/languages/go/concurrency/thread-communication"}],"unlisted":false}}')}}]);