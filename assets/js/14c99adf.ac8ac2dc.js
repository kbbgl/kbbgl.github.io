"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[91056],{17662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=n(74848),c=n(28453);const r={slug:"cpu-instruction-cycle",title:"CPU Instruction Cycle",tags:["hardware","cpu","resources"],last_update:{date:"12/31/2022",author:"kgal-pan"}},o=void 0,i={id:"hardware/cpu/instruction_cycle",title:"CPU Instruction Cycle",description:"From when the computer is boot-up until shutdown, it follows the cycle to process instructions.",source:"@site/docs/hardware/cpu/instruction_cycle.md",sourceDirName:"hardware/cpu",slug:"/hardware/cpu/cpu-instruction-cycle",permalink:"/docs/hardware/cpu/cpu-instruction-cycle",draft:!1,unlisted:!1,tags:[{inline:!0,label:"hardware",permalink:"/docs/tags/hardware"},{inline:!0,label:"cpu",permalink:"/docs/tags/cpu"},{inline:!0,label:"resources",permalink:"/docs/tags/resources"}],version:"current",frontMatter:{slug:"cpu-instruction-cycle",title:"CPU Instruction Cycle",tags:["hardware","cpu","resources"],last_update:{date:"12/31/2022",author:"kgal-pan"}},sidebar:"docsSidebar",previous:{title:"Computing Abstraction Layers",permalink:"/docs/hardware/cpu/computing-abstraction-layers"},next:{title:"Instruction Set Architecture (ISA)",permalink:"/docs/hardware/cpu/instruction-set-arch"}},d={},l=[{value:"Components",id:"components",level:2},{value:"Fetch",id:"fetch",level:3},{value:"Decode",id:"decode",level:3},{value:"Execute",id:"execute",level:3}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"From when the computer is boot-up until shutdown, it follows the cycle to process instructions."}),"\n",(0,s.jsx)(t.h2,{id:"components",children:"Components"}),"\n",(0,s.jsxs)(t.p,{children:["The program counter (",(0,s.jsx)(t.code,{children:"PC"}),") is the register that holds the memory address of the next instruction to be executed."]}),"\n",(0,s.jsxs)(t.p,{children:["The memory address register (",(0,s.jsx)(t.code,{children:"MAR"}),") holds the address of the instruction to be executed."]}),"\n",(0,s.jsxs)(t.p,{children:["The memory data register (",(0,s.jsx)(t.code,{children:"MDR"}),") acts as a two-way register that holds data fetched from memory or data waiting to be stored in memory (can also be known as ",(0,s.jsx)(t.code,{children:"MBR"}),")."]}),"\n",(0,s.jsxs)(t.p,{children:["The current instruction register (",(0,s.jsx)(t.code,{children:"CIR"}),") acts as a temporary storage for the instruction fetched from memory."]}),"\n",(0,s.jsxs)(t.p,{children:["The control unit (",(0,s.jsx)(t.code,{children:"CU"}),") decodes the instruction in the CIR and sends signals to the arithmetic logic unit (",(0,s.jsx)(t.code,{children:"ALU"}),") and the floating point unit (",(0,s.jsx)(t.code,{children:"FPU"}),")"]}),"\n",(0,s.jsx)(t.h3,{id:"fetch",children:"Fetch"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The address of the ",(0,s.jsx)(t.code,{children:"PC"})," is copied into the ",(0,s.jsx)(t.code,{children:"MAR"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"PC"})," is incremented to point to the next instruction."]}),"\n",(0,s.jsxs)(t.li,{children:["The instruction in address at ",(0,s.jsx)(t.code,{children:"MAR"})," is copied to the ",(0,s.jsx)(t.code,{children:"MDR"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The instruction in ",(0,s.jsx)(t.code,{children:"MDR"})," is copied to the ",(0,s.jsx)(t.code,{children:"CIR"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"decode",children:"Decode"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The encoded instruction held in the ",(0,s.jsx)(t.code,{children:"CIR"})," is decoded."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"execute",children:"Execute"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"CU"})," of the CPU passes the decoded information as signals to the CPU (",(0,s.jsx)(t.code,{children:"FPU"})," or ",(0,s.jsx)(t.code,{children:"ALU"}),") to perform the instructions and storing the result back into memory, register or an output device."]}),"\n",(0,s.jsx)(t.li,{children:"Example operations: Add, Subtract, AND, OR, Branches of execution, XOR."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://youtu.be/vgPFzblBh7w",children:"https://youtu.be/vgPFzblBh7w"}),"\n",(0,s.jsx)(t.a,{href:"https://youtu.be/o_WXTRS2qTY",children:"https://youtu.be/o_WXTRS2qTY"})]})]})}function a(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(96540);const c={},r=s.createContext(c);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);