"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[33317],{31418:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(74848),c=n(28453);const s={},o="Folder Structure",r={id:"software/version_control_systems/git/folder-structure",title:"Folder Structure",description:"Git includes the following files and folders:",source:"@site/docs/software/version_control_systems/git/folder-structure.md",sourceDirName:"software/version_control_systems/git",slug:"/software/version_control_systems/git/folder-structure",permalink:"/docs/software/version_control_systems/git/folder-structure",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Basic git Operations",permalink:"/docs/software/version_control_systems/git/file-lifecycle"},next:{title:"Add Hooks",permalink:"/docs/software/version_control_systems/git/hooks"}},a={},l=[{value:"<code>config</code> - file that includes configuration of the <code>git</code> repo, has info such as",id:"config---file-that-includes-configuration-of-the-git-repo-has-info-such-as",level:2},{value:"<code>HEAD</code> - file includes the reference to the head",id:"head---file-includes-the-reference-to-the-head",level:2},{value:"What is a Commit",id:"what-is-a-commit",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"folder-structure",children:"Folder Structure"})}),"\n",(0,i.jsx)(t.p,{children:"Git includes the following files and folders:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"tree -L 1 .git\n.git\n\u251c\u2500\u2500 COMMIT_EDITMSG\n\u251c\u2500\u2500 FETCH_HEAD\n\u251c\u2500\u2500 HEAD\n\u251c\u2500\u2500 ORIG_HEAD\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 description\n\u251c\u2500\u2500 hooks\n\u251c\u2500\u2500 index\n\u251c\u2500\u2500 info\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 objects\n\u251c\u2500\u2500 packed-refs\n\u2514\u2500\u2500 refs\n\n5 directories, 8 files\n"})}),"\n",(0,i.jsxs)(t.h2,{id:"config---file-that-includes-configuration-of-the-git-repo-has-info-such-as",children:[(0,i.jsx)(t.code,{children:"config"})," - file that includes configuration of the ",(0,i.jsx)(t.code,{children:"git"})," repo, has info such as"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"core"})," - default configs"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"remote"})," - configured remotes"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"branch"}),"- the different branches"]}),"\n"]}),"\n",(0,i.jsxs)(t.h2,{id:"head---file-includes-the-reference-to-the-head",children:[(0,i.jsx)(t.code,{children:"HEAD"})," - file includes the reference to the head"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cat .git/HEAD\nref: refs/heads/master\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.h1,{id:"git-objectsnngit-has-its-own-file-system-and-objects",children:[(0,i.jsx)(t.code,{children:"git"})," Objects\\n\\nGit has its own file system and objects"]}),"\n",(0,i.jsx)(t.p,{children:"The type of objects:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Blob"}),": represents a file of any type."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Tree"}),": directories, can contain blobs or other trees."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Commit"}),": Store versions of the project."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Annotated Tag"}),": persistent text pointer to specific Commit.."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"commit -> tree -> N blobs/trees\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Low-level commands to interact with ",(0,i.jsx)(t.code,{children:"git"})," objects:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# Step 1) Create a blob and tree inside repo\n# create a git object\n# git uses SHA1 hash function\ngit hash-object\n\n\n\n# creates a file in `.git/objects/b7/aec520dec0a7516c18eb4c68b64ae1eb9b5a5e`\necho "Hello, Git" | git hash-object --stdin -w\\nb7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e\n\n\n# creates a git object based on file \ngit hash-object /path/to/file -w\n\n\n# read a git object\ngit cat-file\n\n# contents of the object\ngit cat-file -p $HASH\ngit cat-file -p b7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e\\nHello, Git\n\n\n# size of object\ngit cat-file -s b7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e\n11\n\n# type of object\ngit cat-file -t b7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e\nblob\n\n\n# Git Objects store the size, type and content within it\n# and have the following structure:\n$TYPE $SIZE\\\\0$CONTENT\n\necho "blob 11\\\\0Hello, Git" | shasum\nb7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e\n\n\n# create a tree\necho "Hello, Git" | git hash-object --stdin -w\nb7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e\necho \'Hello, Git!\' | git hash-object --stdin -w\n670a245535fe6316eb2316c1103b1a88bb519334\n\n# trees contain the file permissions, the type of pointer to the child blob/tree, the hash of the blob/tree and the filename with extension\n\ncat temp-tree.txt\n100644 blob b7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e    file1.txt\n100644 blob 670a245535fe6316eb2316c1103b1a88bb519334    file2.txt\n\ncat temp-tree.txt | git mkdir\n9d2ce41b82297aad442e3187d87ce6ee9232f657\n\n# Step 2) Move tree to staging\ngit read-tree $HASH_TREE\ngit read-tree 9d2c[41b82297aad442e3187d87ce6ee9232f657]\n\n# list all files in staging area\ngit ls-files -s\n100644 b7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e 0       file1.txt\n100644 670a245535fe6316eb2316c1103b1a88bb519334 0       file2.txt\n\n# Step 2) Move tree to working directory\ngit checkout-index -a\n\n'})}),"\n",(0,i.jsx)(t.h2,{id:"what-is-a-commit",children:"What is a Commit"}),"\n",(0,i.jsxs)(t.p,{children:["It's a ",(0,i.jsx)(t.code,{children:"git"})," object type (1 of 4)."]}),"\n",(0,i.jsxs)(t.p,{children:["It has the same structure as other ",(0,i.jsx)(t.code,{children:"git"})," objects:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Content + Object Type + Object Length = Hash\n"})}),"\n",(0,i.jsx)(t.p,{children:"Every commit has the following information in its contents:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Author name and email"}),"\n",(0,i.jsx)(t.li,{children:"Commit description"}),"\n",(0,i.jsx)(t.li,{children:"Parent (optional)"}),"\n",(0,i.jsxs)(t.li,{children:["Pointer hash to ",(0,i.jsx)(t.code,{children:"tree"})]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"commit"})," object is a wrapper to the ",(0,i.jsx)(t.code,{children:"tree"})," object that has a pointer (hash) of the ",(0,i.jsx)(t.code,{children:"tree"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"When committing changes that are in the staging area, we will see that hash of the commit:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'# list files in staging\ngit ls-files -s\n100644 b7aec520dec0a7516c18eb4c68b64ae1eb9b5a5e 0       file1.txt\n100644 670a245535fe6316eb2316c1103b1a88bb519334 0       file2.txt\n\n\n# cc83ae1 is the hash of this commit\ngit commit -m "very first commit"\n[master (root-commit) cc83ae1] first commit\n2 files changed, 2 insertions(+)\ncreate mode 100644 file1.txt\ncreate mode 100644 file2.txt\n'})}),"\n",(0,i.jsx)(t.p,{children:"We can see the contents of the commit:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git cat-file -p cc83\n\n# the hash that points back to the tree being wrapped by commit\ntree 9d2ce41b82297aad442e3187d87ce6ee9232f657\nauthor $NAME $EMAIL 1633710080 +0300\ncommitter $NAME $EMAIL 1633710080 +0300\n\nvery first commit\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If there is another commit based on the first one (",(0,i.jsx)(t.code,{children:"cc83ae1"}),"), it will be seen in ",(0,i.jsx)(t.code,{children:"parent"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git --no-pager log\ncommit 4e7b9a4b17d4748f79e033264f89abb537e3047d (HEAD -> master)\nAuthor: Me <email>\nDate:   Sat Oct 9 01:06:08 2021 +0300\nsecond commit\ncommit cc83ae14f363a62b08df4afb719bf87fc57ddd95\nAuthor: Me <email>\nDate:   Fri Oct 8 19:21:20 2021 +0300\n\nfirst commit\n\n\ngit cat-file -p 4e7b9a\ntree a9d0efa22cfef4b6b6805e35c9f4ef61d71f9d19\nparent cc83ae14f363a62b08df4afb719bf87fc57ddd95\nauthor Me <email> 1633730768 +0300\ncommitter Me <email> 1633730768 +0300\n\nsecond commit\n"})})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(96540);const c={},s=i.createContext(c);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);