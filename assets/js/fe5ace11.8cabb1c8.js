"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[88124],{84357:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>x,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=d(74848),i=d(28453);const o={title:"Signed Operations"},c="Signed Operations",r={id:"software/languages/assembly/signed-operations",title:"Signed Operations",description:"NEG Instruction",source:"@site/docs/software/languages/assembly/signed-operations.md",sourceDirName:"software/languages/assembly",slug:"/software/languages/assembly/signed-operations",permalink:"/docs/software/languages/assembly/signed-operations",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Signed Operations"},sidebar:"docsSidebar",previous:{title:"Set syntax highlighting in vim",permalink:"/docs/software/languages/assembly/set-syntax-highlighting-in-vim"},next:{title:"objdump",permalink:"/docs/software/languages/assembly/util/objdump"}},t={},l=[{value:"<code>NEG</code> Instruction",id:"neg-instruction",level:2},{value:"<code>MOVSX</code> and <code>MOVZX</code>",id:"movsx-and-movzx",level:2},{value:"<code>CBW</code> and <code>CWDE</code>",id:"cbw-and-cwde",level:2},{value:"<code>IMUL</code> and <code>IDIV</code>",id:"imul-and-idiv",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"signed-operations",children:"Signed Operations"})}),"\n",(0,s.jsxs)(n.h2,{id:"neg-instruction",children:[(0,s.jsx)(n.code,{children:"NEG"})," Instruction"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"NEG"})," negates the sign of the number using two's compliment. It flips all the bits (0 becomes 1, 1 becomes 0) and add 1."]}),"\n",(0,s.jsx)(n.p,{children:"Example in 8 bits"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov al,3d\nneg al\n\n; 3 in binary is [ 0 0 0 0 | 0 0 1 1]\n; neg 3 ==       [ 1 1 1 1 | 1 1 0 0] == 0xfd\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"movsx-and-movzx",children:[(0,s.jsx)(n.code,{children:"MOVSX"})," and ",(0,s.jsx)(n.code,{children:"MOVZX"})]}),"\n",(0,s.jsx)(n.p,{children:"In some cases we want to extend an 8-bit to a 16-bit number."}),"\n",(0,s.jsxs)(n.p,{children:["When we want to extend a positive number, we add leading ",(0,s.jsx)(n.code,{children:"0"}),"s.\nSo ",(0,s.jsx)(n.code,{children:"3"}),"  == ",(0,s.jsx)(n.code,{children:"[ 0 0 0 0 0 0 1 1]"})," becomes ",(0,s.jsx)(n.code,{children:"[ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 ]"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["When we want to extend a negative number, we add leading ",(0,s.jsx)(n.code,{children:"1"}),"s.\nSo ",(0,s.jsx)(n.code,{children:"-3"})," == ",(0,s.jsx)(n.code,{children:"[ 1 1 1 1 1 1 0 1]"})," becomes ",(0,s.jsx)(n.code,{children:"[ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1]"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Because this is cumbersome, we have ",(0,s.jsx)(n.code,{children:"MOVSX"})," and ",(0,s.jsx)(n.code,{children:"MOVZX"})," which extend while moving."]}),"\n",(0,s.jsxs)(n.p,{children:["To extend unsigned numbers, use ",(0,s.jsx)(n.code,{children:"MOVZX"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"movzx eax,bl ; extends bl using leading zeroes and stores the result into eax.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To extend signed numbers, use ",(0,s.jsx)(n.code,{children:"MOVSX"}),". If the leading bit is ",(0,s.jsx)(n.code,{children:"1"}),", ",(0,s.jsx)(n.code,{children:"MOVSX"})," extends using leading zeroes. If the leading bit is ",(0,s.jsx)(n.code,{children:"0"}),", ",(0,s.jsx)(n.code,{children:"MOVSX"})," extends using leading ",(0,s.jsx)(n.code,{children:"1"}),"s."]}),"\n",(0,s.jsxs)(n.h2,{id:"cbw-and-cwde",children:[(0,s.jsx)(n.code,{children:"CBW"})," and ",(0,s.jsx)(n.code,{children:"CWDE"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CBW"})," - convert byte to word (word is 2-bytes). It is used to sign-extend ",(0,s.jsx)(n.code,{children:"al"})," to ",(0,s.jsx)(n.code,{children:"ax"}),".\n",(0,s.jsx)(n.code,{children:"CWDE"})," - convert word to double word. It is used to sign-extend ",(0,s.jsx)(n.code,{children:"ax"})," to ",(0,s.jsx)(n.code,{children:"eax"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov al,10001010b\ncbw\n; ax == 1111111110001010\n\ncwde\n; eax == 11111111111111111111111110001010\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There are also ",(0,s.jsx)(n.code,{children:"CWD"})," and ",(0,s.jsx)(n.code,{children:"CDQ"})," specifically for the ",(0,s.jsx)(n.code,{children:"edx"})," register."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CWD"})," - convert word to double-word. It is used to sign-extend ",(0,s.jsx)(n.code,{children:"ax"})," to ",(0,s.jsx)(n.code,{children:"dx:ax"}),".\n",(0,s.jsx)(n.code,{children:"CDQ"})," - convert double-word to quadword (32-bit to 64-bit). It is used to sign-extend ",(0,s.jsx)(n.code,{children:"eax"})," to ",(0,s.jsx)(n.code,{children:"edx:eax"}),"."]}),"\n",(0,s.jsxs)(n.h2,{id:"imul-and-idiv",children:[(0,s.jsx)(n.code,{children:"IMUL"})," and ",(0,s.jsx)(n.code,{children:"IDIV"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"IMUL"})," and ",(0,s.jsx)(n.code,{children:"IDIV"})," are sign-aware multiplication and division instructions."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CDQ"})," and ",(0,s.jsx)(n.code,{children:"IDIV"})," are usually used together:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"; program to divide eax by 3\n\nmov  esi,3\ncdq\nidiv esi \n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,d)=>{d.d(n,{R:()=>c,x:()=>r});var s=d(96540);const i={},o=s.createContext(i);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);