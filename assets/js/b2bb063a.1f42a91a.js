"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[93057],{74252:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var r=n(74848),i=n(28453);const o={},s=void 0,c={id:"software/containerization/k8s/Services/Overview",title:"Overview",description:"Overview",source:"@site/docs/software/containerization/k8s/Services/1._Overview.md",sourceDirName:"software/containerization/k8s/Services",slug:"/software/containerization/k8s/Services/Overview",permalink:"/docs/software/containerization/k8s/Services/Overview",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Network_Security_Policies",permalink:"/docs/software/containerization/k8s/Security/Network_Security_Policies"},next:{title:"Accessing_Application_with_Service",permalink:"/docs/software/containerization/k8s/Services/Accessing_Application_with_Service"}},a={},d=[{value:"Overview",id:"overview",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Service"}),"s are agents which connect ",(0,r.jsx)(t.code,{children:"Pod"}),"s together or provide access outside of the cluster. The ",(0,r.jsx)(t.code,{children:"Pod"})," serves the expected resource using an ",(0,r.jsx)(t.code,{children:"Endpoint"})," object."]}),"\n",(0,r.jsxs)(t.p,{children:["Each ",(0,r.jsx)(t.code,{children:"Service"})," can be exposed internally or externally to the cluster. A ",(0,r.jsx)(t.code,{children:"Service"})," can also connect internal resources to external resources."]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"kube-proxy"})," agent watches the Kubernetes API for new services and endpoints being created on each node. It opens random ports and listens for traffic to the ",(0,r.jsx)(t.code,{children:"ClusterIP:Port"}),", and redirects the traffic to the randomly generated service endpoints."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Service"}),"s provide automatic load-balancing, matching a label query. While there is no configuration of this option, there is the possibility of session affinity via IP. Also, a headless service, one without a fixed IP nor load-balancing, can be configured. Labels are used to determine which Pods should receive traffic from a service (",(0,r.jsx)(t.strong,{children:"Service Update Pattern"}),")."]}),"\n",(0,r.jsxs)(t.p,{children:["Unique IP addresses are assigned and configured via the ",(0,r.jsx)(t.code,{children:"etcd"})," database, so that ",(0,r.jsx)(t.code,{children:"Service"}),"s implement ",(0,r.jsx)(t.code,{children:"iptables"})," to route traffic, but could leverage other technologies to provide access to resources in the future."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(96540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);