"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[235],{77925:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>x,frontMatter:()=>r,metadata:()=>i,toc:()=>o});var d=s(74848),a=s(28453);const r={title:"Load Effective Address (LEA)"},t="Load Effective Address LEA",i={id:"software/languages/assembly/memory/load-effective-address",title:"Load Effective Address (LEA)",description:"Syntax:",source:"@site/docs/software/languages/assembly/memory/load-effective-address.md",sourceDirName:"software/languages/assembly/memory",slug:"/software/languages/assembly/memory/load-effective-address",permalink:"/docs/software/languages/assembly/memory/load-effective-address",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Load Effective Address (LEA)"},sidebar:"tutorialSidebar",previous:{title:"Defining Memory",permalink:"/docs/software/languages/assembly/memory/defining-memory"},next:{title:"Memory Ideas",permalink:"/docs/software/languages/assembly/memory/memory-ideas"}},l={},o=[{value:"Examples",id:"examples",level:2},{value:"Calculate Addresses",id:"calculate-addresses",level:3},{value:"Adding Numbers from 0 to 100 using <code>lea</code> and <code>test</code>",id:"adding-numbers-from-0-to-100-using-lea-and-test",level:3},{value:"Combining Instructions",id:"combining-instructions",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsxs)(n.h1,{id:"load-effective-address-lea",children:["Load Effective Address ",(0,d.jsx)(n.code,{children:"LEA"})]})}),"\n",(0,d.jsx)(n.p,{children:"Syntax:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"l dest, [expr]\n"})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"lea"})," calculates ",(0,d.jsx)(n.code,{children:"expr"})," and stores the result inside ",(0,d.jsx)(n.code,{children:"dest"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"It doesn't actually access any memory"}),". It only calculates the resulting address."]}),"\n",(0,d.jsx)(n.li,{children:"Can be used to calculate addresses."}),"\n",(0,d.jsx)(n.li,{children:"Doesn't change the flags register."}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"dest"})," has to be a register."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"; will add 1 to eax and store the result in eax\nlea  eax, [eax+1]\n\nlea esi, [eax + 2 * edx]\n\n; di is 16 bits (2 bytes), we might need to\n; wrap around if expression so (eax + 2 * edx + 5) is larger than 2 bytes \n; ==> (eax + 2 * edx + 5) % 2^16\nlea di, [eax + 2 * edx + 5]\n"})}),"\n",(0,d.jsx)(n.h3,{id:"calculate-addresses",children:"Calculate Addresses"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"section '.data' data readable writeable\n nums      dd 100h dup (12345678h)\n snums     dw 100h dup (0ababh)\n \nsection '.text' code readable executable\nstart:\n mov       esi,nums\n mov       edi,snums\n call      read_eax\n \n ; Get address of dword number eax\n lea       edx, [esi + 4*eax]\n \n ; Get dword number eax\n mov       edx, [esi + 4*eax]\n \n ; Get address of word number eax\n lea       ebx, [edi + 2*eax]\n \n ; Get word number eax\n mov       ebx, [esi + 2*eax]\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"adding-numbers-from-0-to-100-using-lea-and-test",children:["Adding Numbers from 0 to 100 using ",(0,d.jsx)(n.code,{children:"lea"})," and ",(0,d.jsx)(n.code,{children:"test"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:" mov       ecx, 100\n xor       ecx, ecx\n \nadd_num\n add       edx, edx\n lea       ecx, [ecx - 1]\n test      ecx, ecx\n jnz       add_num\n"})}),"\n",(0,d.jsx)(n.h3,{id:"combining-instructions",children:"Combining Instructions"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"mov      esi, ecx\nshl      edx, 2\nadd      esi, edx\nadd      esi, 5\n"})}),"\n",(0,d.jsx)(n.p,{children:"Can be converted to:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"lea      esi, [ecx + edx * 4 + 5)\n"})})]})}function x(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var d=s(96540);const a={},r=d.createContext(a);function t(e){const n=d.useContext(r);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),d.createElement(r.Provider,{value:n},e.children)}}}]);