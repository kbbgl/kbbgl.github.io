"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[79722],{49562:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(74848),o=t(28453);const s={},r=void 0,i={id:"software/containerization/k8s/Volumes and Data/Spec",title:"Spec",description:"Volume Spec",source:"@site/docs/software/containerization/k8s/Volumes and Data/Spec.md",sourceDirName:"software/containerization/k8s/Volumes and Data",slug:"/software/containerization/k8s/Volumes and Data/Spec",permalink:"/docs/software/containerization/k8s/Volumes and Data/Spec",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Secrets_and_EnvVars",permalink:"/docs/software/containerization/k8s/Volumes and Data/Secrets_and_EnvVars"},next:{title:"Volume_Introduction",permalink:"/docs/software/containerization/k8s/Volumes and Data/Volume_Introduction"}},c={},l=[{value:"Volume Spec",id:"volume-spec",level:2},{value:"Shared Volume Example",id:"shared-volume-example",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"volume-spec",children:"Volume Spec"}),"\n",(0,a.jsxs)(n.p,{children:["One of the may types of storage available is an ",(0,a.jsx)(n.code,{children:"emptyDir"}),". The ",(0,a.jsx)(n.code,{children:"kubelet"})," will create the directory in the container but not mount any storage. Any data created is written to the shared container space so it will not be persistent. When the ",(0,a.jsx)(n.code,{children:"Pod"})," is deleted, the directory is deleted along with the container."]}),"\n",(0,a.jsxs)(n.p,{children:["Creating a ",(0,a.jsx)(n.code,{children:"Pod"})," with the following specification would create a container with a volume named ",(0,a.jsx)(n.code,{children:"scratch-volume"})," with a directory ",(0,a.jsx)(n.code,{children:"/scratch"})," inside the container."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Pod\nmetadata:\n  name: fordpinto\n  namespace: default\nspec:\n  containers:\n  - image: simpleapp\n    name: gastank\n    command:\n      - sleep\n      - "3600"\n    volumeMounts:\n    - mountPath: /scratch\n      name: scratch-volume\n    volumes:\n    - name: scratch-volume\n      emptyDir: {}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"shared-volume-example",children:"Shared Volume Example"}),"\n",(0,a.jsxs)(n.p,{children:["The following specification creates a ",(0,a.jsx)(n.code,{children:"Pod"})," with 2 containers that share access to a volume:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"...\ncontainers:\n- name: alphacont\n  image: busybox\n  volumeMounts:\n  - mountPath: /alphadir\n    name: sharevol\n- name: betacont\n  image: busybox\n  volumeMounts:\n  - mountPath: /betadir\n    name: sharevol\nvolumes:\n  - name: sharevol\n    emptyDir: {}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(96540);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);