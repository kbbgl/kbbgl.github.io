"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[404],{10956:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var l=i(74848),s=i(28453);const r={},t="Shellcode",c={id:"cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/README",title:"Shellcode",description:"Set of instructions injected and executed by an exploited program. It directly manipulates registers, written in assembler and translated into hex opcodes.",source:"@site/docs/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/README.md",sourceDirName:"cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode",slug:"/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/",permalink:"/docs/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Buffer_Overflow",permalink:"/docs/cybersecurity/Offensive/exploit_dev/Buffer_Overflow"},next:{title:"Writing Shellcode for exit() Syscall",permalink:"/docs/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/creating_exit_shellcode/"}},d={},o=[{value:"Understanding System Calls",id:"understanding-system-calls",level:2},{value:"Steps for Creating Shellcode",id:"steps-for-creating-shellcode",level:2},{value:"Creating Shellcode for <code>exit()</code>",id:"creating-shellcode-for-exit",level:2},{value:"Creating Injectable Shellcode for <code>exit()</code>",id:"creating-injectable-shellcode-for-exit",level:2},{value:"Spawning a Shell",id:"spawning-a-shell",level:2},{value:"Format String Bugs",id:"format-string-bugs",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"shellcode",children:"Shellcode"})}),"\n",(0,l.jsx)(n.p,{children:"Set of instructions injected and executed by an exploited program. It directly manipulates registers, written in assembler and translated into hex opcodes."}),"\n",(0,l.jsx)(n.h2,{id:"understanding-system-calls",children:"Understanding System Calls"}),"\n",(0,l.jsx)(n.p,{children:"One way to manipulate a program is to force it to make a system call. System calls allow us to access the kernel and enable us to read and write files. System calls are an interface between user and the protected kernel mode."}),"\n",(0,l.jsx)(n.p,{children:"In Linux, there are 2 common ways to execute a syscall:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Using C library wrapper ",(0,l.jsx)(n.code,{children:"libc"})," (indirect)."]}),"\n",(0,l.jsx)(n.li,{children:"Loading arguments into registers and calling a system interrupt (direct)."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The process to a syscall is:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Specific syscall number is loaded into ",(0,l.jsx)(n.code,{children:"EAX"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Arguments to syscall are loaded into other registers starting from ",(0,l.jsx)(n.code,{children:"EBX"}),", ",(0,l.jsx)(n.code,{children:"ECX"}),", ",(0,l.jsx)(n.code,{children:"EDX"}),", ",(0,l.jsx)(n.code,{children:"ESI"}),", ",(0,l.jsx)(n.code,{children:"EDI"}),", ",(0,l.jsx)(n.code,{children:"EPB"}),". If more arguments are needed, they are passed using a data structure to the first argument."]}),"\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"int 0x80"})," instruction is executed."]}),"\n",(0,l.jsx)(n.li,{children:"The CPU switches to kernel mode."}),"\n",(0,l.jsx)(n.li,{children:"The syscall is executed."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"steps-for-creating-shellcode",children:"Steps for Creating Shellcode"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Writing shellcode in high-level language (e.g. C)."}),"\n",(0,l.jsx)(n.li,{children:"Compiling and disassembling compiled binary."}),"\n",(0,l.jsx)(n.li,{children:"Reviewing Assembly instructions."}),"\n",(0,l.jsx)(n.li,{children:"Cleaning up, decreasing size and generifying Assembly instructions."}),"\n",(0,l.jsx)(n.li,{children:"Extracting opcodes and creating the shellcode."}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"creating-shellcode-for-exit",children:["Creating Shellcode for ",(0,l.jsx)(n.code,{children:"exit()"})]}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"/docs/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/creating_exit_shellcode/",children:"here"})]}),"\n",(0,l.jsxs)(n.h2,{id:"creating-injectable-shellcode-for-exit",children:["Creating Injectable Shellcode for ",(0,l.jsx)(n.code,{children:"exit()"})]}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"/docs/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/creating_injectable_exit_shellcode/",children:"here"})]}),"\n",(0,l.jsx)(n.h2,{id:"spawning-a-shell",children:"Spawning a Shell"}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"/docs/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/spawning_shell/",children:"here"})]}),"\n",(0,l.jsx)(n.h2,{id:"format-string-bugs",children:"Format String Bugs"}),"\n",(0,l.jsxs)(n.p,{children:["See ",(0,l.jsx)(n.a,{href:"/docs/cybersecurity/Offensive/exploit_dev/intro_linux_x86/shellcode/intro_format_string_bugs/",children:"her"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var l=i(96540);const s={},r=l.createContext(s);function t(e){const n=l.useContext(r);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);