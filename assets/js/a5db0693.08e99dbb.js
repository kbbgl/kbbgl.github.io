"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[99333],{70956:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(74848),o=t(28453);const r={slug:"buttons-led",title:"Buttons & LED",description:"Tutorial for 3 essential parts of automatic control device, Input|Output|Control.",authors:["kbbgl"],tags:["hardware","raspberry_pi","ee","c","python"]},l=void 0,s={id:"hardware/electronics/Buttons & LED",title:"Buttons & LED",description:"Tutorial for 3 essential parts of automatic control device, Input|Output|Control.",source:"@site/docs/hardware/electronics/Buttons & LED.md",sourceDirName:"hardware/electronics",slug:"/hardware/electronics/buttons-led",permalink:"/docs/hardware/electronics/buttons-led",draft:!1,unlisted:!1,tags:[{inline:!0,label:"hardware",permalink:"/docs/tags/hardware"},{inline:!0,label:"raspberry_pi",permalink:"/docs/tags/raspberry-pi"},{inline:!0,label:"ee",permalink:"/docs/tags/ee"},{inline:!0,label:"c",permalink:"/docs/tags/c"},{inline:!0,label:"python",permalink:"/docs/tags/python"}],version:"current",frontMatter:{slug:"buttons-led",title:"Buttons & LED",description:"Tutorial for 3 essential parts of automatic control device, Input|Output|Control.",authors:["kbbgl"],tags:["hardware","raspberry_pi","ee","c","python"]},sidebar:"docsSidebar",previous:{title:"Blinking LED",permalink:"/docs/hardware/electronics/blinking-led"},next:{title:"Tablelamp using Buttons & LED",permalink:"/docs/hardware/electronics/buttons-led-tablelamp"}},a={},d=[{value:"Circuit",id:"circuit",level:2},{value:"Code",id:"code",level:2},{value:"C",id:"c",level:3},{value:"Python",id:"python",level:3}];function u(n){const e={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"There are 3 essential parts in a complete automatic control device:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"INPUT: Buttons, switches, sensors, etc."}),"\n",(0,i.jsx)(e.li,{children:"OUTPUT: LED, buzzer, motor."}),"\n",(0,i.jsx)(e.li,{children:"CONTROL: RPi, Arduino, microcontroller."}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"This example explains how to build a simple control system of an LED using a push button switch."}),"\n",(0,i.jsx)(e.h2,{id:"circuit",children:"Circuit"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"circuit",src:t(80386).A+"",width:"656",height:"618"})}),"\n",(0,i.jsx)(e.h2,{id:"code",children:"Code"}),"\n",(0,i.jsx)(e.h3,{id:"c",children:"C"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-c",metastring:"title=ButtonLED.c",children:'#include <wiringPi.h>\n#include <stdio.h>\n\n#define ledPin    0   //define the ledPin\n#define buttonPin 1  //define the buttonPin\n\nvoid  main(void)\n{\n printf("Program is starting ... \\n");\n \n wiringPiSetup(); //Initialize wiringPi. \n \n pinMode(ledPin, OUTPUT); //Set ledPin to output\n pinMode(buttonPin, INPUT);//Set buttonPin to input\n\n pullUpDnControl(buttonPin, PUD_UP);  //pull up to HIGH level\n while(1){\n  if(digitalRead(buttonPin) == LOW){ //button is pressed \n   digitalWrite(ledPin, HIGH);  //Make GPIO output HIGH level\n   printf("Button is pressed, led turned on >>>\\n");  //Output information on terminal\n  }\n  else {       //button is released \n   digitalWrite(ledPin, LOW);  //Make GPIO output LOW level\n   printf("Button is released, led turned off <<<\\n");  //Output information on terminal\n  }\n }\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"gcc ButtonLED.c -o ButtonLed -lwiringPi\n"})}),"\n",(0,i.jsx)(e.h3,{id:"python",children:"Python"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",metastring:'title="ButtonLED.py"',children:"#!/usr/bin/env python3\nimport RPi.GPIO as GPIO\n\nledPin = 11    # define ledPin\nbuttonPin = 12    # define buttonPin\n\ndef setup():\n    \n    GPIO.setmode(GPIO.BOARD)      # use PHYSICAL GPIO Numbering\n    GPIO.setup(ledPin, GPIO.OUT)   # set ledPin to OUTPUT mode\n    GPIO.setup(buttonPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # set buttonPin to PULL UP INPUT mode\n\ndef loop():\n    while True:\n        if GPIO.input(buttonPin)==GPIO.LOW: # if button is pressed\n            GPIO.output(ledPin,GPIO.HIGH)   # turn on led\n            print ('led turned on >>>')     # print information on terminal\n        else : # if button is relessed\n            GPIO.output(ledPin,GPIO.LOW) # turn off led \n            print ('led turned off <<<')    \n\ndef destroy():\n    GPIO.output(ledPin, GPIO.LOW)     # turn off led \n    GPIO.cleanup()                    # Release GPIO resource\n\nif __name__ == '__main__':     # Program entrance\n    print ('Program is starting...')\n    setup()\n    try:\n        loop()\n    except KeyboardInterrupt:  # Press ctrl-c to end the program.\n        destroy()\n"})})]})}function c(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},80386:(n,e,t)=>{t.d(e,{A:()=>i});const i=t.p+"assets/images/button-blink-dd2788de82b3eb282fce6d392a3c34d8.png"},28453:(n,e,t)=>{t.d(e,{R:()=>l,x:()=>s});var i=t(96540);const o={},r=i.createContext(o);function l(n){const e=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);