"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[47382],{13176:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var r=n(74848),i=n(28453);const c={},t="Processes",o={id:"os/UNIX/Processes/processes",title:"Processes",description:"In Linux, threads are treated as standalone processes.",source:"@site/docs/os/UNIX/Processes/processes.md",sourceDirName:"os/UNIX/Processes",slug:"/os/UNIX/Processes/",permalink:"/docs/os/UNIX/Processes/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Sockets",permalink:"/docs/os/UNIX/Network/ss_-_sockets"},next:{title:"Process Management",permalink:"/docs/os/UNIX/Processes/Process_Management"}},d={},l=[{value:"Controlling Resources",id:"controlling-resources",level:2},{value:"Execution Modes",id:"execution-modes",level:2},{value:"Daemons",id:"daemons",level:2},{value:"Shared Libraries",id:"shared-libraries",level:2}];function a(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"processes",children:"Processes"})}),"\n",(0,r.jsx)(s.p,{children:"In Linux, threads are treated as standalone processes."}),"\n",(0,r.jsx)(s.p,{children:"Every process has its own:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"pid"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"ppid"})," - parent process id"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"pgid"})," - process group id"]}),"\n",(0,r.jsxs)(s.li,{children:["program code, data, variables - ",(0,r.jsx)(s.strong,{children:"static libraries"})," are loaded at compile time. ",(0,r.jsx)(s.strong,{children:"shared libraries"})," (or DLLs) are loaded during run time."]}),"\n",(0,r.jsx)(s.li,{children:"file descriptors"}),"\n",(0,r.jsx)(s.li,{children:"environment"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Process attributes:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Program being executed"}),"\n",(0,r.jsx)(s.li,{children:"Context/state"}),"\n",(0,r.jsxs)(s.li,{children:["Permissions - (",(0,r.jsx)(s.code,{children:"setuid"})," programs are run with the permissions of the owner)"]}),"\n",(0,r.jsx)(s.li,{children:"Associated resources"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Process states:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Running"}),"\n",(0,r.jsx)(s.li,{children:"Sleeping"}),"\n",(0,r.jsx)(s.li,{children:"Stopped"}),"\n",(0,r.jsx)(s.li,{children:"Zombie"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"init"})," is the first process that runs on a system and is the parent of all other processes except for ones originating from the kernel."]}),"\n",(0,r.jsxs)(s.p,{children:["If a parent process dies before a child, the ",(0,r.jsx)(s.code,{children:"ppid"})," of the child is set to 1 and the process is adopted by ",(0,r.jsx)(s.code,{children:"init"}),". On newer systems, the ",(0,r.jsx)(s.code,{children:"pid"})," is actually set to 2 which corresponds to an internal kernel thread (",(0,r.jsx)(s.code,{children:"kthresadd"}),")."]}),"\n",(0,r.jsxs)(s.p,{children:["Processes that have terminated but their parent process has not requested their exit code are called a ",(0,r.jsx)(s.strong,{children:"zombie processes"}),". The ",(0,r.jsx)(s.code,{children:"init"})," process ensures processes die gracefully."]}),"\n",(0,r.jsxs)(s.p,{children:["Processes are started by ",(0,r.jsx)(s.code,{children:"fork and exec"})," where the parent process creates a child process which inherits its ",(0,r.jsx)(s.code,{children:"pid"})," and then the parent process terminates."]}),"\n",(0,r.jsxs)(s.p,{children:["All processes are ",(0,r.jsx)(s.strong,{children:"scheduled"})," by the system. This is important because it enables the kernel to perform context switching when a program is waiting for a response, the resources can be transferred to another program in need of the resources until the other first program receives the data."]}),"\n",(0,r.jsxs)(s.p,{children:["Processes interact with the kernel using ",(0,r.jsx)(s.strong,{children:"system calls"})," which act as interfaces to request/release access to the hardware. They run in their own user space for added security where no other process can access it (",(0,r.jsx)(s.strong,{children:"Process Resource Isolation"}),")."]}),"\n",(0,r.jsx)(s.h2,{id:"controlling-resources",children:"Controlling Resources"}),"\n",(0,r.jsxs)(s.p,{children:["We can use ",(0,r.jsx)(s.code,{children:"ulimit"})," to control resource limits for processes. There are 2 types of limits:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Hard, the maximum value, can be set by ",(0,r.jsx)(s.code,{children:"root"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"ulimit -H -n\n1048576\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Soft, the current limiting value, can be set by any user:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"ulimit -S -n\n1024\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"We can set the limit for the current session by using:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"ulimit -n 1600\n"})}),"\n",(0,r.jsxs)(s.p,{children:["To modify system-wide, we can modify the file ",(0,r.jsx)(s.code,{children:"/etc/security/limits.conf"})," and reboot."]}),"\n",(0,r.jsxs)(s.p,{children:["We can also use ",(0,r.jsx)(s.code,{children:"nice"})," to set the ",(0,r.jsx)(s.code,{children:"niceness"})," level of a process:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"nice -n 5 cat\nnice -n -5 cat\nrenice +5 -p 20003\n"})}),"\n",(0,r.jsx)(s.h2,{id:"execution-modes",children:"Execution Modes"}),"\n",(0,r.jsx)(s.p,{children:"A process can be run in two modes:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"System/Kernel mode - Ring 0"}),"\n",(0,r.jsxs)(s.li,{children:["User mode - Ring 3\n",(0,r.jsx)(s.img,{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Priv_rings.svg/1920px-Priv_rings.svg.png",alt:"rings"}),"\nA mode is enforced on the hardware level as it is the state of the processor."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"When a process needs access to the hardware, it issues a system call which changes the context switch from user mode to kernel mode."}),"\n",(0,r.jsx)(s.h2,{id:"daemons",children:"Daemons"}),"\n",(0,r.jsx)(s.p,{children:"Processes that run in the background, usually started at boot time and provide security."}),"\n",(0,r.jsxs)(s.p,{children:["Scripts in ",(0,r.jsx)(s.code,{children:"/etc/init.d"})," run daemons on startup."]}),"\n",(0,r.jsx)(s.h2,{id:"shared-libraries",children:"Shared Libraries"}),"\n",(0,r.jsx)(s.p,{children:"Libraries that can be linked to any program at run-time. They provide a means to use code that can be loaded anywhere in the memory. Once loaded, the shared library code can be used by any number of programs."}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.code,{children:"ldd"})," to list the shared libraries of an executable. It displays a list of ",(0,r.jsx)(s.code,{children:"sonames"})," the name of the object (e.g. ",(0,r.jsx)(s.code,{children:"linux-vdso.so.1"}),")"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"ldd /usr/bin/apt\n linux-vdso.so.1 (0x00007fff9339b000)\n    ...\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"ldconfig"})," binary uses ",(0,r.jsx)(s.code,{children:"/etc/ld.so.conf"})," to configure where to look for shared libraries. We can also use the ",(0,r.jsx)(s.code,{children:"LD_LIBRARY_PATH"})," to set up the shared libraries."]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>o});var r=n(96540);const i={},c=r.createContext(i);function t(e){const s=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(c.Provider,{value:s},e.children)}}}]);