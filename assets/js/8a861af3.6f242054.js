"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[44451],{61146:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=o(74848),t=o(28453);const r={},i="NFS",a={id:"os/UNIX/Network/Network Filesystems/NFS",title:"NFS",description:"Network File System is a filesystem protocol built upon the Open Network Computing Remote Procedure Call system (ONC RPC). RPCs are managed by the portmap service.",source:"@site/docs/os/UNIX/Network/Network Filesystems/NFS.md",sourceDirName:"os/UNIX/Network/Network Filesystems",slug:"/os/UNIX/Network/Network Filesystems/NFS",permalink:"/docs/os/UNIX/Network/Network Filesystems/NFS",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Mounting Network Filesystems",permalink:"/docs/os/UNIX/Network/Network Filesystems/Mounting_Network_Filesystems"},next:{title:"Other Network Filesystems",permalink:"/docs/os/UNIX/Network/Network Filesystems/Other_Network_Filesystems"}},c={},l=[{value:"Server Configuration",id:"server-configuration",level:2},{value:"Client Configuration",id:"client-configuration",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nfs",children:"NFS"})}),"\n",(0,s.jsx)(n.p,{children:"Network File System is a filesystem protocol built upon the Open Network Computing Remote Procedure Call system (ONC RPC). RPCs are managed by the portmap service."}),"\n",(0,s.jsx)(n.h2,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["The main configuration is done in ",(0,s.jsx)(n.code,{children:"/etc/exports"})," file.\nThe file has:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A directory to share."}),"\n",(0,s.jsx)(n.li,{children:"Host with mount options."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The server can be reloaded using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"exportfs -ra\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The syntax of the ",(0,s.jsx)(n.code,{children:"exports"})," file is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# <DIR> <HOST OR NETWORK> [<OPTIONS>]\n\n/srv/nfs 192.168.122.0/24(rw,sync,root_squash)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"client-configuration",children:"Client Configuration"}),"\n",(0,s.jsx)(n.p,{children:"The NFS client mounts the remote filesystem onto the local system. There a few important commands:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# queries mount daemon on the remote server for information including shares that are available for mounting\nshowmount -e server\n\n# daemon is a dynamic port mapping daemon designed to reduce usage of well-known port\nportmap\n\n\n# mount command has the filesystem type NFS, which links to the mount.nfs command. There are two formats of the mount command for NFS shares.\n# - One option for mounting NFS shares is mount HOST:/export /mount-point where the host:/export portion causes the mount command to process this mount as NFS.\n# - The other form of the mount command is mount -t NFS HOST:/export /mountpoint which specifies which NFS is being used.\n# mount SERVER:/share /mnt/share\n"})}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.p,{children:["The NFS default security is to use the UNIX ",(0,s.jsx)(n.code,{children:"UID"})," and ",(0,s.jsx)(n.code,{children:"GID"}),". The challenge of using ",(0,s.jsx)(n.code,{children:"UID/GID"})," on different systems is the values must match. User ",(0,s.jsx)(n.code,{children:"Bib"})," with ",(0,s.jsx)(n.code,{children:"UID 1000"})," on system A must have the same ",(0,s.jsx)(n.code,{children:"UID"})," on system B, or the wrong information may be accessed. Having a single sign on system with network available information like ",(0,s.jsx)(n.code,{children:"NIS"}),", ",(0,s.jsx)(n.code,{children:"LDAP"}),", or ",(0,s.jsx)(n.code,{children:"Kerberos"})," will remove the ",(0,s.jsx)(n.code,{children:"UID"})," confusion issues. NFS4 is Kerberos-aware and an excellent option to eliminate the ",(0,s.jsx)(n.code,{children:"UID/GID"})," mapping issues."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"root_squash"})," option ",(0,s.jsx)(n.code,{children:"/etc/exports"})," file translates the root user's ",(0,s.jsx)(n.code,{children:"UID/GID"})," (0) to an anonymous ",(0,s.jsx)(n.code,{children:"UID/GID"}),". This is on by default and prevents root level access to the shared files. You should not disable ",(0,s.jsx)(n.code,{children:"root_squash"})," without a good reason."]}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.p,{children:"Many factors contribute to the speed and performance of an NFS server or client."}),"\n",(0,s.jsxs)(n.p,{children:["Properly setting the values of ",(0,s.jsx)(n.code,{children:"rsize"})," and ",(0,s.jsx)(n.code,{children:"wsize"})," will allow for greater speed in a file transfer. However, you can only reasonably increase the block size to the ",(0,s.jsx)(n.code,{children:"MTU"})," of your network between client and server. Increasing the frame size (Jumbo Frames) is one option."]}),"\n",(0,s.jsx)(n.p,{children:"Moving from a 1G to a 10G Ethernet network would vastly speed up an NFS setup."}),"\n",(0,s.jsx)(n.p,{children:"The asynchronous mode trades speed for lack of robustness. An unclean shutdown of a server or client operating in an asynchronous mode has the potential to corrupt the data."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var s=o(96540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);