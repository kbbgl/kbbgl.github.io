"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[40780],{10841:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=s(74848),t=s(28453);const i={},c=void 0,r={id:"software/containerization/k8s/API Objects/Objects",title:"Objects",description:"Objects",source:"@site/docs/software/containerization/k8s/API Objects/Objects.md",sourceDirName:"software/containerization/k8s/API Objects",slug:"/software/containerization/k8s/API Objects/Objects",permalink:"/docs/software/containerization/k8s/API Objects/Objects",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"API_Groups",permalink:"/docs/software/containerization/k8s/API Objects/API_Groups"},next:{title:"Working_with_Job_CronJob",permalink:"/docs/software/containerization/k8s/API Objects/Working_with_Job_CronJob"}},d={},l=[{value:"Objects",id:"objects",level:2},{value:"<code>batch</code> API Group",id:"batch-api-group",level:3},{value:"<code>autoscaling</code> API Group,",id:"autoscaling-api-group",level:3},{value:"<code>RBAC</code> API Group",id:"rbac-api-group",level:3}];function a(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"objects",children:"Objects"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Node"}),": represents a machine (physical or virtual) that is part of a cluster."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Service Account"}),": Provides an identifier for processes running in a ",(0,o.jsx)(n.code,{children:"Pod"})," to access the API server and performs actions that it is authorized to."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Resource Quota"}),": Allows defining quotas per namespace for limiting resources, e.g. number of ",(0,o.jsx)(n.code,{children:"Pod"}),"s scheduled."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Endpoint"}),": Represents a set of IPs for ",(0,o.jsx)(n.code,{children:"Pod"}),"s that match a particular service."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Deployment"}),": Controller which manages the state of the ",(0,o.jsx)(n.code,{children:"ReplicaSets"})," and the ",(0,o.jsx)(n.code,{children:"Pod"}),"s within."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ReplicaSet"}),": Orchestrates individual ",(0,o.jsx)(n.code,{children:"Pod"})," lifecycle and updates."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Pod"}),": Lowest manageable unit, runs application containers."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"DaemonSet"}),": Controller that runs on every node. When a node is added/removed, the controller ensures that the ",(0,o.jsx)(n.code,{children:"Pod"})," is removed from the node as well."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"StatefulSet"}),": ",(0,o.jsx)(n.code,{children:"Pod"}),"s deployed using a ",(0,o.jsx)(n.code,{children:"StatefulSet"})," use the same ",(0,o.jsx)(n.code,{children:"Pod"})," specification. How this is different than a ",(0,o.jsx)(n.code,{children:"Deployment"})," is that a ",(0,o.jsx)(n.code,{children:"StatefulSet"})," considers each Pod as unique and provides ordering to ",(0,o.jsx)(n.code,{children:"Pod"})," deployment."]}),"\n",(0,o.jsxs)(n.h3,{id:"batch-api-group",children:[(0,o.jsx)(n.code,{children:"batch"})," API Group"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Job"}),": Used to run ",(0,o.jsx)(n.code,{children:"Pod"}),"s to completion. If it fails, it will restart until number of completions is reached."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"CronJob"}),": Similar to Linux jobs with the same time syntax."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"autoscaling-api-group",children:[(0,o.jsx)(n.code,{children:"autoscaling"})," API Group,"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Horizontal Pod Autoscalers (",(0,o.jsx)(n.strong,{children:"HPA"}),") resources. They automatically scale ",(0,o.jsx)(n.code,{children:"Replication Controllers"}),", ",(0,o.jsx)(n.code,{children:"ReplicaSets"})," or ",(0,o.jsx)(n.code,{children:"Deployments"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Cluster Autoscaler (",(0,o.jsx)(n.strong,{children:"CA"}),") adds/removes nodes to the cluster based on inability to deploy ",(0,o.jsx)(n.code,{children:"Pod"}),"s or having nodes with low utilization for at least 10 minutes. When using this type of autoscaler, we use ",(0,o.jsx)(n.code,{children:"cluster-autoscaler"})," commands."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"rbac-api-group",children:[(0,o.jsx)(n.code,{children:"RBAC"})," API Group"]}),"\n",(0,o.jsx)(n.p,{children:"Used for access control to API."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"ClusterRole"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"Role"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"ClusterRoleBinding"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"RoleBinding"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var o=s(96540);const t={},i=o.createContext(t);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);