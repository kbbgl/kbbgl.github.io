"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[98089],{49618:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=t(74848),o=t(28453);const r={},s=void 0,c={id:"software/containerization/k8s/Security/Security_Contexts",title:"Security_Contexts",description:"Security Contexts",source:"@site/docs/software/containerization/k8s/Security/5._Security_Contexts.md",sourceDirName:"software/containerization/k8s/Security",slug:"/software/containerization/k8s/Security/Security_Contexts",permalink:"/docs/software/containerization/k8s/Security/Security_Contexts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Admission_Control",permalink:"/docs/software/containerization/k8s/Security/Admission_Control"},next:{title:"Pod_Security_Policies",permalink:"/docs/software/containerization/k8s/Security/Pod_Security_Policies"}},a={},d=[{value:"Security Contexts",id:"security-contexts",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"security-contexts",children:"Security Contexts"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Pod"}),"s and containers within ",(0,i.jsx)(n.code,{children:"Pod"}),"s can be given specific security constraints to limit what processes running in containers can do. For example, the UID of the process, the Linux capabilities, and the filesystem group can be limited."]}),"\n",(0,i.jsx)(n.p,{children:"This security limitation is called a security context. It can be defined for the entire pod or per container, and is represented as additional sections in the resources manifests. The notable difference is that Linux capabilities are set at the container level."}),"\n",(0,i.jsx)(n.p,{children:"For example, if you want to enforce a policy that containers cannot run their process as the root user, you can add a pod security context like the one below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  securityContext:\n    runAsNonRoot: true\n  containers:\n  - image: nginx\n    name: nginx\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then, when you create this Pod, you will see a warning that the container is trying to run as root and that it is not allowed. Hence, the Pod will never run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n\nNAME   READY  STATUS                                                 RESTARTS  AGE\nnginx  0/1    container has runAsNonRoot and image will run as root  0         10s\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To learn more, read the ",(0,i.jsx)(n.a,{href:"https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",children:"Configure a Security Context for a Pod or Container section in the Kubernetes Documentation"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);