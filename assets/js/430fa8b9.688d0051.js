"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[17642],{18010:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>x,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var s=t(74848),l=t(28453);const c={},i="Writing Shellcode for exit() Syscall",r={id:"cybersecurity/Offensive/Exploit Development/intro_linux_x86/shellcode/creating_exit_shellcode/README",title:"Writing Shellcode for exit() Syscall",description:"The steps to write any shellcode are:",source:"@site/docs/cybersecurity/Offensive/Exploit Development/intro_linux_x86/shellcode/1_creating_exit_shellcode/README.md",sourceDirName:"cybersecurity/Offensive/Exploit Development/intro_linux_x86/shellcode/1_creating_exit_shellcode",slug:"/cybersecurity/Offensive/Exploit Development/intro_linux_x86/shellcode/creating_exit_shellcode/",permalink:"/docs/cybersecurity/Offensive/Exploit Development/intro_linux_x86/shellcode/creating_exit_shellcode/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Shellcode",permalink:"/docs/cybersecurity/Offensive/Exploit Development/intro_linux_x86/shellcode/"},next:{title:"Injectable Shellcode",permalink:"/docs/cybersecurity/Offensive/Exploit Development/intro_linux_x86/shellcode/creating_injectable_exit_shellcode/"}},o={},d=[];function a(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"writing-shellcode-for-exit-syscall",children:["Writing Shellcode for ",(0,s.jsx)(n.code,{children:"exit()"})," Syscall"]})}),"\n",(0,s.jsx)(n.p,{children:"The steps to write any shellcode are:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Write and compile C program, for ",(0,s.jsx)(n.code,{children:"exit()"})," example."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",metastring:'title="exit.c"',children:"main()\n{\n\t\texit(0);\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We would compile it using:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"> gcc -static -o exit exit.c\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Disassemble the compiled program and review the generated assembly. To do this, we would:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"> gdb exit\n\n(gdb) disas _exit\nDump of assembler code for function _exit:\n\t0x0806de6a <+0>:\tmov    0x4(%esp),%ebx\n\t0x0806de6e <+4>:\tmov    $0xfc,%eax\n\t0x0806de73 <+9>:\tcall   *%gs:0x10\n\t0x0806de7a <+16>:\tmov    $0x1,%eax\n\t0x0806de7f <+21>:\tint    $0x80\n\t0x0806de81 <+23>:\thlt    \nEnd of assembler dump.\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"%gs:0x10"})," is a reference to a register that protects the stack. See ",(0,s.jsx)(n.a,{href:"http://articles.manugarg.com/systemcallinlinux2_6.html",children:"Section 5"}),". In this case, it translates to ",(0,s.jsx)(n.code,{children:"0x80"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"There 2 system calls here and 2 instructions above them that provide them their arguments."}),"\n",(0,s.jsx)(n.p,{children:"This is the first one:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0x0806de6e <+4>:\tmov    $0xfc,%eax\n0x0806de73 <+9>:\tcall   *%gs:0x10\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can see here that we're loading ",(0,s.jsx)(n.code,{children:"0xfc"})," to ",(0,s.jsx)(n.code,{children:"EAX"})," and then calling the syscall. ",(0,s.jsx)(n.code,{children:"0xfc"})," is 252 in decimal and represents ",(0,s.jsx)(n.code,{children:"exit_group()"})," which essentially wraps ",(0,s.jsx)(n.code,{children:"exit()"})," but also terminates all threads in the process."]}),"\n",(0,s.jsx)(n.p,{children:"This is the second:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0x0806de7a <+16>:\tmov    $0x1,%eax\n0x0806de7f <+21>:\tint    $0x80\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here, we're loading 1 into ",(0,s.jsx)(n.code,{children:"EAX"}),". syscall 1 is ",(0,s.jsx)(n.code,{children:"exit()"})," and calling the system interrupt to execute the syscall."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Clean up assembly to generify and minimize size of shellcode. The cleaned up assembly would look like ",(0,s.jsx)(n.code,{children:"exit_shellcode.asm"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-asm",metastring:'title="exit_shellcode.asm"',children:"> cat exit_shellcode.asm\n\nSection .text\n\tglobal _start\n\n_start:\n\tmov ebx,0 ; exit code\n\tmov eax,1 ; syscall exit is 1\n\tint 0x80  ; execute syscall\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Use assembler and linker:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"#elf == elf32 == elf_i386\nnasm -f elf exit_shellcode.asm \nld -m elf_i386 -o exit_shellcode exit_shellcode.o\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Get hexadecimal opcodes from assembly. To do this, we use ",(0,s.jsx)(n.code,{children:"objdump"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"> objdump -d exit_shellcode\n\nexit_shellcode: file format elf32-i386\n\nDisassembly of section .text:\n\n08048080 <.text>:\n8048080:\tbb 00 00 00 00\t\tmov\t\t$0x0, %ebx\n8048085:\tb8 01 00 00 00\t\tmov\t\t$0x1, %eax\n804808a:\tcd 80\t\t\t\tint\t\t$0x80\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We add the opcodes into a character array and use C to execute [",(0,s.jsx)(n.code,{children:"e.c"}),"]:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",metastring:'title="e.c"',children:'// e.c\nchar[] shellcode = "\\xbb\\x00\\x00\\x00\\x00"\n\t\t\t\t   "\\xb8\\x01\\x00\\x00\\x00"\n\t\t\t\t   "\\xcd\\x80";\n\nint main(){\n\tint *ret;\n\tret = (int *)&ret + 2;\n\t(*ret) = (int)shellcode;\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Then compile and run it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"> gcc -o execute_exit_shellcode -fno-stack-protector e.c\n> ./execute_exit_shellcode\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Test out shellcode. To confirm that the intended shellcode is run, we can use ",(0,s.jsx)(n.code,{children:"strace"})," to check all system calls executed by the binary:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"> strace ./execute_exit_shellcode | tail -n 1\nexit(0)\t\t\t\t\t\t= ?\n"})}),"\n"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(96540);const l={},c=s.createContext(l);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);