"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[42836],{56341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=t(74848),a=t(28453);const o={slug:"installing-ubuntu-2004-on-2013-macbook-air",title:"Installing Ubuntu 20.04 on 2013 MacBook\xa0Air",description:"Fill me up!",authors:["kbbgl"],tags:["mac","ubuntu"]},s=void 0,r={permalink:"/blog/installing-ubuntu-2004-on-2013-macbook-air",source:"@site/blog/installing-ubuntu-2004-on-2013-macbook-air.md",title:"Installing Ubuntu 20.04 on 2013 MacBook\xa0Air",description:"Fill me up!",date:"2025-02-07T08:06:58.000Z",tags:[{inline:!1,label:"Mac",permalink:"/blog/tags/mac"},{inline:!1,label:"Ubuntu",permalink:"/blog/tags/ubuntu"}],readingTime:7.905,hasTruncateMarker:!0,authors:[{name:"Kobbi Gal",title:"I like to pick things apart and see how they work inside",url:"https://github.com/kbbgl",imageURL:"https://avatars.githubusercontent.com/u/14372649",key:"kbbgl",page:null}],frontMatter:{slug:"installing-ubuntu-2004-on-2013-macbook-air",title:"Installing Ubuntu 20.04 on 2013 MacBook\xa0Air",description:"Fill me up!",authors:["kbbgl"],tags:["mac","ubuntu"]},unlisted:!1,prevItem:{title:"Installing PiHole On Raspberry Pi 4, MicroK8s running Ubuntu 20.04\xa0(focal)",permalink:"/blog/install-pihole-rpi4-microk8s-ubuntu-2004"},nextItem:{title:"MacBook Pro 2020 High CPU caused by\xa0Siri",permalink:"/blog/macbook-pro-2020-high-cpu-caused-siri"}},l={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"Formatting and Reinstalling MacOS",id:"formatting-and-reinstalling-macos",level:2},{value:"Create a Bootable Ubuntu USB Stick",id:"create-a-bootable-ubuntu-usb-stick",level:2},{value:"Creating a Partition",id:"creating-a-partition",level:2},{value:"Replacing MacOS Default Boot Manager",id:"replacing-macos-default-boot-manager",level:2},{value:"Launching and Installing Ubuntu",id:"launching-and-installing-ubuntu",level:2},{value:"Addendum: Fixing Camera Detection",id:"addendum-fixing-camera-detection",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"The other day when visiting my family, under a large pile of torn up binders and laminated documents, I found my sibling\u2019s old 2013 MacBook Air. I thought it would be wasteful to just leave it there so I picked it up and took it to the lab, AKA home.\nI discovered that the laptop was password locked with my sibling\u2019s user and password. Since it must\u2019ve been laying at my family\u2019s house for a few years at least, and we as human\u2019s have a tendency to forget our credentials, I decided to save the attempts and just format it and start with a clean OS."}),"\n",(0,i.jsx)(n.h2,{id:"formatting-and-reinstalling-macos",children:"Formatting and Reinstalling MacOS"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["In the\xa0",(0,i.jsx)(n.a,{href:"https://support.apple.com/en-il/guide/mac-help/aside/mchl385f1eea/10.13/mac/10.13",children:"menu bar"}),", choose Apple menu > Restart. As your Mac restarts, hold down the ",(0,i.jsx)(n.code,{children:"Command + R"})," keys until the macOS Utilities window appears."]}),"\n",(0,i.jsxs)(n.li,{children:["Select ",(0,i.jsx)(n.em,{children:"Disk Utility"}),", then click Continue."]}),"\n",(0,i.jsxs)(n.li,{children:["Select your startup disk on the left, then click ",(0,i.jsx)(n.em,{children:"Erase"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Click the Format pop-up menu, choose ",(0,i.jsx)(n.a,{href:"https://support.apple.com/en-il/guide/mac-help/aside/dsku61bc26a5/10.13/mac/10.13",children:"Mac OS Extended format"}),", enter a name, then click ",(0,i.jsx)(n.em,{children:"Erase"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["After the disk is erased, choose ",(0,i.jsx)(n.em,{children:"Disk Utility > Quit Disk Utility"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Select\xa0",(0,i.jsx)(n.a,{href:"https://support.apple.com/en-il/guide/mac-help/reinstall-macos-mchlp1599/10.13/mac/10.13",children:"Reinstall macOS"}),", click ",(0,i.jsx)(n.em,{children:"Continue"}),", then follow the onscreen instructions."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["All of the steps ran smoothly and I had a working machine! The battery was still in really good shape as well, the screen was scratchless and the keyboard still had that bounce to it.\nSo I began downloading all the applications I usually use like Google Chrome, iTerm, Visual Studio Code. But when launching Google Chrome, I discovered that when navigating to GMail or Google Drive, I received an error message indicating that the applications do not support this browser and operating system.\nI wasn\u2019t buying it that the hardware would not be able to run the browser and applications and I had a strong belief that it\u2019s some Apple-imposed limitation as part of the \u2018",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Planned_obsolescence",children:"Lightbulb Conspiracy"}),".\u2019 So I decided to pursue a different option: installing the latest Ubuntu on this 2013 MacBook Air to free the software restrictions of the machine manufacturer and unleash the power of the hardware.\nI decided the best approach would be to initially dual boot MacOS and Ubuntu, ensure that Ubuntu is stable and then remove the partition where MacOS lives."]}),"\n",(0,i.jsx)(n.h2,{id:"create-a-bootable-ubuntu-usb-stick",children:"Create a Bootable Ubuntu USB Stick"}),"\n",(0,i.jsxs)(n.p,{children:["The first step was to generate a bootable USB stick which would hold the Ubuntu image.\nI logged into MacOS and downloaded the latest Ubuntu image from ",(0,i.jsx)(n.a,{href:"https://ubuntu.com/download/desktop",children:"Ubuntu Desktop"})," and saved it in ",(0,i.jsx)(n.code,{children:"~/Downloads/ubuntu-20.04.2.0-desktop-amd.iso"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"I then opened the Terminal and ran the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"hdiutil convert -format UDRW -o /tmp/ubuntu.img ~/Downloads/ubuntu-20.04.2.0-desktop-amd.iso\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The command utilizes the MacOS ",(0,i.jsx)(n.code,{children:"hdutil"})," tool to convert an image between two data types: ",(0,i.jsx)(n.code,{children:".iso"})," (disk image in ISO-9660 standard) to ",(0,i.jsx)(n.code,{children:".img.dmg"})," (disk image specifically by MacOS). The ",(0,i.jsx)(n.code,{children:"-format UDRW"})," argument specifies that we want to read and write the image with the Apple ",(0,i.jsx)(n.code,{children:"UDIF"})," format. To read more about the hdutil and UDIF format, I suggest reading the ",(0,i.jsx)(n.a,{href:"https://ss64.com/osx/hdiutil.html",children:"hdutil man page"})," and ",(0,i.jsx)(n.a,{href:"http://disktype.sourceforge.net/doc/ch03s13.html",children:"disk image formats"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The command above created a new file in ",(0,i.jsx)(n.code,{children:"/tmp/ubuntu.img.dmg"}),". But since we don\u2019t want to run the MacOS installer (which is what the dmg image and extension do by default) in this case but want to create a bootable USB stick, we\u2019ll need to convert the image from ",(0,i.jsx)(n.code,{children:".img.dmg"})," to ",(0,i.jsx)(n.code,{children:".img"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mv /tmp/ubuntu.img.dmg /tmp/ubuntu.img\n"})}),"\n",(0,i.jsxs)(n.p,{children:["At this point we can insert the USB stick which will likely be mounted by default to ",(0,i.jsx)(n.code,{children:"/dev/disk1"}),".\nNext, we need to unmounting the disk representing the USB stick, copying all files from the image to the unmounted disk using the dd binary and then ejecting the disk. We can perform all these steps using the MacOS ",(0,i.jsx)(n.code,{children:"diskutil"})," binary within the Terminal:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"diskutil unmountDisk /dev/disk1\n\xa0\nsudo dd if=/tmp/ubuntu.img of=/dev/rdisk1 bs=1m\n\xa0\ndiskutil eject /dev/disk1\n"})}),"\n",(0,i.jsx)(n.p,{children:"We\u2019re done with this step! We now have a USB stick containing the Ubuntu OS. We can eject it for now.\nNext, we need to prepare some disk space on the hard disk where we intend to install Ubuntu."}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-partition",children:"Creating a Partition"}),"\n",(0,i.jsx)(n.p,{children:"A partition is basically a separation of the hard disk into individual sections (also known as containers)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://www.maketecheasier.com/assets/uploads/2012/05/partitions-partition-diagram.png",alt:"cont"})}),"\n",(0,i.jsxs)(n.p,{children:["To be able to run both Ubuntu and MacOS on the same machine, we require to create a partition in the hard disk to hold both operating systems.\nThis step is rather straightforward with the use of the MacOS Disk Utility. We need to launch it, select the first disk we see on the left navver (called ",(0,i.jsx)(n.em,{children:"Macintosh HD"})," in the image below):"]}),"\n",(0,i.jsxs)(n.p,{children:["Then click on ",(0,i.jsx)(n.em,{children:"Partition"}),", choose the size of the disk you want to allocate to the partition where we\u2019ll store Ubuntu, make sure the selected format is ",(0,i.jsx)(n.em,{children:"Mac OS Extended (Case-sensitive, Journaled)"})," and click Apply. My hard disk size was 120GB so I allocated 80GB to Ubuntu and left the rest for MacOS."]}),"\n",(0,i.jsx)(n.h2,{id:"replacing-macos-default-boot-manager",children:"Replacing MacOS Default Boot Manager"}),"\n",(0,i.jsx)(n.p,{children:"Let\u2019s recap what we have done so far:"}),"\n",(0,i.jsxs)(n.p,{children:["What would be the next logical step? We would need to tell the machine to let us decide which operating system we want to boot into. By default, the Apple bootloader will load MacOS. To change this behavior, we need to install a different boot manager. We need ",(0,i.jsx)(n.a,{href:"https://www.rodsbooks.com/refind/",children:"rEFInd Boot Manager"})," to do this."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"http://sourceforge.net/projects/refind/files/0.13.2/refind-bin-0.13.2.zip/download",children:"Download the binary"})," from here and extract it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"unzip ~/Downloads/refind-bin-0.13.2.zip\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then reboot the machine and hold ",(0,i.jsx)(n.code,{children:"Command + R"}),". This should bring you into Recovery Mode."]}),"\n",(0,i.jsxs)(n.p,{children:["We need to run the ",(0,i.jsx)(n.code,{children:"rEFInd"})," installation script. From the main menu bar, choose Utilities > Terminal and type the following command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd /Volumes/Macintosh\\ HD/Users/YOUR_USERNAME/Downloads/refined\n\xa0\n./refind-install\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will install the rEFInd boot manager. After it completes, shut down the machine, insert the USB stick we\u2019ve prepared earlier and turn on the machine."}),"\n",(0,i.jsx)(n.h2,{id:"launching-and-installing-ubuntu",children:"Launching and Installing Ubuntu"}),"\n",(0,i.jsx)(n.p,{children:"When we turn on the machine the next time, we will be greeted with the rEFInd Boot Manager:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://www.rodsbooks.com/refind/refind.png",alt:"refind"})}),"\n",(0,i.jsxs)(n.p,{children:["Select Tux (the penguin, Linux mascot) and use the arrows to navigate to the ",(0,i.jsx)(n.em,{children:"Try Ubuntu without install"})," option. Then press ",(0,i.jsx)(n.em,{children:"e"})," which will expose a configuration file where we will make some changes. We will need to add the following commands between \u2018splash\u2018 and \u2018---\u2018:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nomodeset radeon.audio=1\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is because by default, the Radeon HDMI audio driver is disabled in the Linux kernel. After making this change, press F10 to save and exit.\nAfter a minute or two, you should be the Ubuntu menu:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://ubuntucommunity.s3-us-east-2.amazonaws.com/original/2X/a/ad5e454a9fd45fd56d90da951702c2f2224cd32a.png",alt:"ubuntu"})}),"\n",(0,i.jsxs)(n.p,{children:["Click on ",(0,i.jsx)(n.em,{children:"Install Ubuntu"}),", follow the installation wizard you should be set!"]}),"\n",(0,i.jsx)(n.h2,{id:"addendum-fixing-camera-detection",children:"Addendum: Fixing Camera Detection"}),"\n",(0,i.jsxs)(n.p,{children:["One of the applications I use most nowadays is Zoom so I was surprised when I joined a call and saw that my camera was not detected by Zoom. I also downloaded ",(0,i.jsx)(n.a,{href:"https://wiki.gnome.org/Apps/Cheese",children:"Cheese"})," just to confirm sure that the issue wasn\u2019t specific to Zoom. I saw the same greeting: \u2018no device detected\u2019.\nI did some research and found that there was some firmware missing for the Facetime HD (Broadcom 1570) PCIe webcam which prevented the kernel from detecting the driver. I opened up the terminal and ran the following commands to get the driver to work (you will need ",(0,i.jsx)(n.code,{children:"git"})," and ",(0,i.jsx)(n.code,{children:"curl"})," installed):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"> cd /usr/local/src\n> sudo git clone https://github.com/patjak/bcwc_pcie.git\n \nCloning into 'bcwc_pcie'...\nremote: Enumerating objects: 8, done.\nremote: Counting objects: 100% (8/8), done.\nremote: Compressing objects: 100% (6/6), done.\nremote: Total 1057 (delta 2), reused 4 (delta 0), pack-reused 1049\nReceiving objects: 100% (1057/1057), 352.48 KiB | 537.00 KiB/s, done.\nResolving deltas: 100% (709/709), done.\n \n \n> cd /usr/local/src/bcwc_pcie\n> sudo git clone https://github.com/patjak/facetimehd-firmware\nCloning into 'facetimehd-firmware'...\nremote: Enumerating objects: 1, done.\nremote: Counting objects: 100% (1/1), done.\nremote: Total 886 (delta 0), reused 0 (delta 0), pack-reused 885\nReceiving objects: 100% (886/886), 290.76 KiB | 294.00 KiB/s, done.\nResolving deltas: 100% (585/585), done.\n \n> cd /usr/local/src/bcwc_pcie/facetimehd-firmware\n> sudo make\n \nChecking dependencies for driver download...\n/usr/bin/curl\n/usr/bin/xzcat\n/bin/cpio\n \nDownloading the driver, please wait...\n \n \nFound matching hash from OS X, El Capitan 10.11.5\n==> Extracting firmware...\n --\x3e Decompressing the firmware using gzip...\n --\x3e Deleting temporary files...\n --\x3e Extracted firmware version 1.43.0\n \n> sudo make install\nCopying firmware into '//lib/firmware/facetimehd'\n \n> cd /usr/local/src/bcwc_pcie\n> sudo make\nmake -C /lib/modules/5.0.0-23-generic/build M=/usr/local/src/bcwc_pcie modules\nmake[1]: Entering directory '/usr/src/linux-headers-5.0.0-23-generic'\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_ddr.o\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_hw.o\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_drv.o\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_ringbuf.o\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_isp.o\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_v4l2.o\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_buffer.o\n  CC [M]  /usr/local/src/bcwc_pcie/fthd_debugfs.o\n  LD [M]  /usr/local/src/bcwc_pcie/facetimehd.o\n  Building modules, stage 2.\n  MODPOST 1 modules\n  CC      /usr/local/src/bcwc_pcie/facetimehd.mod.o\n  LD [M]  /usr/local/src/bcwc_pcie/facetimehd.ko\nmake[1]: Leaving directory '/usr/src/linux-headers-5.0.0-23-generic'\n \n> sudo make install\nmake -C /lib/modules/5.0.0-23-generic/build M=/usr/local/src/bcwc_pcie modules_install\nmake[1]: Entering directory '/usr/src/linux-headers-5.0.0-23-generic'\n  INSTALL /usr/local/src/bcwc_pcie/facetimehd.ko\nAt main.c:160:\n- SSL error:02001002:system library:fopen:No such file or directory: ../crypto/bio/bss_file.c:72\n- SSL error:2006D080:BIO routines:BIO_new_file:no such file: ../crypto/bio/bss_file.c:79\nsign-file: certs/signing_key.pem: No such file or directory\n  DEPMOD  5.0.0-23-generic\nWarning: modules_install: missing 'System.map' file. Skipping depmod.\nmake[1]: Leaving directory '/usr/src/linux-headers-5.0.0-23-generic'\n"})}),"\n",(0,i.jsx)(n.p,{children:"Don\u2019t worry too much about the SSL errors above, they are red herrings.\nI then needed to load the drivers into the kernel:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"> sudo depmod\n> sudo modprobe -r bdc_pci\n> sudo modprobe facetimehd\n"})}),"\n",(0,i.jsxs)(n.p,{children:["I relaunched Cheese and saw my messy face on the camera \ud83d\ude42\nBut once I restarted the computer, I saw that the changes were reverted. I needed to persist them somehow. After some more research, I found that I needed to add ",(0,i.jsx)(n.code,{children:"facetimehd"})," to the kernel modules that are loaded during boot time:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"> sudo echo facetimehd >> /etc/modules\n"})}),"\n",(0,i.jsx)(n.p,{children:"After restarting, I saw that I was able to detect my camera in Zoom and Cheese!"})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);