"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[90962],{41465:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>o});var r=s(74848),a=s(28453);const t={},l="Slices and Loops",i={id:"software/languages/go/slices-and-loops",title:"Slices and Loops",description:"Go has two data structures:",source:"@site/docs/software/languages/go/slices-and-loops.md",sourceDirName:"software/languages/go",slug:"/software/languages/go/slices-and-loops",permalink:"/docs/software/languages/go/slices-and-loops",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Run Tests in go",permalink:"/docs/software/languages/go/run-tests"},next:{title:"Struct",permalink:"/docs/software/languages/go/structs"}},c={},o=[{value:"Declare a Slice",id:"declare-a-slice",level:2},{value:"Add Element to Slice",id:"add-element-to-slice",level:2},{value:"Iterating over Slice Elements",id:"iterating-over-slice-elements",level:2},{value:"Slice Structure",id:"slice-structure",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"slices-and-loops",children:"Slices and Loops"})}),"\n",(0,r.jsx)(n.p,{children:"Go has two data structures:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array"})," is a fixed length list."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Slice"})," is an array that can grow or shrink. All elements inside the Slice needs to have the same data type."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"declare-a-slice",children:"Declare a Slice"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'cards := []string{}\n// e.g.\ncards := []string{newCard(), "Ten of Leafs", "Ace of Diamonds"}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"add-element-to-slice",children:"Add Element to Slice"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'cards := []string{newCard(), "Ten of Leafs", "Ace of Diamonds"}\ncards = append(cards, "Six of Spades")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"iterating-over-slice-elements",children:"Iterating over Slice Elements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'cards := []string{newCard(), "Ten of Leafs", "Ace of Diamonds"}\nfor i, card := range cards {\n  fmt.Println(i, card)\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If we want to ignore the indices, we name them ",(0,r.jsx)(n.code,{children:"_"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'for _, suit := range cardSuits {\n  for _, value := range cardValues {\n    cards = append(cards, value+" of "+suit)\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"slice-structure",children:"Slice Structure"}),"\n",(0,r.jsx)(n.p,{children:"When we declare a slice, Go initializes 2 data structures:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["A new slice containing ",(0,r.jsx)(n.strong,{children:"reference types"}),":"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"length"})," (how many elements are in the array),"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"capacity"})," (how many elements are allowed in array)"]}),"\n",(0,r.jsx)(n.li,{children:"a pointer to the memory address of the first element of array."}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"An array with the elements and values"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When we pass a slice as an argument into the function, Go:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Creates a copy of the slice into a different memory address."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The copied slice Pointer to the memory address of the first element of the array is the same as the original."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>i});var r=s(96540);const a={},t=r.createContext(a);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);