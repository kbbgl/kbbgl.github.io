"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[49697],{46492:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>t,toc:()=>l});var o=a(74848),i=a(28453);const s={},c=void 0,t={id:"software/containerization/k8s/Volumes and Data/ConfigMaps",title:"ConfigMaps",description:"ConfigMaps",source:"@site/docs/software/containerization/k8s/Volumes and Data/ConfigMaps.md",sourceDirName:"software/containerization/k8s/Volumes and Data",slug:"/software/containerization/k8s/Volumes and Data/ConfigMaps",permalink:"/docs/software/containerization/k8s/Volumes and Data/ConfigMaps",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Service_Update_Pattern",permalink:"/docs/software/containerization/k8s/Services/Service_Update_Pattern"},next:{title:"Dynamic_Provisioning",permalink:"/docs/software/containerization/k8s/Volumes and Data/Dynamic_Provisioning"}},r={},l=[{value:"<code>ConfigMap</code>s",id:"configmaps",level:2},{value:"Using <code>ConfigMap</code>",id:"using-configmap",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"configmaps",children:[(0,o.jsx)(n.code,{children:"ConfigMap"}),"s"]}),"\n",(0,o.jsxs)(n.p,{children:["A similar API resource to ",(0,o.jsx)(n.code,{children:"Secret"}),"s is the ",(0,o.jsx)(n.code,{children:"ConfigMap"}),", except the data is not encoded. In keeping with the concept of decoupling in Kubernetes, using a ",(0,o.jsx)(n.code,{children:"ConfigMap"})," decouples a container image from configuration artifacts."]}),"\n",(0,o.jsx)(n.p,{children:"They store data as sets of key-value pairs or plain configuration files in any format. The data can come from a collection of files or all files in a directory. It can also be populated from a literal value."}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.code,{children:"ConfigMap"})," can be used in several different ways. A container can use the data as environmental variables from one or more sources. The values contained inside can be passed to commands inside the ",(0,o.jsx)(n.code,{children:"Pod"}),". A Volume or a file in a Volume can be created, including different names and particular access modes. In addition, cluster components like controllers can use the data."]}),"\n",(0,o.jsxs)(n.p,{children:["Let's say you have a file on your local filesystem called ",(0,o.jsx)(n.code,{children:"config.js"}),". You can create a ",(0,o.jsx)(n.code,{children:"ConfigMap"})," that contains this file. The configmap object will have a data section containing the content of the file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"kubectl get configmap foobar -o yaml\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"kind: ConfigMap\napiVersion: v1\nmetadata:\n    name: foobar\ndata:\n    config.js: |\n         {\n...\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ConfigMap"}),"s can be consumed in various ways:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Pod environmental variables from single or multiple ",(0,o.jsx)(n.code,{children:"ConfigMap"}),"s"]}),"\n",(0,o.jsxs)(n.li,{children:["Use ",(0,o.jsx)(n.code,{children:"ConfigMap"})," values in Pod commands"]}),"\n",(0,o.jsxs)(n.li,{children:["Populate ",(0,o.jsx)(n.code,{children:"Volume"})," from ",(0,o.jsx)(n.code,{children:"ConfigMap"})]}),"\n",(0,o.jsxs)(n.li,{children:["Add ",(0,o.jsx)(n.code,{children:"ConfigMap"})," data to specific path in Volume"]}),"\n",(0,o.jsxs)(n.li,{children:["Set file names and access mode in Volume from ",(0,o.jsx)(n.code,{children:"ConfigMap"})," data"]}),"\n",(0,o.jsx)(n.li,{children:"Can be used by system components and controllers."}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"using-configmap",children:["Using ",(0,o.jsx)(n.code,{children:"ConfigMap"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ConfigMap"}),"s can be consumed similar to ",(0,o.jsx)(n.code,{children:"Secret"}),"s by using environmental variables or mounting volumes."]}),"\n",(0,o.jsxs)(n.p,{children:["To use as environmental variables, the ",(0,o.jsx)(n.code,{children:"Pod"})," manifest will use ",(0,o.jsx)(n.code,{children:"valueFrom"})," key and ",(0,o.jsx)(n.code,{children:"configMapKeyRef"})," value to read the values:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"env:\n- name: SPECIAL_LEVEL_KEY\n  valueFrom:\n    configMapKeyRef:\n      name: special-config\n      key: special.how\n"})}),"\n",(0,o.jsx)(n.p,{children:"To use with volumes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"volumes:\n  - name: config-volume\n    configMap:\n      name: special-config\n"})})]})}function f(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>t});var o=a(96540);const i={},s=o.createContext(i);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);