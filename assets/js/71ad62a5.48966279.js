"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[66622],{20122:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var s=t(74848),a=t(28453);const l={},c="Netstat Cheat Sheet",r={id:"os/UNIX/Network/Troubleshooting/netstat",title:"Netstat Cheat Sheet",description:"Best command, will provide pid and name, listening, network stats:",source:"@site/docs/os/UNIX/Network/Troubleshooting/netstat.md",sourceDirName:"os/UNIX/Network/Troubleshooting",slug:"/os/UNIX/Network/Troubleshooting/netstat",permalink:"/docs/os/UNIX/Network/Troubleshooting/netstat",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List All IP Tables Rules",permalink:"/docs/os/UNIX/Network/Troubleshooting/list_all_iptables_rules"},next:{title:"Packet Capture",permalink:"/docs/os/UNIX/Network/Troubleshooting/tcpdump"}},i={},o=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"netstat-cheat-sheet",children:"Netstat Cheat Sheet"})}),"\n",(0,s.jsxs)(n.p,{children:["Best command, will provide ",(0,s.jsx)(n.code,{children:"pid"})," and name, listening, network stats:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -tulpn\n"})}),"\n",(0,s.jsx)(n.p,{children:"list all listening ports, UDP/TCP:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -a\n"})}),"\n",(0,s.jsx)(n.p,{children:"list only tcp:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -at\n"})}),"\n",(0,s.jsx)(n.p,{children:"list only udp:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -au\n"})}),"\n",(0,s.jsx)(n.p,{children:"list all actively listening ports:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -l\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"LISTENING"})," means that a service is listening for connections on that port."]}),"\n",(0,s.jsxs)(n.p,{children:["Once a connection is established it will be ",(0,s.jsx)(n.code,{children:"ESTABLISHED"}),", and you'll have a matching foreign address on the line."]}),"\n",(0,s.jsx)(n.p,{children:"add pid output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -p\n"})}),"\n",(0,s.jsx)(n.p,{children:"show statistics by protocol:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -s\n"})}),"\n",(0,s.jsx)(n.p,{children:"show statistics for tcp:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -st\n"})}),"\n",(0,s.jsx)(n.p,{children:"raw network stats for tcp:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -t --statistics --raw\n"})}),"\n",(0,s.jsx)(n.p,{children:"show I/O by interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"netstat -i\n\nKernel Interface table\nIface      MTU    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg\ncali008a  1500   461097      0      0 0        712668      0      0      0 BMRU\ncali00d7  1500    22246      0      0 0         35126      0      0      0 BMRU\ncali01ee  1500  1424714      0      0 0       2091930      0      0      0 BMRU\ncali0261  1500    51412      0      0 0         90721      0      0      0 BMRU\ncali0354  1500    48491      0      0 0         98009      0      0      0 BMRU\ncali0b41  1500  2416976      0      0 0       2451894      0      0      0 BMRU\ncali0c0e  1500 80759328      0      0 0      74711267      0      0      0 BMRU\ncali0c65  1500    40621      0      0 0         91110      0      0      0 BMRU\ncali14e9  1500    21601      0      0 0         47504      0      0      0 BMRU\ncali1ac2  1500    65225      0      0 0        136848      0      0      0 BMRU\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var s=t(96540);const a={},l=s.createContext(a);function c(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);