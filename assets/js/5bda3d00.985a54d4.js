"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[32198],{27910:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=i(74848),t=i(28453);const r={title:"Bitwise Operations"},o="Bitwise Operations",l={id:"software/languages/assembly/bitwise-operations",title:"Bitwise Operations",description:"The values inside the registers can also be seen as true (1) or false (0).",source:"@site/docs/software/languages/assembly/bitwise-operations.md",sourceDirName:"software/languages/assembly",slug:"/software/languages/assembly/bitwise-operations",permalink:"/docs/software/languages/assembly/bitwise-operations",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Bitwise Operations"},sidebar:"docsSidebar",previous:{title:"Basic Arithmetic",permalink:"/docs/software/languages/assembly/basic-arithmetic"},next:{title:"Branching/Control Flow",permalink:"/docs/software/languages/assembly/branching-control-flow"}},d={},c=[{value:"<code>NOT</code>",id:"not",level:3},{value:"<code>AND</code>",id:"and",level:3},{value:"<code>OR</code>",id:"or",level:3},{value:"<code>XOR</code>",id:"xor",level:3},{value:"Bit Shifting",id:"bit-shifting",level:2},{value:"<code>SHL</code> and <code>SHR</code>",id:"shl-and-shr",level:3},{value:"Arithmetic Shifting",id:"arithmetic-shifting",level:2},{value:"Rotating",id:"rotating",level:2},{value:"Common Operations",id:"common-operations",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"bitwise-operations",children:"Bitwise Operations"})}),"\n",(0,s.jsxs)(n.p,{children:["The values inside the registers can also be seen as true (",(0,s.jsx)(n.code,{children:"1"}),") or false (",(0,s.jsx)(n.code,{children:"0"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["We can use this to perform meaningful operations between values of ",(0,s.jsx)(n.code,{children:"true"})," and ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"not",children:(0,s.jsx)(n.code,{children:"NOT"})}),"\n",(0,s.jsx)(n.p,{children:"A unary operation that flips the bit."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov ch,1001b\nnot ch\n; 0110\n"})}),"\n",(0,s.jsx)(n.h3,{id:"and",children:(0,s.jsx)(n.code,{children:"AND"})}),"\n",(0,s.jsxs)(n.p,{children:["A binary operation (produces one bit from two bits). Results in ",(0,s.jsx)(n.code,{children:"1"})," only if both bits are ",(0,s.jsx)(n.code,{children:"1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov  al,11110000b\nmov  dh,11001100b\nand  al,dh\n; al == 11000000\n"})}),"\n",(0,s.jsx)(n.h3,{id:"or",children:(0,s.jsx)(n.code,{children:"OR"})}),"\n",(0,s.jsxs)(n.p,{children:["A binary operation. Results in ",(0,s.jsx)(n.code,{children:"1"})," if either bit is ",(0,s.jsx)(n.code,{children:"1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov  al,11110000b\nmov  dh,11001100b\nor   al,dh\n; al == 11111100b\n"})}),"\n",(0,s.jsx)(n.h3,{id:"xor",children:(0,s.jsx)(n.code,{children:"XOR"})}),"\n",(0,s.jsxs)(n.p,{children:["A binary operation. Results in ",(0,s.jsx)(n.code,{children:"1"})," if either bit is ",(0,s.jsx)(n.code,{children:"1"})," except when both are ",(0,s.jsx)(n.code,{children:"1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov  al,11110000b\nmov  dh,11001100b\nxor  al,dh\n; al == 00111100b\n"})}),"\n",(0,s.jsx)(n.p,{children:"We can use it to zero a register:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"xor eax,eax\n; eax == 0\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bit-shifting",children:"Bit Shifting"}),"\n",(0,s.jsxs)(n.p,{children:["We can perform operations between bits in different positions by using bit shifting. For example, we can ",(0,s.jsx)(n.code,{children:"AND"})," bit in position 3 with bit in position 5."]}),"\n",(0,s.jsxs)(n.h3,{id:"shl-and-shr",children:[(0,s.jsx)(n.code,{children:"SHL"})," and ",(0,s.jsx)(n.code,{children:"SHR"})]}),"\n",(0,s.jsx)(n.p,{children:"Are used to shift bits left and right. Shifting to the left will insert 0s on the right end, shifting to the right will insert 0s on the left end."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov  al,01001011b\nshl  al,1\n; al == 10010110b\n; CF == 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The argument passed to ",(0,s.jsx)(n.code,{children:"shl/r"})," can only be a small number (1 byte, e.g ",(0,s.jsx)(n.code,{children:"0x0"})," to ",(0,s.jsx)(n.code,{children:"0xff"}),") or a register (e.g. ",(0,s.jsx)(n.code,{children:"cl"}),")"]}),"\n",(0,s.jsx)(n.h2,{id:"arithmetic-shifting",children:"Arithmetic Shifting"}),"\n",(0,s.jsxs)(n.p,{children:["When dealing with unsigned numbers, left shift is multiplication by 2 and right shift is a division by 2. But ",(0,s.jsx)(n.code,{children:"SHR"})," division doesn't work correctly so use ",(0,s.jsx)(n.code,{children:"SAR"})," instead."]}),"\n",(0,s.jsx)(n.h2,{id:"rotating",children:"Rotating"}),"\n",(0,s.jsxs)(n.p,{children:["Rotating means that the bits in a register are pushed left (",(0,s.jsx)(n.code,{children:"ROL"}),") or right (",(0,s.jsx)(n.code,{children:"ROR"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"So if we have the following instruction:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"mov al,10011001\nror al,1\n\n; last bit on the right is pushed into most significant bit\n; al == 11001100\n; last bit on the right is pushed into CF\n; CF == 1\n"})}),"\n",(0,s.jsx)(n.h2,{id:"common-operations",children:"Common Operations"}),"\n",(0,s.jsxs)(n.p,{children:["If we wanted to extract a bit number ",(0,s.jsx)(n.code,{children:"k"})," from a number ",(0,s.jsx)(n.code,{children:"x"}),", we ",(0,s.jsx)(n.code,{children:"AND"})," the value with a special ",(0,s.jsx)(n.code,{children:"mask"})," that will cause all bits to equal ",(0,s.jsx)(n.code,{children:"0"})," while the bit at position ",(0,s.jsx)(n.code,{children:"k"})," will be equal to ",(0,s.jsx)(n.code,{children:"1"}),".\nFor example, if we have the following number:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0110 1110 1101 1110 0111 1100 1110 0001\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And we want the 7th bit (where first bit from the right is ",(0,s.jsx)(n.code,{children:"k=0"}),", we will ",(0,s.jsx)(n.code,{children:"AND"})," the number with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"0000 0000 0000 0000 0000 0000 1000 0000\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-armasm"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(96540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);