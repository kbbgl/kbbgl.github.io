"use strict";(self.webpackChunkkgkb=self.webpackChunkkgkb||[]).push([[18166],{89767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var o=n(74848),i=n(28453);const r={},s=void 0,c={id:"software/containerization/k8s/Security/Pod_Security_Policies",title:"Pod_Security_Policies",description:"Pod Security Poilicies",source:"@site/docs/software/containerization/k8s/Security/6._Pod_Security_Policies.md",sourceDirName:"software/containerization/k8s/Security",slug:"/software/containerization/k8s/Security/Pod_Security_Policies",permalink:"/docs/software/containerization/k8s/Security/Pod_Security_Policies",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Security_Contexts",permalink:"/docs/software/containerization/k8s/Security/Security_Contexts"},next:{title:"Network_Security_Policies",permalink:"/docs/software/containerization/k8s/Security/Network_Security_Policies"}},a={},l=[{value:"Pod Security Poilicies",id:"pod-security-poilicies",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"pod-security-poilicies",children:"Pod Security Poilicies"}),"\n",(0,o.jsxs)(t.p,{children:["To automate the enforcement of security contexts, you can define ",(0,o.jsx)(t.code,{children:"PodSecurityPolicies"})," (PSP). A PSP is defined via a standard Kubernetes manifest following the PSP API schema. An example is presented below."]}),"\n",(0,o.jsx)(t.p,{children:"These policies are cluster-level rules that govern what a pod can do, what they can access, what user they run as, etc."}),"\n",(0,o.jsx)(t.p,{children:"For instance, if you do not want any of the containers in your cluster to run as the root user, you can define a PSP to that effect. You can also prevent containers from being privileged or use the host network namespace, or the host PID namespace."}),"\n",(0,o.jsx)(t.p,{children:"You can see an example of a PSP below:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: restricted\nspec:\n  seLinux:\n    rule: RunAsAny\n  supplementalGroups:\n    rule: RunAsAny\n  runAsUser:\n    rule: MustRunAsNonRoot\n  fsGroup:\n    rule: RunAsAny\n"})}),"\n",(0,o.jsxs)(t.p,{children:["For Pod Security Policies to be enabled, you need to configure the admission controller of the controller-manager to contain ",(0,o.jsx)(t.code,{children:"PodSecurityPolicy"}),". These policies make even more sense when coupled with the RBAC configuration in your cluster. This will allow you to finely tune what your users are allowed to run and what capabilities and low level privileges their containers will have."]}),"\n",(0,o.jsxs)(t.p,{children:["See the ",(0,o.jsx)(t.a,{href:"https://github.com/kubernetes/examples/tree/master/staging/podsecuritypolicy/rbac/",children:"PSP RBAC example on GitHub"})," for more details."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var o=n(96540);const i={},r=o.createContext(i);function s(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);